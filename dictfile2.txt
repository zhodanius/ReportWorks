alive\rrlite\framewrk\include\ctrlobj.h:    // flags indicating internal state.  do not modify.
alive\rrlite\framewrk\include\ctrlobj.h:    unsigned m_fCreatingWindow:1;                  // indicates if we're in CreateWindowEx or not
alive\rrlite\viewchrt.h:typedef struct PDIChart	// pdi export object structure
EXPORTMG\FLDLST\fldlst.h://  changed to support data dict. extra data item
EXPORTMG\FLDLST\tblobj.h://  changed to support data dict. extra data item
EXPORTMG\FLDLST\tblobj.h:	BOOL bExpanded;		// indicates if table entries are expanded 
H\appres - 2013-09-26.h:#define IDDICT                          1027
H\appres - 2013-09-26.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY 1127
H\appres - 2013-09-26.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX 1128
H\appres - 2013-09-26.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY_BROWSE 1133
H\appres - 2013-09-26.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX_BROWSE 1134
H\appres - 2013-09-26.h:#define IDMASTEROPENDICT                1312
H\appres - 2013-09-26.h:#define ID_INDICATOR_LINEINCH           59142
H\appres - original.h:#define IDDICT                          1027
H\appres - original.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY 1127
H\appres - original.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX 1128
H\appres - original.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY_BROWSE 1133
H\appres - original.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX_BROWSE 1134
H\appres - original.h:#define IDMASTEROPENDICT                1312
H\appres - original.h:#define ID_INDICATOR_LINEINCH           59142
H\appres - revised.h:#define IDDICT                          1027
H\appres - revised.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY 1127
H\appres - revised.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX 1128
H\appres - revised.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY_BROWSE 1133
H\appres - revised.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX_BROWSE 1134
H\appres - revised.h:#define IDMASTEROPENDICT                1312
H\appres - revised.h:#define ID_INDICATOR_LINEINCH           59142
H\appres.h:#define IDDICT                          1027
H\appres.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY 1127
H\appres.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX 1128
H\appres.h:#define IDC_FILESETTINGS_REPORT_DICTIONARY_BROWSE 1133
H\appres.h:#define IDC_FILESETTINGS_DICTIONARY_INDEX_BROWSE 1134
H\appres.h:#define IDMASTEROPENDICT                1312
H\appres.h:#define ID_INDICATOR_LINEINCH           59142
H\attrbstr.h:#define ATR_STR_WD_REPORT_RRDICT                                        "Report Dictionary Editor"
H\attrbstr.h:#define ATR_STR_WD_ARP_REPORT_RRDICT                            "ARPEGGIO(TM) Report Dictionary Editor"
H\attrdefs.h:#define IDICON_ATRB_SMALL_ICON				325
H\attrdefs.h:#define IDICON_ATRB_MEDIUM_ICON				330
H\attrdefs.h:#define IDICON_ATRB_LARGE_ICON				331
H\attrib.h:#define nRRDICTIONARY 4 // flag used to specify that the attrib dll function is called from
H\attrib.h:						// the dictionary builder (rrdict.exe )
H\cfcomp.h:// Added a new flag/mask that indicates when we should display error messages
H\cfcomp.h:// Added prototype of lcfqualifyall(), used by data dictionary code.
H\cfcomp.h://  DATADICT.
H\cfcomp.h:// Added some conditionals relating to data dictionary support.
H\colopts.h:// DbaDict column options used by it and CFtxFile low-level transfer classes
H\colopts.h:#define MAXNULLLEN		32	// keep these in sync with size strings in DbaDict\include\DbaDict.h
H\colopts.h:typedef struct ColOpts	// All DataDict nodes '\0' terminated options' format strings; used by CFtxFile too
H\custcfd.h:	afx_msg void OnIDMasterOpenDict();
H\custcfd.h:	int			m_notAvailState;					// indicates position of "not avail" datasource
H\datadict.h:// $Log:   D:/R&R Project/archives/H/DATADICT.H_V  $
H\datadict.h:// New dictionary format
H\datadict.h:// Added some stuff to support data dictionary in RSW.  The field descriptor
H\datadict.h://  structure field-name array must be 11 bytes since dictionary is a .DBF.
H\datadict.h://  dictionary: HIDE_FIELD, HIDE_FILTR, and HIDE_INST.
H\datadict.h://  winit.c and nowhere else and is needed even if DATADICT is not "on"
H\datadict.h:// Moved some data-dictionary-related GLOBALS here from xglobal.h (I think).
H\datadict.h:#ifndef _DATADICT_H_
H\datadict.h:#if defined _DATADICT_C_
H\datadict.h:#define _DATADICT_H_
H\datadict.h://  use by datadict.c.  These structure members are not defined in the RSW
H\datadict.h:#if defined(DATADICT)
H\datadict.h:GLOBAL char near WxDataDict[]
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: = "DataDict"
H\datadict.h:GLOBAL char near WxDataDictIx[]
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: = "DataDictIndex"
H\datadict.h:GLOBAL char near WxDictKey[]
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: = "Data Dictionary"
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h: #if defined _DATADICT_C_
H\datadict.h:#endif // end _DATADICT_H_
H\dbexport.h:	BOOL	bUseColor;						// NEW - indicates whether color or image is active
H\dbi.h:#define dbiUNSUPPORTED	   -1	// Non-Q+E: indicates a field we'll ignore.
H\dfileset.h:// Remove Dictionary folder settings
H\dfileset.h://	char      m_szReportDictionary[WINPATHLEN+1]  ;
H\dfileset.h://	char      m_szDictionaryIndex[WINPATHLEN+1]   ;
H\dfileset.h://	afx_msg void OnFileSettingsReportDictionaryBrowse() ;
H\dfileset.h://	afx_msg void OnFileSettingsDictionaryIndexBrowse()  ;
H\DLGSTRIX.H:      /* dicom */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_COLOR,   /* DICOM Color            */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\DLGSTRIX.H:      DLG_STRING_DICOM8,
H\DLGSTRIX.H:      DLG_STRING_DICOM16,
H\DLGSTRIX.H:      DLG_STRING_DICOM24,
H\DLGSTRIX.H:      /* DICOM file subtypes (8-bit)       */
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM8_GRAY,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM8_COLOR,
H\DLGSTRIX.H:      /* DICOM file subtypes (Other-bit)   */
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_RLE_GRAY,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_RLE_COLOR,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_JPEG_GRAY,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_JPEG_COLOR,
H\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\DLGSTRIX.H:      DLG_STRING_EXT_DICOM,
H\DLGSTRIX.H:      DLG_STRING_J2KPREDICTABLETERMINATION,
H\eng.h:// Added prototype for sql_prep_tablename_for_dict().
H\eng.h:extern LPSTR sql_prep_tablename_for_dict (LPSTR lpszNameIn, LPSTR lpszNameOut);
H\genreport.h:	BOOL				m_bCanContainTable;	// boolean indicating if this table can contain another table.
H\global.h://  choose among displaying fieldnames, data-dictionary descriptions, or
H\globals.h:	char DDFName[WINPATHLEN+1];		// data dictionary file name
H\globals.h:	char DDIName[WINPATHLEN+1];		// data dictionary index name
H\Ldkrn.h:/* Dialog String Indices */
H\Ldkrn.h:   DOCEDIT_DLGSTR_ERROR_MEDICAL_NOT_ENABLED,
H\LeadTools\ClassLib\ltcAnn.h:      virtual L_INT      ShowLockedIcon (L_BOOL bShow=TRUE, L_UINT uFlags=0);
H\LeadTools\ClassLib\ltcBBase.h:   friend class LBitmapDictionary;
H\LeadTools\ClassLib\ltcDictn.h:| FILE NAME : ltcDictn.h                                                      |
H\LeadTools\ClassLib\ltcDictn.h:#ifndef  _LEAD_DICTIONARY_H_
H\LeadTools\ClassLib\ltcDictn.h:#define  _LEAD_DICTIONARY_H_
H\LeadTools\ClassLib\ltcDictn.h:#define ALLOCATED_DICTIONARY_SIZE    50
H\LeadTools\ClassLib\ltcDictn.h:| Class     : LDictionary                                                     |
H\LeadTools\ClassLib\ltcDictn.h:class LWRP_EXPORT LDictionary :public LBase
H\LeadTools\ClassLib\ltcDictn.h:      L_VOID *m_extLDictionary;
H\LeadTools\ClassLib\ltcDictn.h:      HGLOBAL                    m_hDictionary;
H\LeadTools\ClassLib\ltcDictn.h:      LDictionary();
H\LeadTools\ClassLib\ltcDictn.h:      virtual ~LDictionary();
H\LeadTools\ClassLib\ltcDictn.h:| Class     : LBitmapDictionary                                               |
H\LeadTools\ClassLib\ltcDictn.h:class LWRP_EXPORT LBitmapDictionary :public LDictionary
H\LeadTools\ClassLib\ltcDictn.h:      L_VOID *m_extLBitmapDictionary;
H\LeadTools\ClassLib\ltcDictn.h:#endif //_LEAD_DICTIONARY_H_
H\LeadTools\ClassLib\ltcDlg.h:      L_UINT32          m_uProcess;    // flag indicating which function was chosen.
H\LeadTools\ClassLib\ltcDlg.h:      L_BOOL            m_bSpatialFilter; // flag indicating choice of filter
H\LeadTools\ClassLib\ltcExtrn.h:extern LWRP_EXPORT   LBitmapDictionary    BitmapDictionary;
H\LeadTools\ClassLib\ltcExtrn.h:extern               LDictionary          LStatusDictionary;
H\LeadTools\ClassLib\ltcExtrn.h:extern LWRP_EXPORT pL_ANNSHOWLOCKEDICON  pL_AnnShowLockedIcon ;
H\LeadTools\ClassLib\LtcFMcro.h:#define L_ANNSHOWLOCKEDICON(hObject, bShow, uFlags)\
H\LeadTools\ClassLib\LtcFMcro.h:   ((pL_AnnShowLockedIcon)? pL_AnnShowLockedIcon(hObject, bShow, uFlags):WRPERR_LTANN_DLL_NOT_LOADED)
H\LeadTools\ClassLib\LtcFncID.h:#define IDF_L_AnnShowLockedIcon              MAKEINTRESOURCE(231)
H\LeadTools\ClassLib\ltcFTypD.h:typedef L_INT ( pEXT_FUNCTION pL_ANNSHOWLOCKEDICON )(HANNOBJECT hObject,
H\LeadTools\ClassLib\ltcInet.h:#include "ltcDictn.h"
H\LeadTools\ClassLib\ltcInet.h:   LDictionary       m_ConnectionList;
H\LeadTools\ClassLib\ltcMacro.h:      if(LDictionary_IsBitmap(pLBitmap))                                         \
H\LeadTools\ClassLib\ltcMacro.h:   if(LDictionary_IsBitmap(pLBitmap))                                            \
H\LeadTools\ClassLib\ltcMacro.h:   if(LDictionary_IsBitmap(pBitmap)&&pBitmap->IsFileNameEnabled())                      \
H\LeadTools\ClassLib\ltcMacro.h:   if(LDictionary_IsBitmap(pBitmap)&&pBitmap->IsFileNameEnabled())                      \
H\LeadTools\ClassLib\ltcMacro.h:      LStatusDictionary.RemoveItem(&sdData);                   \
H\LeadTools\ClassLib\ltcMacro.h:      if(LStatusDictionary.GetCount()<=0)                      \
H\LeadTools\ClassLib\ltcMacro.h:         LDictionary_IsBitmap(pBitmap)&&                       \
H\LeadTools\ClassLib\ltcMacro.h:      LStatusDictionary.AddItem(&sdData);                      \
H\LeadTools\ClassLib\ltcMacro.h://--FOR Dictionary-------------------------------------------------------------
H\LeadTools\ClassLib\ltcMacro.h:#define LDictionary_GetBitmapCount() \
H\LeadTools\ClassLib\ltcMacro.h:        BitmapDictionary.GetCount()
H\LeadTools\ClassLib\ltcMacro.h:#define LDictionary_GetBitmap(nIndex) \
H\LeadTools\ClassLib\ltcMacro.h:        (LBitmapBase L_FAR*)BitmapDictionary.GetItem(nIndex)
H\LeadTools\ClassLib\ltcMacro.h:#define LDictionary_DisconnectBitmapList(pLBitmaplist) \
H\LeadTools\ClassLib\ltcMacro.h:        BitmapDictionary.DisconnectBitmapList(pLBitmaplist)
H\LeadTools\ClassLib\ltcMacro.h:#define LDictionary_IsBitmap(pLBitmap)\
H\LeadTools\ClassLib\ltcMacro.h:        BitmapDictionary.IsItem(pLBitmap)
H\LeadTools\ClassLib\ltcVBase.h:   friend class LBitmapDictionary;
H\LeadTools\ClassLib\ltcVDlg.h:      //from dictionary
H\LeadTools\ClassLib\LTDIC.H://  LTDic : Header file.
H\LeadTools\ClassLib\LTDIC.H:#ifndef LTDIC_H_INCLUDED
H\LeadTools\ClassLib\LTDIC.H:#define LTDIC_H_INCLUDED
H\LeadTools\ClassLib\LTDIC.H:   #ifdef _LEAD_DICOM_NO_EXP_IMP
H\LeadTools\ClassLib\LTDIC.H:      #define  DICOM_EXPORT      
H\LeadTools\ClassLib\LTDIC.H:   #ifdef _LEAD_DICOM_
H\LeadTools\ClassLib\LTDIC.H:         #define  DICOM_EXPORT 
H\LeadTools\ClassLib\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllexport)
H\LeadTools\ClassLib\LTDIC.H:         #define  DICOM_EXPORT 
H\LeadTools\ClassLib\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllimport)
H\LeadTools\ClassLib\LTDIC.H:   #endif //_LEAD_DICOM_NO_EXP_IMP
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_SUCCESS                            0
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_LOCKED                       1
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_MEMORY                       2
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_OPEN                         3
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_READ                         4
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_WRITE                        5
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_SEEK                         6
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_END                          7
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_FORMAT                       8
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_PARAMETER                    9
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_IMAGE                       10
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_COMPRESSION                 11
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_PHOTOMETRIC                 12
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_CONVERSION                  13
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_RANGE                       14
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_BITSPERPIXEL                15
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_QFACTOR                     16
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ELEMENT_LENGTH_ODD          100
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_DICOMDIR_FOLDER             200
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_FILE                        201
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_FILEID                      202
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_J2K_LOCKED                  203
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_PDU_TYPE                    17
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_PDU_LENGTH                  18
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_PDU_ID                      19
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_FAILURE                 29
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_ACCESS                  30  // The address is a broadcast address
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_IN_USE          31  // The address is already in use
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_AVAILABLE   32  // The address is not available from the local computer
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_SUPPORTED   33  // The address family is not supported
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_ABORTED      34  // The virtual circuit was aborted
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_REFUSED      35  // The attempt to connect was forcefully rejected
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_RESET        36  // The virtual circuit was reset by the remote side
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_DESTINATION_REQUIRED    37  // A destination address is required
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_ARGUMENT_INCORRECT      38  // The namelen argument is incorrect
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_IN_PROGRESS             39  // A blocking operation is in progress
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_BLOCKING_CANCELED       40  // The blocking call was canceled
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_INVALID                 41  // The socket has not been bound with bind
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_IS_CONNECTED            42  // The socket is already connected
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NO_MORE_FILE            43  // No more file descriptors are available
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_MESSAGE_SIZE            44  // The datagram is larger than the maximum supported
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_DOWN                    45  // The network subsystem has failed
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_RESET                   46  // The connection must be reset
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_UN_REACH                47  // The network can't be reached from this host at this time
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NO_BUFFERS              48  // No buffer space is available
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NOT_CONNECTED           49  // The socket is not connected
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NOT_SOCKET              50  // The descriptor is not a socket
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_OPERATION_NOT_SUPPORTED 51  // The type does not support connection-oriented service
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_NOT_SUPPORTED  52  // The specified protocol is not supported
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_TYPE           53  // The specified protocol is the wrong type
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_SHUTDOWN                54  // The socket has been shut down
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_SOCKET_NOT_SUPPORTED    55  // The type is not supported in this address family
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_TIME_OUT                56  // Attempt to connect timed out without establishing a connection
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_WOULD_BLOCK             57  // The socket is marked as nonblocking and the requested operation would block
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_HOST_NOT_FOUND          58  // Authoritative Answer Host not found
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NO_DATA                 59  // Valid name, no data record of requested type
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NO_RECOVERY             60  // Nonrecoverable errors
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_NOT_INITIALISED         61  // The system was not initialized
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_SYSTEM_NOT_READY        62  // Not ready for network communication
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_TRY_AGAIN               63  // Non-Authoritative Host not found, or server faild
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_VERSION_NOT_SUPPORTED   64  // The version requested is not provided by this implementation
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_NET_SECURITY_BREACH         65  // There is an cryptographic error. 
H\LeadTools\ClassLib\LTDIC.H:      // Call LDicomNet::GetStatusISCL or LDicomNet::GetStatusTLS for the description of internal status
H\LeadTools\ClassLib\LTDIC.H:      // before error, and LDicomNet::GetErrorSecure for the description of the error
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS                         66  // TLS internal error
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_SECURITY_LOCKED             67  // DICOM Security Features are locked
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_DLL_NOT_LOADED          68  // TLS and/or CRY DLL not loaded
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_BAD_SECURE_MODE             69  // if I do ISCL operations on TLS objects
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ANN                         70
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ANN_LOCKED                  71  // Annotation support is locked
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ANN_MISSING                 72  // Annotation dll is missing
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TAG_ALREADY_EXISTS          73  // LEAD private creator element already exists
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ANN_NO_EXIST                74  // Requested annotation file or page does not exist
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_SECURE_NONE  0xABCD0000
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_SECURE_ISCL  0xABCD0001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_SECURE_TLS   0xABCD0002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_OK                      0
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_CLOSE_NOTIFY            128
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_UNEXPECTED_MESSAGE      129
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_BAD_RECORD_MAC          130
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_FAILED          131
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_RECORD_OVERFLOW         132
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_DECOMPRESSION_FAILURE   133
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_HANDSHAKE_FAILURE       134
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_BAD_CERTIFICATE         135
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_UNSUPPORTED_CERTIFICATE 136
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_REVOKED     137
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_EXPIRED     138
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_UNKNOWN     139
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_ILLEGAL_PARAMETER       140
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_UNKNOWN_CA              141
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_ACCESS_DENIED           142
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_DECODE_ERROR            143
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_ERROR           144
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_EXPORT_RESTRICTION      145
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_PROTOCOL_VERSION        146
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_INSUFFICIENT_SECURITY   147
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_INTERNAL_ERROR          148
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_USER_CANCELED           149
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_NO_RENEGOTIATION        150
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_NO_KEEPALIVE            151
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_TLS_CLOSED_CONTROLLED       152
H\LeadTools\ClassLib\LTDIC.H:typedef enum _DICOM_TLS_ERRORS DICOM_TLS_ERRORS;
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAX_PACKET_SIZE        (8160)     // set with manual values
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAX_MESSAGE_SIZE       (1048576)   // set with manual values
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_ACK                    0x00000000
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_NAK                    0xFFFFFFFF
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_3P4W       0x00000000  // three pass four way mutual auth
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_ENCRYPT_NONE           0x00000000
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_ENCRYPT_DESCBC         0x00001212
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAC_NONE               0x00000000
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAC_MD5                0x00001441
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAC_DESMAC             0x00004001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RQ     0x00110001  // RQ - request, RP - response
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RP     0x00110003
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RQ               0x00120001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RP               0x00120003
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS1_NOTIF      0x00130002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS2_NOTIF      0x00140002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS3_NOTIF      0x00150002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_COMPLETION_NOTIF 0x00160002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RQ      0x00200001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RP      0x00200003
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RQ     0x00210001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RP     0x00210003
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_NOTIF   0x00200002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_MAC_TRANSMISSION_NOTIF       0x00230002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_THROUGH_MODE_TRANSMISSION_NOTIF 0x00260002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RQ        0x00FF0001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RP        0x00FF0003
H\LeadTools\ClassLib\LTDIC.H:enum DICOM_ISCLAuthKeyPair
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR1 = 0x00000001,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR2 = 0x00000002,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR3 = 0x00000003,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR4 = 0x00000004,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR5 = 0x00000005,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR6 = 0x00000006,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR7 = 0x00000007,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR8 = 0x00000008
H\LeadTools\ClassLib\LTDIC.H:enum DICOM_ISCLCryptKeyPair
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR1 = 0x00000001,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR2 = 0x00000002,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR3 = 0x00000003,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR4 = 0x00000004,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR5 = 0x00000005,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR6 = 0x00000006,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR7 = 0x00000007,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR8 = 0x00000008,
H\LeadTools\ClassLib\LTDIC.H:   DICOM_ISCL_UNIQUE_SESSION_KEYS = 0x00000010
H\LeadTools\ClassLib\LTDIC.H:struct DICOM_ISCLMessageHeader
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 Indicator;    // not used
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_OK                      0 // start of ISCL errors
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_OPTION             100 // option not expected or unknown
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_LENGTH             101 // the length of the message differ of the expected length
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_ICCARD           102 // local error on Id card
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_REMOTE_ICCARD          103 // error on Id card level at peer
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MSGID              104 // message id not expected or unknown
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_VERSION            105 // not MEDIS-ISCL V1.00
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MUTUAL_AUTH_METHOD 106 // mutual auth not 3pass 4way
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_COMMBLOCK_LENGTH   107 // if the comm block length is too big
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_RECEIVED_NAK           108 // when the peer sent option = NAK in general cases, there are some special cases
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_MSG_TRANSMISSION       109 // bad encryption method or MAC method
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_SMALL_LENGTH      110 // message length of the peer is too small
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_SMALL_LENGTH     111 // peer want to send a message bigger than local MaxMessageLength
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_DECRYPT                112 // error during decryption - decryption generate bad result
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MAC                113 // wrong message authentication code
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_RND_NO_FOR_SESSION_KEY_EXPECTED 114  // only when the receiver expect to receive a "Random number for session key" request
H\LeadTools\ClassLib\LTDIC.H:                                          // when appears, the sender must be set to "SetSecurity(DICOM_ISCL_UNIQUE_SESSION_KEYS)"
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_REFUSE_CLOSE      115 // when the peer does not accept the closing of connection
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_OPEN       0x0000
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_CREATE     0x0001
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_READ       0x0002
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_WRITE      0x0004
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_TEMPORARY  0x0008
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_MEMORY     0x0010
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_REDIRECT   0x0020
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_CLOSE      0x0040
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_DELETE     0x0080
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_BEGIN      0
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_CURRENT    1
H\LeadTools\ClassLib\LTDIC.H:#define DICOM_FILE_END        2
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomFile
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile();
H\LeadTools\ClassLib\LTDIC.H:   ~LDicomFile();
H\LeadTools\ClassLib\LTDIC.H:#define GENERICLINK  pDICOMLINK pParent;     \
H\LeadTools\ClassLib\LTDIC.H:                     pDICOMLINK pFirstChild; \
H\LeadTools\ClassLib\LTDIC.H:                     pDICOMLINK pLastChild;  \
H\LeadTools\ClassLib\LTDIC.H:                     pDICOMLINK pPrev;       \
H\LeadTools\ClassLib\LTDIC.H:                     pDICOMLINK pNext;       \
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMLINK *pDICOMLINK;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomTree
H\LeadTools\ClassLib\LTDIC.H:   LDicomTree();
H\LeadTools\ClassLib\LTDIC.H:   ~LDicomTree();
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetRoot   (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetParent (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetChild  (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetFirst  (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetLast   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetPrev   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  GetNext   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32    GetLevel  (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32    GetCount  (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  FindIndex (pDICOMLINK pLink, L_BOOL bTree, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL      Exists    (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  Verify    ();
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK m_pFirstChild;
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK m_pLastChild;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomTreeEx : public LDicomTree
H\LeadTools\ClassLib\LTDIC.H:   LDicomTreeEx();
H\LeadTools\ClassLib\LTDIC.H:   ~LDicomTreeEx();
H\LeadTools\ClassLib\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LeadTools\ClassLib\LTDIC.H:   VR_FIXED = 0,           // DICOMVR.nLength bytes fixed
H\LeadTools\ClassLib\LTDIC.H:   VR_MAXIMUM,             // DICOMVR.nLength bytes maximum
H\LeadTools\ClassLib\LTDIC.H:   VR_MAXIMUM_GROUP,       // DICOMVR.nLength maximum per component group
H\LeadTools\ClassLib\LTDIC.H:   VR_ANY,                 // DICOMVR.nLength any length valid for any of the other DICOM Value Representations
H\LeadTools\ClassLib\LTDIC.H:   VR_NOT_APPLICABLE,      // DICOMVR.nLength not applicable
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMVR DICOMVR, *pDICOMVR;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMVR
H\LeadTools\ClassLib\LTDIC.H:} DICOMVR, *pDICOMVR;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomVR
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR Insert    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR Delete    (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR GetFirst  ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR GetLast   ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR GetPrev   (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR GetNext   (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL   Exists    (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR Find      (L_UINT16 nCode);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMVR FindIndex (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL   SetName   (pDICOMVR pVR, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:   static LDicomTreeEx m_InfoVR;
H\LeadTools\ClassLib\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomDefaultVR   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomInsertVR    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomDeleteVR    (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomResetVR     ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetFirstVR  ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetLastVR   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetPrevVR   (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetNextVR   (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32 EXT_FUNCTION L_DicomGetCountVR  ();
H\LeadTools\ClassLib\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomExistsVR    (pDICOMVR pVR);
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindVR      (L_UINT16 nCode);
H\LeadTools\ClassLib\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindIndexVR (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomSetNameVR   (pDICOMVR pVR, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMUID DICOMUID, *pDICOMUID;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMUID
H\LeadTools\ClassLib\LTDIC.H:} DICOMUID, *pDICOMUID;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomUID
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID Insert    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID Delete    (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID GetFirst  ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID GetLast   ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID GetPrev   (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID GetNext   (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    Exists    (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID Find      (L_CHAR *pszCode);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMUID FindIndex (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    SetName   (pDICOMUID pUID, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:   static LDicomTreeEx m_InfoUID;
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultUID   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomInsertUID    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomDeleteUID    (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetUID     ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetFirstUID  ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetLastUID   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetPrevUID   (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetNextUID   (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountUID  ();
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsUID    (pDICOMUID pUID);
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindUID      (L_CHAR *pszCode);
H\LeadTools\ClassLib\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindIndexUID (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameUID   (pDICOMUID pUID, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMTAG DICOMTAG, *pDICOMTAG;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMTAG
H\LeadTools\ClassLib\LTDIC.H:} DICOMTAG, *pDICOMTAG;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomTag
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG Insert    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG Delete    (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG GetFirst  ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG GetLast   ();
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG GetPrev   (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG GetNext   (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    Exists    (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG Find      (L_UINT32 nCode);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMTAG FindIndex (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    SetName   (pDICOMTAG pTag, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:   static LDicomTreeEx m_InfoTag;
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultTag   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomInsertTag    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomDeleteTag    (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetTag     ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetFirstTag  ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetLastTag   ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetPrevTag   (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetNextTag   (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountTag  ();
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsTag    (pDICOMTAG pTag);
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindTag      (L_UINT32 nCode);
H\LeadTools\ClassLib\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindIndexTag (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameTag   (pDICOMTAG pTag, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:#define TAG_NUCLEAR_MEDICINE_SERIES_TYPE_RETIRED                   0x00080042UL
H\LeadTools\ClassLib\LTDIC.H:#define TAG_MEDICAL_RECORD_LOCATOR                                 0x00101090UL
H\LeadTools\ClassLib\LTDIC.H:#define TAG_MEDICAL_ALERTS                                         0x00102000UL
H\LeadTools\ClassLib\LTDIC.H:#define TAG_POSITION_REFERENCE_INDICATOR                           0x00201040UL
H\LeadTools\ClassLib\LTDIC.H:#define TAG_PRE_MEDICATION                                         0x00400012UL
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMIOD DICOMIOD, *pDICOMIOD;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMIOD
H\LeadTools\ClassLib\LTDIC.H:} DICOMIOD, *pDICOMIOD;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomIOD
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD Insert          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD Delete          (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetRoot         (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetParent       (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetChild        (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetFirst        (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetLast         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetPrev         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD GetNext         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    Exists          (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD Find            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD FindClass       (L_UINT32 nClass);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD FindModule      (L_UINT32 nClass, L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD FindIndexModule (L_UINT32 nClass, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    SetName         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:   static L_BOOL    SetDescription  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LeadTools\ClassLib\LTDIC.H:   static LDicomTreeEx m_InfoIOD;
H\LeadTools\ClassLib\LTDIC.H:   static L_VOID    Default         (pDICOMIOD pIOD, L_VOID *pReference);
H\LeadTools\ClassLib\LTDIC.H:   static pDICOMIOD FindInClass     (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultIOD         ();
H\LeadTools\ClassLib\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomSetMemoryAllocation(L_UINT16 nType);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomInsertIOD          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomDeleteIOD          (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetIOD           ();
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetRootIOD         (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetParentIOD       (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetChildIOD        (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetFirstIOD        (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetLastIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetPrevIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetNextIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsIOD          (pDICOMIOD pIOD);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountModuleIOD  (L_UINT32 nClass);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIOD            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindClassIOD       (L_UINT32 nClass);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindModuleIOD      (L_UINT32 nClass, L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIndexModuleIOD (L_UINT32 nClass, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameIOD         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetDescriptionIOD  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LeadTools\ClassLib\LTDIC.H:   MODULE_PATIENT_MEDICAL,
H\LeadTools\ClassLib\LTDIC.H:#define DS_PREFIX                      "DICM"
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMELEMENT DICOMELEMENT, *pDICOMELEMENT;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMELEMENT
H\LeadTools\ClassLib\LTDIC.H:} DICOMELEMENT, *pDICOMELEMENT;
H\LeadTools\ClassLib\LTDIC.H://typedef struct _DICOMMODULE DICOMMODULE, *pDICOMMODULE;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMMODULE
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT pElement[1000];  // Pointers to elements
H\LeadTools\ClassLib\LTDIC.H:} DICOMMODULE, *pDICOMMODULE;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMIMAGE
H\LeadTools\ClassLib\LTDIC.H:} DICOMIMAGE, *pDICOMIMAGE;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMNETDEBUGINFOONSEND
H\LeadTools\ClassLib\LTDIC.H:}DICOMNETDEBUGINFOONSEND, *pDICOMNETDEBUGINFOONSEND;
H\LeadTools\ClassLib\LTDIC.H:typedef L_BOOL (pEXT_CALLBACK CONFORMANCECALLBACK) (pDICOMELEMENT pElement, L_UINT16 nFlags, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID *HDICOMDS;
H\LeadTools\ClassLib\LTDIC.H:typedef enum tagDICOM_TRANSFER_SYNTAXES
H\LeadTools\ClassLib\LTDIC.H:DICOM_TRANSFER_SYNTAXES, *pDICOM_TRANSFER_SYNTAXES;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomNet;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomDS
H\LeadTools\ClassLib\LTDIC.H:   LDicomDS(L_CHAR *pszPath=NULL);
H\LeadTools\ClassLib\LTDIC.H:   ~LDicomDS();
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        CopyDS            (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   InsertElement     (pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMMODULE    InsertModule      (L_UINT32 nModule, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   InsertKey         (pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   DeleteElement     (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID          DeleteKey         (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetRootElement    (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetParentElement  (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetChildElement   (pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetFirstElement   (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetLastElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetPrevElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetNextElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32        GetLevelElement   (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          ExistsElement     (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          IsVolatileElement (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetRootKey        (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetParentKey      (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetChildKey       (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetFirstKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetLastKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetPrevKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   GetNextKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   L_CHAR         *GetValueKey       (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindFirstElement  (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindLastElement   (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindPrevElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindNextElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMMODULE    FindModule        (L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMMODULE    FindIndexModule   (L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindFirstKey      (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindLastKey       (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindPrevKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindNextKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32        GetCountValue     (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID          FreeValue         (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          GetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_CHAR         *GetCharValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_INT16        *GetShortValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_INT32        *GetLongValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_FLOAT        *GetFloatValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_DOUBLE       *GetDoubleValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_CHAR         *GetStringValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   pVALUEAGE       GetAgeValue       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   pVALUEDATE      GetDateValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_INT           GetDateRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATERANGE pValue);
H\LeadTools\ClassLib\LTDIC.H:   L_INT16         GetTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUETIMERANGE pValue);
H\LeadTools\ClassLib\LTDIC.H:   L_INT16         GetDateTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATETIMERANGE pValue);
H\LeadTools\ClassLib\LTDIC.H:   pVALUETIME      GetTimeValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   pVALUEDATETIME  GetDateTimeValue  (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32        GetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32        GetCountImage     (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        GetInfoImage      (pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        GetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        GetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetCharValue      (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetShortValue     (pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetLongValue      (pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetFloatValue     (pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetDoubleValue    (pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetStringValue    (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetAgeValue       (pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetDateValue      (pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetTimeValue      (pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetDateTimeValue  (pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetDateRangeValue      (pDICOMELEMENT pElement, pVALUEDATERANGE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetTimeRangeValue      (pDICOMELEMENT pElement, pVALUETIMERANGE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetDateTimeRangeValue  (pDICOMELEMENT pElement, pVALUEDATETIMERANGE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL          SetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        InsertImage       (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        InsertImageList   (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        SetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        SetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        DeleteImage       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        AnnCount         (L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        LoadDS            (LDicomFile *pFile, L_UINT16 nFlags, L_BOOL bVerify);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16        SaveDS            (LDicomFile *pFile, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32        FindGetValue      (pDICOMELEMENT pElement, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nIndex, L_UINT32 nCount, L_INT16 nType);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT   FindSetValue      (pDICOMELEMENT Element, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nCount, L_INT16 nType);
H\LeadTools\ClassLib\LTDIC.H:   friend L_BOOL EXT_FUNCTION L_DicomInsertUncompressedFrame(LDicomDS *pDS , pDICOMELEMENT pPixelDataElement, L_VOID *pFrameBuffer, L_UINT32 nLength,L_UINT32 nFrameIndex);
H\LeadTools\ClassLib\LTDIC.H:   LDicomTree           m_Tree;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile          *m_pInput;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile           m_MyInput;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile           m_MyScratch;
H\LeadTools\ClassLib\LTDIC.H:   DICOMMODULE          m_Module;
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      CopyTreeDS             (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      GetDefaultVR           (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bParent);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        VerifyVR               (pDICOMELEMENT pElement, L_UINT16 nType);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        VerifyTypeValue        (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 *pnCount, L_UINT16 nType);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        GetTypeValue           (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        SetTypeValue           (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount, L_UINT32 uFlags=0);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        GetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        SetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        InsertFileBinaryValue  (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        DeleteFileBinaryValue  (pDICOMELEMENT pElement, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      GetFileBinaryIndex     (pDICOMELEMENT pElement, L_UINT32 *nOffset);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        CopyFileBinaryValue    (pDICOMELEMENT pElement, L_UINT32 nOffset1, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian1, LDicomFile *pFile2, L_UINT32 nOffset2, L_BOOL bLittleEndian2);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      GetLengthSequence      (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      GetLengthGroup         (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      GetOffsetElement       (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      ReadSequence           (LDicomFile *pInput, pDICOMELEMENT hParent, L_UINT16 nFlags, L_UINT32 *pnLength);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      WriteSequence          (LDicomFile *pOutput, pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      ReadElement            (LDicomFile *pInput, L_UINT32 *pnTag, L_UINT16 *pnVR, L_UINT32 *pnLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      WriteElement           (LDicomFile *pOutput, L_UINT32 nTag, L_UINT16 nVR, L_UINT32 nLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        Read                   (LDicomFile *pInput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        Write                  (LDicomFile *pOutput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        InsertModule           (pDICOMELEMENT pParent, L_UINT32 nModule, L_UINT32 nIndex, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID        InsertModule           (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMIOD     VerifyModule           (pDICOMELEMENT pParent, L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      GetCountElementIOD     (pDICOMIOD pIOD, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT GetItemKey             (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT FindAttachKey          (pDICOMELEMENT pElement, L_UINT32 nTag);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID        InsertModuleKey        (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      GetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, L_UINT32 nIndex, L_BOOL bPalette);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      SetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, pBITMAPHANDLE pBitmap, L_INT32 nPhotometric, L_BOOL bSave);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      LoadImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      SaveImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      DeleteImage            (pDICOMELEMENT pElement, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      RefreshImage           (pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        CreatePrivateCreatorElement(pDICOMELEMENT pElement, L_UINT32 uTag);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL        IsAnnPrivateCreatorElement(pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT FindAnnPrivateCreatorElement(L_CHAR *pszPrivateString);
H\LeadTools\ClassLib\LTDIC.H:   L_INT         GetXRangeValue(pDICOMELEMENT pElement, L_UINT32 nIndex, L_VOID * pValue, L_UINT16 nType, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      ChangeTransferSyntax(DICOM_TRANSFER_SYNTAXES NewTransferSyntax,L_INT32 nQFactor,L_BOOL bKeepPixelDataIntact,L_UINT32 uFlags);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      GetFrameBinaryData(pDICOMELEMENT pPixelDataElement,L_INT nFrameIndex,L_UCHAR *pFrameDataBuffer,L_UINT *puFrameDataSize);
H\LeadTools\ClassLib\LTDIC.H:HDICOMDS        EXT_FUNCTION L_DicomCreateDS          (L_CHAR *pszPath);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeDS            (HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitDS            (HDICOMDS hDS, L_UINT32 nClass, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoDS         (HDICOMDS hDS, L_UINT32 *pnClass, L_UINT16 *pnFlags);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitCS            (HDICOMDS hDS, L_UINT16 nCommand, L_BOOL bRequest);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoCS         (HDICOMDS hDS, L_UINT16 *pnCommand, L_BOOL *pbRequest);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomLoadDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSaveDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomCopyDS            (HDICOMDS hDstDS, pDICOMELEMENT pDstParent, HDICOMDS hSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertElement     (HDICOMDS hDS, pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomInsertModule      (HDICOMDS hDS, L_UINT32 nModule, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertKey         (HDICOMDS hDS, pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomDeleteElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteModule      (HDICOMDS hDS, L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteKey         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomResetDS           (HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootElement    (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentElement  (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetLevelElement   (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountModule    (HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomExistsElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomIsVolatileElement (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomConformanceDS     (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetDebugDS        (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootKey        (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentKey      (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetValueKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstElement  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindModule        (HDICOMDS hDS, L_UINT32 nModule);
H\LeadTools\ClassLib\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindIndexModule   (HDICOMDS hDS, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstKey      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountValue     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeValue         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_INT16        *EXT_FUNCTION L_DicomGetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_INT32        *EXT_FUNCTION L_DicomGetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_FLOAT        *EXT_FUNCTION L_DicomGetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_DOUBLE       *EXT_FUNCTION L_DicomGetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:pVALUEAGE       EXT_FUNCTION L_DicomGetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:pVALUEDATE      EXT_FUNCTION L_DicomGetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:pVALUETIME      EXT_FUNCTION L_DicomGetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:pVALUEDATETIME  EXT_FUNCTION L_DicomGetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountImage     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetInfoImage      (HDICOMDS hDS, pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetKeepPixelDataIntactFlag(HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetDefaultJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImage       (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImageList   (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomDeleteImage       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomChangeTransferSyntax(HDICOMDS hDS, L_CHAR *pszUID,L_INT32 nQFactor/*For lossy*/,L_UINT32 uFlags);
H\LeadTools\ClassLib\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetKeepPixelDataIntactFlag(HDICOMDS hDS, L_BOOL bSet);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetJ2KOptions( HDICOMDS hDS,const pFILEJ2KOPTIONS pOptions);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnSave           (HDICOMDS hDS,
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnLoad           (HDICOMDS hDS,
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnCount         (HDICOMDS hDS, L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnDelete        (HDICOMDS hDS, L_INT nIndex, L_INT nPage ); //nIndex: Pass -1 to delete the LEAD Private tag and all files
H\LeadTools\ClassLib\LTDIC.H:typedef struct tagDICOMDIROPTIONS
H\LeadTools\ClassLib\LTDIC.H:} DICOMDIROPTIONS, * pDICOMDIROPTIONS;
H\LeadTools\ClassLib\LTDIC.H:#define DICOMDIR_REJECT_INVALID_FILEID          0x01
H\LeadTools\ClassLib\LTDIC.H:#define DICOMDIR_INSERT_ICON_IMAGE_SEQUENCE     0x02
H\LeadTools\ClassLib\LTDIC.H:#define DICOMDIR_INSERTDICOMFILE_PREADD   300
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomDir : public LDicomDS
H\LeadTools\ClassLib\LTDIC.H:   LDicomDir(L_CHAR* pszDICOMDIRDstFolder = NULL, L_CHAR* pszPath = NULL);
H\LeadTools\ClassLib\LTDIC.H:   virtual ~LDicomDir();
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 SaveDicomDir(L_UINT16 uFlags = 0);   
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 ResetDicomDir(const L_CHAR* pszDICOMDIRDstFolder);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 InsertDicomFile(L_CHAR* pszFileName);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 InsertDicomDS(LDicomDS& DataSet, L_CHAR* pszFileName);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 SetOptions(const pDICOMDIROPTIONS pOptions);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16 GetOptions(pDICOMDIROPTIONS pOptions, L_INT nSize) const;
H\LeadTools\ClassLib\LTDIC.H:   virtual L_UINT16 OnInsertDicomFile(const L_CHAR* pszFileName,
H\LeadTools\ClassLib\LTDIC.H:                                      LDicomDS* pDataSet,
H\LeadTools\ClassLib\LTDIC.H:   L_CHAR*         m_pszDICOMDIRDstFolder;
H\LeadTools\ClassLib\LTDIC.H:   DICOMDIROPTIONS m_Options;
H\LeadTools\ClassLib\LTDIC.H:   pDICOMELEMENT FindDirectoryRecord(pDICOMELEMENT pReferencingDR, L_INT nDRType,
H\LeadTools\ClassLib\LTDIC.H:   L_VOID        SetSelectionKey(pDICOMELEMENT pDR, LDicomDS& DataSet, L_UINT32 uTag,
H\LeadTools\ClassLib\LTDIC.H:   L_VOID        DeleteDRElement(pDICOMELEMENT pDR, L_UINT32 uTag);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT16      InsertIconImageSequence(pDICOMELEMENT pImageKey, LDicomDS& SourceDataSet);
H\LeadTools\ClassLib\LTDIC.H:#define PDU_REJECT_SOURCE_USER              1  // DICOM UL service-user
H\LeadTools\ClassLib\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER1         2  // DICOM UL service-provider (ASCE related function)
H\LeadTools\ClassLib\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER2         3  // DICOM UL service-provider (Presentation related function)
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomAssociate
H\LeadTools\ClassLib\LTDIC.H:   LDicomAssociate(L_BOOL bRequest);
H\LeadTools\ClassLib\LTDIC.H:   ~LDicomAssociate();
H\LeadTools\ClassLib\LTDIC.H:   friend class LDicomNet;
H\LeadTools\ClassLib\LTDIC.H:   LDicomTree m_Presentation;
H\LeadTools\ClassLib\LTDIC.H:   LDicomTree m_RoleSelect;
H\LeadTools\ClassLib\LTDIC.H:   LDicomTree m_UserInfo;
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID *HDICOMPDU;
H\LeadTools\ClassLib\LTDIC.H:HDICOMPDU EXT_FUNCTION L_DicomCreateAssociate        (L_BOOL bRequest);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomFreeAssociate          (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetAssociate         (HDICOMPDU hPDU, L_BOOL bRequest);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultAssociate       (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRequest              (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomSetRequest             (HDICOMPDU hPDU, L_BOOL bRequest);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetVersion             (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetVersion             (HDICOMPDU hPDU, L_UINT16 nVersion);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalled              (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalled              (HDICOMPDU hPDU, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalling             (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalling             (HDICOMPDU hPDU, L_CHAR *pszName);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetApplication         (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetApplication         (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetPresentationCount   (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetPresentation        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetPresentation        (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddPresentation        (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult, L_CHAR *pszAbstract);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelPresentation        (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetResult              (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetResult              (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetAbstract            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAbstract            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomFindAbstract           (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetTransferCount       (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRoleSelect           (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetUserRole            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetProviderRole        (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetRoleSelect          (HDICOMPDU hPDU, L_UCHAR nID, L_BOOL bEnabled, L_UCHAR nUser, L_UCHAR nProvider);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetLengthExtended      (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR  *EXT_FUNCTION L_DicomGetExtended            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetExtended            (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR *pData, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsMaxLength            (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetMaxLength           (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetMaxLength           (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT32 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementClass       (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementClass      (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementClass      (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszUID);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsAsyncOperations      (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetInvokedOperations   (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetPerformedOperations (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAsyncOperations     (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT16 nInvoked, L_UINT16 nPerformed);
H\LeadTools\ClassLib\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementVersion     (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementVersion    (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementVersion    (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszVersion);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetUserInfoCount       (HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetTypeUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetLengthUserInfo      (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetDataUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetUserInfo            (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddUserInfo            (HDICOMPDU hPDU, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LeadTools\ClassLib\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelUserInfo            (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID *HDICOMNET;
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CONNECTCALLBACK)                 (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK ACCEPTCALLBACK)                  (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CLOSECALLBACK)                   (HDICOMNET hNet, L_INT nError, HDICOMNET hPeer, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECALLBACK)                 (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDCALLBACK)                    (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDEXTCALLBACK)                 (HDICOMNET hNet, pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREQUESTCALLBACK) (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEACCEPTCALLBACK)  (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREJECTCALLBACK)  (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEDATACALLBACK)             (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASEREQUESTCALLBACK)   (HDICOMNET hNet, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASERESPONSECALLBACK)  (HDICOMNET hNet, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEABORTCALLBACK)            (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTOREREQUESTCALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTORERESPONSECALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDRESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVEREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVERESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECCANCELREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHOREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHORESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT32 nCount, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEUNKNOWNCALLBACK)          (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK GETCHALLENGECALLBACK)          (HDICOMNET hNet, L_UINT64 *nChallenge, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK INTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 *nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK EXTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONSECURELINKREADY)             (HDICOMNET hNet, L_UINT32 nError, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURESENDISCL)           (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nLength, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURERECEIVEDISCL)       (HDICOMNET hNet, L_INT nError, L_CHAR *nType, L_UINT32 nLength, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK RECEIVEDISCLPACKET)            (HDICOMNET hNet, L_INT nError, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\ClassLib\LTDIC.H:typedef struct _DICOMNETCALLBACK
H\LeadTools\ClassLib\LTDIC.H:} DICOMNETCALLBACK, *pDICOMNETCALLBACK;
H\LeadTools\ClassLib\LTDIC.H:typedef struct _LDICOMNETPRIVATEDATA
H\LeadTools\ClassLib\LTDIC.H:   DICOMNETDEBUGINFOONSEND m_DebugInfoOnSend;
H\LeadTools\ClassLib\LTDIC.H:}LDICOMNETPRIVATEDATA , * pLDICOMNETPRIVATEDATA;
H\LeadTools\ClassLib\LTDIC.H:class DICOM_EXPORT LDicomNet
H\LeadTools\ClassLib\LTDIC.H:   LDicomNet(L_CHAR *pszPath, L_INT32 nMode);
H\LeadTools\ClassLib\LTDIC.H:      // Values for nMode: DICOM_SECURE_ISCL, DICOM_SECURE_TLS, DICOM_SECURE_NONE
H\LeadTools\ClassLib\LTDIC.H:      // if a bad value is supplied, security will be DICOM_SECURE_NONE
H\LeadTools\ClassLib\LTDIC.H:   virtual ~LDicomNet();
H\LeadTools\ClassLib\LTDIC.H:   L_INT            Accept                     (LDicomNet *pNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendAssociateRequest       (LDicomAssociate *pPDU);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendAssociateAccept        (LDicomAssociate *pPDU);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendData                   (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCStoreRequest          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCFindRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCFindResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCGetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCMoveRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendCMoveResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNReportRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNReportResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNSetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNSetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNActionRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNActionResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNCreateRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT            SendNCreateResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   LDicomNet       *GetServer                  ();
H\LeadTools\ClassLib\LTDIC.H:   LDicomNet       *GetClient                  (L_UINT nIndex);
H\LeadTools\ClassLib\LTDIC.H:   LDicomAssociate *GetAssociate               ();
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnClose                    (L_INT nError, LDicomNet *pNet);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveAssociateRequest  (LDicomAssociate *pPDU);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveAssociateAccept   (LDicomAssociate *pPDU);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveData              (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCStoreRequest     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCFindRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCFindResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCGetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCMoveRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveCMoveResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNReportRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNReportResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNSetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNSetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNActionRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNActionResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNCreateRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveNCreateResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnReceiveUnknown           (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID           SetCallback                (pDICOMNETCALLBACK pCallback);
H\LeadTools\ClassLib\LTDIC.H:   virtual L_VOID   OnSendExt(pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend);
H\LeadTools\ClassLib\LTDIC.H:   pLDICOMNETPRIVATEDATA   m_pPrivateData;
H\LeadTools\ClassLib\LTDIC.H:   LDicomAssociate         m_AssociateRQ;
H\LeadTools\ClassLib\LTDIC.H:   LDicomAssociate         m_AssociateAC;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile              m_SendFile;
H\LeadTools\ClassLib\LTDIC.H:   LDicomDS                m_SendCS;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile              m_ReceiveFileCS;
H\LeadTools\ClassLib\LTDIC.H:   LDicomFile              m_ReceiveFileDS;
H\LeadTools\ClassLib\LTDIC.H:   LDicomDS                m_ReceiveCS;
H\LeadTools\ClassLib\LTDIC.H:   LDicomDS                m_ReceiveDS;
H\LeadTools\ClassLib\LTDIC.H:   DICOMNETCALLBACK        m_Callback;
H\LeadTools\ClassLib\LTDIC.H:   L_VOID   ReceiveData (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT    SendData    (L_BOOL bCommand, L_UCHAR nPresentationID, LDicomDS *pDS);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 m_SecurityStandard;     // choose between DICOM_ISCL, DICOM_TLS and DICOM_NO_SECURITY
H\LeadTools\ClassLib\LTDIC.H:         // returns DICOM_SUCCES if OK, not 0 if nLengthLut too small
H\LeadTools\ClassLib\LTDIC.H:         // returns DICOM_SUCCESS if data decrypted and padding removed. Update nLengthOut to correct length of decrypted message
H\LeadTools\ClassLib\LTDIC.H:                                        L_UINT32 indicator,
H\LeadTools\ClassLib\LTDIC.H:   static LDicomNet *m_pNetTLS[512];
H\LeadTools\ClassLib\LTDIC.H:   L_VOID SetHandshakeDebug(L_BOOL isDebug, L_VOID (*myfn)(LDicomNet *pDic, const char *TLS_STATUS, int ret));
H\LeadTools\ClassLib\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomCreateNet                  (L_CHAR *pszPath, L_INT32 nMode);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxCommBlockLengthISCL(HDICOMNET hNet, L_UINT32 nCommBlockLength);   // maximum communication block size, there are performance
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetCommBlockLengthISCL(HDICOMNET hNet);     // return the comm block size negociated
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxMessageLengthISCL(HDICOMNET hNet, L_UINT32 nMsgLength);     // the maximum message length that can be processed - 1MB, 2MB and so on
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthAlgISCL(HDICOMNET hNet, L_UINT32 mutualAuthMode);       // only 4way 3pass
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultEncryptionISCL(HDICOMNET hNet, L_UINT32 EncryptionMode);   // bulk data encryption algorithm
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultSigningISCL(HDICOMNET hNet, L_UINT32 SignMode);            // message authentication algorithm
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerEncryptionISCL(HDICOMNET hNet);   // can be checked to see what algorithm of communication the sender tries to use
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerMACISCL(HDICOMNET hNet);      // ATTN: if the crypt/MAC algorithm differs, the message is dropped and the GetPeerEncryption()/GetPeerMAC() will tell me
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetErrorSecure(HDICOMNET hNet);       // returns the m_nISCLError in ISCL case, or m_nTLSError in case of TLS
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 nLength);    // nLength = 1...128
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 *nLength);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerRequestedMessageLengthISCL(HDICOMNET hNet);      // used if local end refuse to receive
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 nKey);      // key used during mutual authentication
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForMutualAuthISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetEncryptKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 key);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForEncryptISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForEncryptISCL(HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForMutualAuthISCL(HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetStatusISCL(HDICOMNET hNet);                          // return the internal status of the object.
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL   EXT_FUNCTION L_DicomIsISCLQueueEmpty(HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT    EXT_FUNCTION L_DicomCloseForced(HDICOMNET hNet, L_BOOL bForced);
H\LeadTools\ClassLib\LTDIC.H:   L_INT32  EXT_FUNCTION L_DicomSendNonSecureISCL(HDICOMNET hNet, L_CHAR *pBuffer, L_UINT32 nBytes);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetSecureMode(HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCipherFromIndexTLS(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetCipherToIndexTLS(HDICOMNET hNet, L_UINT32 nIndex, L_CIPHERSUITE cipher);
H\LeadTools\ClassLib\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCiphersuiteTLS(HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptionAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetAuthenticationAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetIntegrityAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetKeyExchangeAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetMutualAuthKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetClientCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetServerCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomFreeNet                    (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomStartUp                    ();
H\LeadTools\ClassLib\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomShutDown                   ();
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomConnect                    (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_CHAR *pszPeerAddress, L_UINT nPeerPort);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomListen                     (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_INT nNbPeers);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomAccept                     (HDICOMNET hNet, HDICOMNET hPeer);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomClose                      (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateRequest       (HDICOMNET hNet, HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateAccept        (HDICOMNET hNet, HDICOMPDU hPDU);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateReject        (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendData                   (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseRequest         (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseResponse        (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAbort                  (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreRequest          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreResponse         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCCancelRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT16 nCount);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsActivated                (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsConnected                (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsAssociated               (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetQueueSend               (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetServer                  (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetClientCount             (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetClient                  (HDICOMNET hNet, L_UINT nIndex);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetHostInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LeadTools\ClassLib\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetPeerInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LeadTools\ClassLib\LTDIC.H:   HDICOMPDU EXT_FUNCTION L_DicomGetAssociate               (HDICOMNET hNet);
H\LeadTools\ClassLib\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomSetCallback                (HDICOMNET hNet, pDICOMNETCALLBACK pCallback);
H\LeadTools\ClassLib\LTDIC.H:#endif  // LTDIC_H_INCLUDED
H\LeadTools\ClassLib\ltWrappr.h:class LBitmapDictionary;
H\LeadTools\ClassLib\ltWrappr.h:class LDictionary;
H\LeadTools\ClassLib\ltWrappr.h:#include "ltcDictn.h"
H\LeadTools\ClassLib\ltWrappr.h:   LSettings::UnlockSupport(L_SUPPORT_MEDICAL, L_KEY_MEDICAL); \
H\LeadTools\ClassLib\ltWrappr.h:   LSettings::UnlockSupport(L_SUPPORT_MEDICAL_NET, L_KEY_MEDICAL_NET); \
H\LeadTools\ClassLib\ltWrappr.h:   LSettings::UnlockSupport(L_SUPPORT_DICOM, L_KEY_DICOM); \
H\LeadTools\ClassLib\ltWrappr.h:   LSettings::UnlockSupport(L_SUPPORT_MEDICAL_SECURITY, L_KEY_MEDICAL_SECURITY); \
H\LeadTools\DLGSTRIX.H:      /* dicom */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_COLOR,   /* DICOM Color            */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_DICOM8,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_DICOM16,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_DICOM24,
H\LeadTools\DLGSTRIX.H:      /* DICOM file subtypes (8-bit)       */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM8_GRAY,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM8_COLOR,
H\LeadTools\DLGSTRIX.H:      /* DICOM file subtypes (Other-bit)   */
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_RLE_GRAY,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_RLE_COLOR,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_JPEG_GRAY,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_JPEG_COLOR,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_EXT_DICOM,
H\LeadTools\DLGSTRIX.H:      DLG_STRING_J2KPREDICTABLETERMINATION,
H\LeadTools\Ldkrn.h:/* Dialog String Indices */
H\LeadTools\Ldkrn.h:   DOCEDIT_DLGSTR_ERROR_MEDICAL_NOT_ENABLED,
H\LeadTools\Ltann.h:L_INT EXT_FUNCTION L_AnnShowLockedIcon (HANNOBJECT hObject,
H\LeadTools\ltclr.h:                       /* which will indicate what is the arrangement of the YUV      */
H\LeadTools\LTDIC.H://  LTDic : Header file.
H\LeadTools\LTDIC.H:#ifndef LTDIC_H_INCLUDED
H\LeadTools\LTDIC.H:#define LTDIC_H_INCLUDED
H\LeadTools\LTDIC.H:   #ifdef _LEAD_DICOM_NO_EXP_IMP
H\LeadTools\LTDIC.H:      #define  DICOM_EXPORT      
H\LeadTools\LTDIC.H:   #ifdef _LEAD_DICOM_
H\LeadTools\LTDIC.H:         #define  DICOM_EXPORT 
H\LeadTools\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllexport)
H\LeadTools\LTDIC.H:         #define  DICOM_EXPORT 
H\LeadTools\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllimport)
H\LeadTools\LTDIC.H:   #endif //_LEAD_DICOM_NO_EXP_IMP
H\LeadTools\LTDIC.H:#define DICOM_SUCCESS                            0
H\LeadTools\LTDIC.H:#define DICOM_ERROR_LOCKED                       1
H\LeadTools\LTDIC.H:#define DICOM_ERROR_MEMORY                       2
H\LeadTools\LTDIC.H:#define DICOM_ERROR_OPEN                         3
H\LeadTools\LTDIC.H:#define DICOM_ERROR_READ                         4
H\LeadTools\LTDIC.H:#define DICOM_ERROR_WRITE                        5
H\LeadTools\LTDIC.H:#define DICOM_ERROR_SEEK                         6
H\LeadTools\LTDIC.H:#define DICOM_ERROR_END                          7
H\LeadTools\LTDIC.H:#define DICOM_ERROR_FORMAT                       8
H\LeadTools\LTDIC.H:#define DICOM_ERROR_PARAMETER                    9
H\LeadTools\LTDIC.H:#define DICOM_ERROR_IMAGE                       10
H\LeadTools\LTDIC.H:#define DICOM_ERROR_COMPRESSION                 11
H\LeadTools\LTDIC.H:#define DICOM_ERROR_PHOTOMETRIC                 12
H\LeadTools\LTDIC.H:#define DICOM_ERROR_CONVERSION                  13
H\LeadTools\LTDIC.H:#define DICOM_ERROR_RANGE                       14
H\LeadTools\LTDIC.H:#define DICOM_ERROR_BITSPERPIXEL                15
H\LeadTools\LTDIC.H:#define DICOM_ERROR_QFACTOR                     16
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ELEMENT_LENGTH_ODD          100
H\LeadTools\LTDIC.H:#define DICOM_ERROR_DICOMDIR_FOLDER             200
H\LeadTools\LTDIC.H:#define DICOM_ERROR_FILE                        201
H\LeadTools\LTDIC.H:#define DICOM_ERROR_FILEID                      202
H\LeadTools\LTDIC.H:#define DICOM_ERROR_J2K_LOCKED                  203
H\LeadTools\LTDIC.H:#define DICOM_ERROR_PDU_TYPE                    17
H\LeadTools\LTDIC.H:#define DICOM_ERROR_PDU_LENGTH                  18
H\LeadTools\LTDIC.H:#define DICOM_ERROR_PDU_ID                      19
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_FAILURE                 29
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_ACCESS                  30  // The address is a broadcast address
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_IN_USE          31  // The address is already in use
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_AVAILABLE   32  // The address is not available from the local computer
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_SUPPORTED   33  // The address family is not supported
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_ABORTED      34  // The virtual circuit was aborted
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_REFUSED      35  // The attempt to connect was forcefully rejected
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_RESET        36  // The virtual circuit was reset by the remote side
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_DESTINATION_REQUIRED    37  // A destination address is required
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_ARGUMENT_INCORRECT      38  // The namelen argument is incorrect
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_IN_PROGRESS             39  // A blocking operation is in progress
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_BLOCKING_CANCELED       40  // The blocking call was canceled
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_INVALID                 41  // The socket has not been bound with bind
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_IS_CONNECTED            42  // The socket is already connected
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NO_MORE_FILE            43  // No more file descriptors are available
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_MESSAGE_SIZE            44  // The datagram is larger than the maximum supported
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_DOWN                    45  // The network subsystem has failed
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_RESET                   46  // The connection must be reset
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_UN_REACH                47  // The network can't be reached from this host at this time
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NO_BUFFERS              48  // No buffer space is available
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NOT_CONNECTED           49  // The socket is not connected
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NOT_SOCKET              50  // The descriptor is not a socket
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_OPERATION_NOT_SUPPORTED 51  // The type does not support connection-oriented service
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_NOT_SUPPORTED  52  // The specified protocol is not supported
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_TYPE           53  // The specified protocol is the wrong type
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_SHUTDOWN                54  // The socket has been shut down
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_SOCKET_NOT_SUPPORTED    55  // The type is not supported in this address family
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_TIME_OUT                56  // Attempt to connect timed out without establishing a connection
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_WOULD_BLOCK             57  // The socket is marked as nonblocking and the requested operation would block
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_HOST_NOT_FOUND          58  // Authoritative Answer Host not found
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NO_DATA                 59  // Valid name, no data record of requested type
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NO_RECOVERY             60  // Nonrecoverable errors
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_NOT_INITIALISED         61  // The system was not initialized
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_SYSTEM_NOT_READY        62  // Not ready for network communication
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_TRY_AGAIN               63  // Non-Authoritative Host not found, or server faild
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_VERSION_NOT_SUPPORTED   64  // The version requested is not provided by this implementation
H\LeadTools\LTDIC.H:#define DICOM_ERROR_NET_SECURITY_BREACH         65  // There is an cryptographic error. 
H\LeadTools\LTDIC.H:      // Call LDicomNet::GetStatusISCL or LDicomNet::GetStatusTLS for the description of internal status
H\LeadTools\LTDIC.H:      // before error, and LDicomNet::GetErrorSecure for the description of the error
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS                         66  // TLS internal error
H\LeadTools\LTDIC.H:#define DICOM_ERROR_SECURITY_LOCKED             67  // DICOM Security Features are locked
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_DLL_NOT_LOADED          68  // TLS and/or CRY DLL not loaded
H\LeadTools\LTDIC.H:#define DICOM_ERROR_BAD_SECURE_MODE             69  // if I do ISCL operations on TLS objects
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ANN                         70
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ANN_LOCKED                  71  // Annotation support is locked
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ANN_MISSING                 72  // Annotation dll is missing
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TAG_ALREADY_EXISTS          73  // LEAD private creator element already exists
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ANN_NO_EXIST                74  // Requested annotation file or page does not exist
H\LeadTools\LTDIC.H:#define DICOM_SECURE_NONE  0xABCD0000
H\LeadTools\LTDIC.H:#define DICOM_SECURE_ISCL  0xABCD0001
H\LeadTools\LTDIC.H:#define DICOM_SECURE_TLS   0xABCD0002
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_OK                      0
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_CLOSE_NOTIFY            128
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_UNEXPECTED_MESSAGE      129
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_BAD_RECORD_MAC          130
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_FAILED          131
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_RECORD_OVERFLOW         132
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_DECOMPRESSION_FAILURE   133
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_HANDSHAKE_FAILURE       134
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_BAD_CERTIFICATE         135
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_UNSUPPORTED_CERTIFICATE 136
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_REVOKED     137
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_EXPIRED     138
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_UNKNOWN     139
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_ILLEGAL_PARAMETER       140
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_UNKNOWN_CA              141
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_ACCESS_DENIED           142
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_DECODE_ERROR            143
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_ERROR           144
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_EXPORT_RESTRICTION      145
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_PROTOCOL_VERSION        146
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_INSUFFICIENT_SECURITY   147
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_INTERNAL_ERROR          148
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_USER_CANCELED           149
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_NO_RENEGOTIATION        150
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_NO_KEEPALIVE            151
H\LeadTools\LTDIC.H:#define DICOM_ERROR_TLS_CLOSED_CONTROLLED       152
H\LeadTools\LTDIC.H:typedef enum _DICOM_TLS_ERRORS DICOM_TLS_ERRORS;
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAX_PACKET_SIZE        (8160)     // set with manual values
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAX_MESSAGE_SIZE       (1048576)   // set with manual values
H\LeadTools\LTDIC.H:#define DICOM_ISCL_ACK                    0x00000000
H\LeadTools\LTDIC.H:#define DICOM_ISCL_NAK                    0xFFFFFFFF
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_3P4W       0x00000000  // three pass four way mutual auth
H\LeadTools\LTDIC.H:#define DICOM_ISCL_ENCRYPT_NONE           0x00000000
H\LeadTools\LTDIC.H:#define DICOM_ISCL_ENCRYPT_DESCBC         0x00001212
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAC_NONE               0x00000000
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAC_MD5                0x00001441
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAC_DESMAC             0x00004001
H\LeadTools\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RQ     0x00110001  // RQ - request, RP - response
H\LeadTools\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RP     0x00110003
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RQ               0x00120001
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RP               0x00120003
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS1_NOTIF      0x00130002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS2_NOTIF      0x00140002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS3_NOTIF      0x00150002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_COMPLETION_NOTIF 0x00160002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RQ      0x00200001
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RP      0x00200003
H\LeadTools\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RQ     0x00210001
H\LeadTools\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RP     0x00210003
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_NOTIF   0x00200002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_MAC_TRANSMISSION_NOTIF       0x00230002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_THROUGH_MODE_TRANSMISSION_NOTIF 0x00260002
H\LeadTools\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RQ        0x00FF0001
H\LeadTools\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RP        0x00FF0003
H\LeadTools\LTDIC.H:enum DICOM_ISCLAuthKeyPair
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR1 = 0x00000001,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR2 = 0x00000002,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR3 = 0x00000003,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR4 = 0x00000004,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR5 = 0x00000005,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR6 = 0x00000006,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR7 = 0x00000007,
H\LeadTools\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR8 = 0x00000008
H\LeadTools\LTDIC.H:enum DICOM_ISCLCryptKeyPair
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR1 = 0x00000001,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR2 = 0x00000002,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR3 = 0x00000003,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR4 = 0x00000004,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR5 = 0x00000005,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR6 = 0x00000006,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR7 = 0x00000007,
H\LeadTools\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR8 = 0x00000008,
H\LeadTools\LTDIC.H:   DICOM_ISCL_UNIQUE_SESSION_KEYS = 0x00000010
H\LeadTools\LTDIC.H:struct DICOM_ISCLMessageHeader
H\LeadTools\LTDIC.H:   L_UINT32 Indicator;    // not used
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_OK                      0 // start of ISCL errors
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_OPTION             100 // option not expected or unknown
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_LENGTH             101 // the length of the message differ of the expected length
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_ICCARD           102 // local error on Id card
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_REMOTE_ICCARD          103 // error on Id card level at peer
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MSGID              104 // message id not expected or unknown
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_VERSION            105 // not MEDIS-ISCL V1.00
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MUTUAL_AUTH_METHOD 106 // mutual auth not 3pass 4way
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_COMMBLOCK_LENGTH   107 // if the comm block length is too big
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_RECEIVED_NAK           108 // when the peer sent option = NAK in general cases, there are some special cases
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_MSG_TRANSMISSION       109 // bad encryption method or MAC method
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_SMALL_LENGTH      110 // message length of the peer is too small
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_SMALL_LENGTH     111 // peer want to send a message bigger than local MaxMessageLength
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_DECRYPT                112 // error during decryption - decryption generate bad result
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MAC                113 // wrong message authentication code
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_RND_NO_FOR_SESSION_KEY_EXPECTED 114  // only when the receiver expect to receive a "Random number for session key" request
H\LeadTools\LTDIC.H:                                          // when appears, the sender must be set to "SetSecurity(DICOM_ISCL_UNIQUE_SESSION_KEYS)"
H\LeadTools\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_REFUSE_CLOSE      115 // when the peer does not accept the closing of connection
H\LeadTools\LTDIC.H:#define DICOM_FILE_OPEN       0x0000
H\LeadTools\LTDIC.H:#define DICOM_FILE_CREATE     0x0001
H\LeadTools\LTDIC.H:#define DICOM_FILE_READ       0x0002
H\LeadTools\LTDIC.H:#define DICOM_FILE_WRITE      0x0004
H\LeadTools\LTDIC.H:#define DICOM_FILE_TEMPORARY  0x0008
H\LeadTools\LTDIC.H:#define DICOM_FILE_MEMORY     0x0010
H\LeadTools\LTDIC.H:#define DICOM_FILE_REDIRECT   0x0020
H\LeadTools\LTDIC.H:#define DICOM_FILE_CLOSE      0x0040
H\LeadTools\LTDIC.H:#define DICOM_FILE_DELETE     0x0080
H\LeadTools\LTDIC.H:#define DICOM_FILE_BEGIN      0
H\LeadTools\LTDIC.H:#define DICOM_FILE_CURRENT    1
H\LeadTools\LTDIC.H:#define DICOM_FILE_END        2
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomFile
H\LeadTools\LTDIC.H:   LDicomFile();
H\LeadTools\LTDIC.H:   ~LDicomFile();
H\LeadTools\LTDIC.H:#define GENERICLINK  pDICOMLINK pParent;     \
H\LeadTools\LTDIC.H:                     pDICOMLINK pFirstChild; \
H\LeadTools\LTDIC.H:                     pDICOMLINK pLastChild;  \
H\LeadTools\LTDIC.H:                     pDICOMLINK pPrev;       \
H\LeadTools\LTDIC.H:                     pDICOMLINK pNext;       \
H\LeadTools\LTDIC.H:typedef struct _DICOMLINK *pDICOMLINK;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomTree
H\LeadTools\LTDIC.H:   LDicomTree();
H\LeadTools\LTDIC.H:   ~LDicomTree();
H\LeadTools\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetRoot   (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetParent (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetChild  (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetFirst  (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetLast   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetPrev   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMLINK  GetNext   (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\LTDIC.H:   L_UINT32    GetLevel  (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   L_UINT32    GetCount  (pDICOMLINK pLink, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMLINK  FindIndex (pDICOMLINK pLink, L_BOOL bTree, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_BOOL      Exists    (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   pDICOMLINK  Verify    ();
H\LeadTools\LTDIC.H:   pDICOMLINK m_pFirstChild;
H\LeadTools\LTDIC.H:   pDICOMLINK m_pLastChild;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomTreeEx : public LDicomTree
H\LeadTools\LTDIC.H:   LDicomTreeEx();
H\LeadTools\LTDIC.H:   ~LDicomTreeEx();
H\LeadTools\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LeadTools\LTDIC.H:   VR_FIXED = 0,           // DICOMVR.nLength bytes fixed
H\LeadTools\LTDIC.H:   VR_MAXIMUM,             // DICOMVR.nLength bytes maximum
H\LeadTools\LTDIC.H:   VR_MAXIMUM_GROUP,       // DICOMVR.nLength maximum per component group
H\LeadTools\LTDIC.H:   VR_ANY,                 // DICOMVR.nLength any length valid for any of the other DICOM Value Representations
H\LeadTools\LTDIC.H:   VR_NOT_APPLICABLE,      // DICOMVR.nLength not applicable
H\LeadTools\LTDIC.H://typedef struct _DICOMVR DICOMVR, *pDICOMVR;
H\LeadTools\LTDIC.H:typedef struct _DICOMVR
H\LeadTools\LTDIC.H:} DICOMVR, *pDICOMVR;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomVR
H\LeadTools\LTDIC.H:   static pDICOMVR Insert    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LeadTools\LTDIC.H:   static pDICOMVR Delete    (pDICOMVR pVR);
H\LeadTools\LTDIC.H:   static pDICOMVR GetFirst  ();
H\LeadTools\LTDIC.H:   static pDICOMVR GetLast   ();
H\LeadTools\LTDIC.H:   static pDICOMVR GetPrev   (pDICOMVR pVR);
H\LeadTools\LTDIC.H:   static pDICOMVR GetNext   (pDICOMVR pVR);
H\LeadTools\LTDIC.H:   static L_BOOL   Exists    (pDICOMVR pVR);
H\LeadTools\LTDIC.H:   static pDICOMVR Find      (L_UINT16 nCode);
H\LeadTools\LTDIC.H:   static pDICOMVR FindIndex (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   static L_BOOL   SetName   (pDICOMVR pVR, L_CHAR *pszName);
H\LeadTools\LTDIC.H:   static LDicomTreeEx m_InfoVR;
H\LeadTools\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomDefaultVR   ();
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomInsertVR    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomDeleteVR    (pDICOMVR pVR);
H\LeadTools\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomResetVR     ();
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetFirstVR  ();
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetLastVR   ();
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetPrevVR   (pDICOMVR pVR);
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetNextVR   (pDICOMVR pVR);
H\LeadTools\LTDIC.H:L_UINT32 EXT_FUNCTION L_DicomGetCountVR  ();
H\LeadTools\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomExistsVR    (pDICOMVR pVR);
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindVR      (L_UINT16 nCode);
H\LeadTools\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindIndexVR (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomSetNameVR   (pDICOMVR pVR, L_CHAR *pszName);
H\LeadTools\LTDIC.H://typedef struct _DICOMUID DICOMUID, *pDICOMUID;
H\LeadTools\LTDIC.H:typedef struct _DICOMUID
H\LeadTools\LTDIC.H:} DICOMUID, *pDICOMUID;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomUID
H\LeadTools\LTDIC.H:   static pDICOMUID Insert    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LeadTools\LTDIC.H:   static pDICOMUID Delete    (pDICOMUID pUID);
H\LeadTools\LTDIC.H:   static pDICOMUID GetFirst  ();
H\LeadTools\LTDIC.H:   static pDICOMUID GetLast   ();
H\LeadTools\LTDIC.H:   static pDICOMUID GetPrev   (pDICOMUID pUID);
H\LeadTools\LTDIC.H:   static pDICOMUID GetNext   (pDICOMUID pUID);
H\LeadTools\LTDIC.H:   static L_BOOL    Exists    (pDICOMUID pUID);
H\LeadTools\LTDIC.H:   static pDICOMUID Find      (L_CHAR *pszCode);
H\LeadTools\LTDIC.H:   static pDICOMUID FindIndex (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   static L_BOOL    SetName   (pDICOMUID pUID, L_CHAR *pszName);
H\LeadTools\LTDIC.H:   static LDicomTreeEx m_InfoUID;
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultUID   ();
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomInsertUID    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomDeleteUID    (pDICOMUID pUID);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetUID     ();
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetFirstUID  ();
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetLastUID   ();
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetPrevUID   (pDICOMUID pUID);
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetNextUID   (pDICOMUID pUID);
H\LeadTools\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountUID  ();
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsUID    (pDICOMUID pUID);
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindUID      (L_CHAR *pszCode);
H\LeadTools\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindIndexUID (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameUID   (pDICOMUID pUID, L_CHAR *pszName);
H\LeadTools\LTDIC.H://typedef struct _DICOMTAG DICOMTAG, *pDICOMTAG;
H\LeadTools\LTDIC.H:typedef struct _DICOMTAG
H\LeadTools\LTDIC.H:} DICOMTAG, *pDICOMTAG;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomTag
H\LeadTools\LTDIC.H:   static pDICOMTAG Insert    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LeadTools\LTDIC.H:   static pDICOMTAG Delete    (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:   static pDICOMTAG GetFirst  ();
H\LeadTools\LTDIC.H:   static pDICOMTAG GetLast   ();
H\LeadTools\LTDIC.H:   static pDICOMTAG GetPrev   (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:   static pDICOMTAG GetNext   (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:   static L_BOOL    Exists    (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:   static pDICOMTAG Find      (L_UINT32 nCode);
H\LeadTools\LTDIC.H:   static pDICOMTAG FindIndex (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   static L_BOOL    SetName   (pDICOMTAG pTag, L_CHAR *pszName);
H\LeadTools\LTDIC.H:   static LDicomTreeEx m_InfoTag;
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultTag   ();
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomInsertTag    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomDeleteTag    (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetTag     ();
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetFirstTag  ();
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetLastTag   ();
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetPrevTag   (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetNextTag   (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountTag  ();
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsTag    (pDICOMTAG pTag);
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindTag      (L_UINT32 nCode);
H\LeadTools\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindIndexTag (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameTag   (pDICOMTAG pTag, L_CHAR *pszName);
H\LeadTools\LTDIC.H:#define TAG_NUCLEAR_MEDICINE_SERIES_TYPE_RETIRED                   0x00080042UL
H\LeadTools\LTDIC.H:#define TAG_MEDICAL_RECORD_LOCATOR                                 0x00101090UL
H\LeadTools\LTDIC.H:#define TAG_MEDICAL_ALERTS                                         0x00102000UL
H\LeadTools\LTDIC.H:#define TAG_POSITION_REFERENCE_INDICATOR                           0x00201040UL
H\LeadTools\LTDIC.H:#define TAG_PRE_MEDICATION                                         0x00400012UL
H\LeadTools\LTDIC.H://typedef struct _DICOMIOD DICOMIOD, *pDICOMIOD;
H\LeadTools\LTDIC.H:typedef struct _DICOMIOD
H\LeadTools\LTDIC.H:} DICOMIOD, *pDICOMIOD;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomIOD
H\LeadTools\LTDIC.H:   static pDICOMIOD Insert          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LeadTools\LTDIC.H:   static pDICOMIOD Delete          (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetRoot         (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetParent       (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetChild        (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetFirst        (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetLast         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetPrev         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:   static pDICOMIOD GetNext         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:   static L_BOOL    Exists          (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:   static pDICOMIOD Find            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LeadTools\LTDIC.H:   static pDICOMIOD FindClass       (L_UINT32 nClass);
H\LeadTools\LTDIC.H:   static pDICOMIOD FindModule      (L_UINT32 nClass, L_UINT32 nModule);
H\LeadTools\LTDIC.H:   static pDICOMIOD FindIndexModule (L_UINT32 nClass, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   static L_BOOL    SetName         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LeadTools\LTDIC.H:   static L_BOOL    SetDescription  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LeadTools\LTDIC.H:   static LDicomTreeEx m_InfoIOD;
H\LeadTools\LTDIC.H:   static L_VOID    Default         (pDICOMIOD pIOD, L_VOID *pReference);
H\LeadTools\LTDIC.H:   static pDICOMIOD FindInClass     (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultIOD         ();
H\LeadTools\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomSetMemoryAllocation(L_UINT16 nType);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomInsertIOD          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomDeleteIOD          (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetIOD           ();
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetRootIOD         (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetParentIOD       (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetChildIOD        (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetFirstIOD        (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetLastIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetPrevIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetNextIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsIOD          (pDICOMIOD pIOD);
H\LeadTools\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountModuleIOD  (L_UINT32 nClass);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIOD            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindClassIOD       (L_UINT32 nClass);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindModuleIOD      (L_UINT32 nClass, L_UINT32 nModule);
H\LeadTools\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIndexModuleIOD (L_UINT32 nClass, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameIOD         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetDescriptionIOD  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LeadTools\LTDIC.H:   MODULE_PATIENT_MEDICAL,
H\LeadTools\LTDIC.H:#define DS_PREFIX                      "DICM"
H\LeadTools\LTDIC.H://typedef struct _DICOMELEMENT DICOMELEMENT, *pDICOMELEMENT;
H\LeadTools\LTDIC.H:typedef struct _DICOMELEMENT
H\LeadTools\LTDIC.H:} DICOMELEMENT, *pDICOMELEMENT;
H\LeadTools\LTDIC.H://typedef struct _DICOMMODULE DICOMMODULE, *pDICOMMODULE;
H\LeadTools\LTDIC.H:typedef struct _DICOMMODULE
H\LeadTools\LTDIC.H:   pDICOMELEMENT pElement[1000];  // Pointers to elements
H\LeadTools\LTDIC.H:} DICOMMODULE, *pDICOMMODULE;
H\LeadTools\LTDIC.H:typedef struct _DICOMIMAGE
H\LeadTools\LTDIC.H:} DICOMIMAGE, *pDICOMIMAGE;
H\LeadTools\LTDIC.H:typedef struct _DICOMNETDEBUGINFOONSEND
H\LeadTools\LTDIC.H:}DICOMNETDEBUGINFOONSEND, *pDICOMNETDEBUGINFOONSEND;
H\LeadTools\LTDIC.H:typedef L_BOOL (pEXT_CALLBACK CONFORMANCECALLBACK) (pDICOMELEMENT pElement, L_UINT16 nFlags, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID *HDICOMDS;
H\LeadTools\LTDIC.H:typedef enum tagDICOM_TRANSFER_SYNTAXES
H\LeadTools\LTDIC.H:DICOM_TRANSFER_SYNTAXES, *pDICOM_TRANSFER_SYNTAXES;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomNet;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomDS
H\LeadTools\LTDIC.H:   LDicomDS(L_CHAR *pszPath=NULL);
H\LeadTools\LTDIC.H:   ~LDicomDS();
H\LeadTools\LTDIC.H:   L_UINT16        CopyDS            (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   InsertElement     (pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   pDICOMMODULE    InsertModule      (L_UINT32 nModule, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   InsertKey         (pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   DeleteElement     (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_VOID          DeleteKey         (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetRootElement    (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetParentElement  (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetChildElement   (pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetFirstElement   (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetLastElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetPrevElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetNextElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:   L_UINT32        GetLevelElement   (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_BOOL          ExistsElement     (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_BOOL          IsVolatileElement (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetRootKey        (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetParentKey      (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetChildKey       (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetFirstKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetLastKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetPrevKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   GetNextKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   L_CHAR         *GetValueKey       (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindFirstElement  (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindLastElement   (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindPrevElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindNextElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMMODULE    FindModule        (L_UINT32 nModule);
H\LeadTools\LTDIC.H:   pDICOMMODULE    FindIndexModule   (L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindFirstKey      (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindLastKey       (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindPrevKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindNextKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:   L_UINT32        GetCountValue     (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_VOID          FreeValue         (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_BOOL          GetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_CHAR         *GetCharValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_INT16        *GetShortValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_INT32        *GetLongValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_FLOAT        *GetFloatValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_DOUBLE       *GetDoubleValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_CHAR         *GetStringValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   pVALUEAGE       GetAgeValue       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   pVALUEDATE      GetDateValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_INT           GetDateRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATERANGE pValue);
H\LeadTools\LTDIC.H:   L_INT16         GetTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUETIMERANGE pValue);
H\LeadTools\LTDIC.H:   L_INT16         GetDateTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATETIMERANGE pValue);
H\LeadTools\LTDIC.H:   pVALUETIME      GetTimeValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   pVALUEDATETIME  GetDateTimeValue  (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_UINT32        GetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText);
H\LeadTools\LTDIC.H:   L_UINT32        GetCountImage     (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_UINT16        GetInfoImage      (pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_UINT16        GetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:   L_UINT16        GetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LeadTools\LTDIC.H:   L_BOOL          SetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_BOOL          SetCharValue      (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetShortValue     (pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetLongValue      (pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetFloatValue     (pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetDoubleValue    (pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetStringValue    (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetAgeValue       (pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetDateValue      (pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetTimeValue      (pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetDateTimeValue  (pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetDateRangeValue      (pDICOMELEMENT pElement, pVALUEDATERANGE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetTimeRangeValue      (pDICOMELEMENT pElement, pVALUETIMERANGE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetDateTimeRangeValue  (pDICOMELEMENT pElement, pVALUEDATETIMERANGE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_BOOL          SetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_UINT16        InsertImage       (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:   L_UINT16        InsertImageList   (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\LTDIC.H:   L_UINT16        SetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:   L_UINT16        SetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\LTDIC.H:   L_UINT16        DeleteImage       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_UINT16        AnnCount         (L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LeadTools\LTDIC.H:   L_UINT16        LoadDS            (LDicomFile *pFile, L_UINT16 nFlags, L_BOOL bVerify);
H\LeadTools\LTDIC.H:   L_UINT16        SaveDS            (LDicomFile *pFile, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_UINT32        FindGetValue      (pDICOMELEMENT pElement, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nIndex, L_UINT32 nCount, L_INT16 nType);
H\LeadTools\LTDIC.H:   pDICOMELEMENT   FindSetValue      (pDICOMELEMENT Element, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nCount, L_INT16 nType);
H\LeadTools\LTDIC.H:   friend L_BOOL EXT_FUNCTION L_DicomInsertUncompressedFrame(LDicomDS *pDS , pDICOMELEMENT pPixelDataElement, L_VOID *pFrameBuffer, L_UINT32 nLength,L_UINT32 nFrameIndex);
H\LeadTools\LTDIC.H:   LDicomTree           m_Tree;
H\LeadTools\LTDIC.H:   LDicomFile          *m_pInput;
H\LeadTools\LTDIC.H:   LDicomFile           m_MyInput;
H\LeadTools\LTDIC.H:   LDicomFile           m_MyScratch;
H\LeadTools\LTDIC.H:   DICOMMODULE          m_Module;
H\LeadTools\LTDIC.H:   L_UINT16      CopyTreeDS             (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\LTDIC.H:   L_UINT16      GetDefaultVR           (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bParent);
H\LeadTools\LTDIC.H:   L_BOOL        VerifyVR               (pDICOMELEMENT pElement, L_UINT16 nType);
H\LeadTools\LTDIC.H:   L_BOOL        VerifyTypeValue        (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 *pnCount, L_UINT16 nType);
H\LeadTools\LTDIC.H:   L_BOOL        GetTypeValue           (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_BOOL        SetTypeValue           (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount, L_UINT32 uFlags=0);
H\LeadTools\LTDIC.H:   L_BOOL        GetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_BOOL        SetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_BOOL        InsertFileBinaryValue  (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_BOOL        DeleteFileBinaryValue  (pDICOMELEMENT pElement, L_UINT32 nOffset, L_UINT32 nLength);
H\LeadTools\LTDIC.H:   L_UINT32      GetFileBinaryIndex     (pDICOMELEMENT pElement, L_UINT32 *nOffset);
H\LeadTools\LTDIC.H:   L_BOOL        CopyFileBinaryValue    (pDICOMELEMENT pElement, L_UINT32 nOffset1, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian1, LDicomFile *pFile2, L_UINT32 nOffset2, L_BOOL bLittleEndian2);
H\LeadTools\LTDIC.H:   L_UINT32      GetLengthSequence      (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_UINT32      GetLengthGroup         (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_UINT32      GetOffsetElement       (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_UINT16      ReadSequence           (LDicomFile *pInput, pDICOMELEMENT hParent, L_UINT16 nFlags, L_UINT32 *pnLength);
H\LeadTools\LTDIC.H:   L_UINT16      WriteSequence          (LDicomFile *pOutput, pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:   L_UINT16      ReadElement            (LDicomFile *pInput, L_UINT32 *pnTag, L_UINT16 *pnVR, L_UINT32 *pnLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LeadTools\LTDIC.H:   L_UINT16      WriteElement           (LDicomFile *pOutput, L_UINT32 nTag, L_UINT16 nVR, L_UINT32 nLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LeadTools\LTDIC.H:   L_BOOL        Read                   (LDicomFile *pInput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LeadTools\LTDIC.H:   L_BOOL        Write                  (LDicomFile *pOutput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LeadTools\LTDIC.H:   L_BOOL        InsertModule           (pDICOMELEMENT pParent, L_UINT32 nModule, L_UINT32 nIndex, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   L_VOID        InsertModule           (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   pDICOMIOD     VerifyModule           (pDICOMELEMENT pParent, L_UINT32 nModule);
H\LeadTools\LTDIC.H:   L_UINT32      GetCountElementIOD     (pDICOMIOD pIOD, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   pDICOMELEMENT GetItemKey             (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT FindAttachKey          (pDICOMELEMENT pElement, L_UINT32 nTag);
H\LeadTools\LTDIC.H:   L_VOID        InsertModuleKey        (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LeadTools\LTDIC.H:   L_UINT16      GetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, L_UINT32 nIndex, L_BOOL bPalette);
H\LeadTools\LTDIC.H:   L_UINT16      SetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, pBITMAPHANDLE pBitmap, L_INT32 nPhotometric, L_BOOL bSave);
H\LeadTools\LTDIC.H:   L_UINT16      LoadImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:   L_UINT16      SaveImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:   L_UINT16      DeleteImage            (pDICOMELEMENT pElement, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_UINT16      RefreshImage           (pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   L_BOOL        CreatePrivateCreatorElement(pDICOMELEMENT pElement, L_UINT32 uTag);
H\LeadTools\LTDIC.H:   L_BOOL        IsAnnPrivateCreatorElement(pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:   pDICOMELEMENT FindAnnPrivateCreatorElement(L_CHAR *pszPrivateString);
H\LeadTools\LTDIC.H:   L_INT         GetXRangeValue(pDICOMELEMENT pElement, L_UINT32 nIndex, L_VOID * pValue, L_UINT16 nType, L_UINT32 nCount);
H\LeadTools\LTDIC.H:   L_UINT16      ChangeTransferSyntax(DICOM_TRANSFER_SYNTAXES NewTransferSyntax,L_INT32 nQFactor,L_BOOL bKeepPixelDataIntact,L_UINT32 uFlags);
H\LeadTools\LTDIC.H:   L_UINT16      GetFrameBinaryData(pDICOMELEMENT pPixelDataElement,L_INT nFrameIndex,L_UCHAR *pFrameDataBuffer,L_UINT *puFrameDataSize);
H\LeadTools\LTDIC.H:HDICOMDS        EXT_FUNCTION L_DicomCreateDS          (L_CHAR *pszPath);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeDS            (HDICOMDS hDS);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitDS            (HDICOMDS hDS, L_UINT32 nClass, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoDS         (HDICOMDS hDS, L_UINT32 *pnClass, L_UINT16 *pnFlags);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitCS            (HDICOMDS hDS, L_UINT16 nCommand, L_BOOL bRequest);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoCS         (HDICOMDS hDS, L_UINT16 *pnCommand, L_BOOL *pbRequest);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomLoadDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSaveDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomCopyDS            (HDICOMDS hDstDS, pDICOMELEMENT pDstParent, HDICOMDS hSrcDS, pDICOMELEMENT pSrcParent);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertElement     (HDICOMDS hDS, pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomInsertModule      (HDICOMDS hDS, L_UINT32 nModule, L_BOOL bOptional);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertKey         (HDICOMDS hDS, pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomDeleteElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteModule      (HDICOMDS hDS, L_UINT32 nModule);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteKey         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomResetDS           (HDICOMDS hDS);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootElement    (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentElement  (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LeadTools\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetLevelElement   (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountModule    (HDICOMDS hDS);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomExistsElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomIsVolatileElement (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomConformanceDS     (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetDebugDS        (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootKey        (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentKey      (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetValueKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstElement  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindModule        (HDICOMDS hDS, L_UINT32 nModule);
H\LeadTools\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindIndexModule   (HDICOMDS hDS, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstKey      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LeadTools\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountValue     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeValue         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_INT16        *EXT_FUNCTION L_DicomGetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_INT32        *EXT_FUNCTION L_DicomGetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_FLOAT        *EXT_FUNCTION L_DicomGetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_DOUBLE       *EXT_FUNCTION L_DicomGetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:pVALUEAGE       EXT_FUNCTION L_DicomGetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:pVALUEDATE      EXT_FUNCTION L_DicomGetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:pVALUETIME      EXT_FUNCTION L_DicomGetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:pVALUEDATETIME  EXT_FUNCTION L_DicomGetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText);
H\LeadTools\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountImage     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetInfoImage      (HDICOMDS hDS, pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetKeepPixelDataIntactFlag(HDICOMDS hDS);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetDefaultJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImage       (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImageList   (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomDeleteImage       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomChangeTransferSyntax(HDICOMDS hDS, L_CHAR *pszUID,L_INT32 nQFactor/*For lossy*/,L_UINT32 uFlags);
H\LeadTools\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetKeepPixelDataIntactFlag(HDICOMDS hDS, L_BOOL bSet);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetJ2KOptions( HDICOMDS hDS,const pFILEJ2KOPTIONS pOptions);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnSave           (HDICOMDS hDS,
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnLoad           (HDICOMDS hDS,
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnCount         (HDICOMDS hDS, L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LeadTools\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnDelete        (HDICOMDS hDS, L_INT nIndex, L_INT nPage ); //nIndex: Pass -1 to delete the LEAD Private tag and all files
H\LeadTools\LTDIC.H:typedef struct tagDICOMDIROPTIONS
H\LeadTools\LTDIC.H:} DICOMDIROPTIONS, * pDICOMDIROPTIONS;
H\LeadTools\LTDIC.H:#define DICOMDIR_REJECT_INVALID_FILEID          0x01
H\LeadTools\LTDIC.H:#define DICOMDIR_INSERT_ICON_IMAGE_SEQUENCE     0x02
H\LeadTools\LTDIC.H:#define DICOMDIR_INSERTDICOMFILE_PREADD   300
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomDir : public LDicomDS
H\LeadTools\LTDIC.H:   LDicomDir(L_CHAR* pszDICOMDIRDstFolder = NULL, L_CHAR* pszPath = NULL);
H\LeadTools\LTDIC.H:   virtual ~LDicomDir();
H\LeadTools\LTDIC.H:   L_UINT16 SaveDicomDir(L_UINT16 uFlags = 0);   
H\LeadTools\LTDIC.H:   L_UINT16 ResetDicomDir(const L_CHAR* pszDICOMDIRDstFolder);
H\LeadTools\LTDIC.H:   L_UINT16 InsertDicomFile(L_CHAR* pszFileName);
H\LeadTools\LTDIC.H:   L_UINT16 InsertDicomDS(LDicomDS& DataSet, L_CHAR* pszFileName);
H\LeadTools\LTDIC.H:   L_UINT16 SetOptions(const pDICOMDIROPTIONS pOptions);
H\LeadTools\LTDIC.H:   L_UINT16 GetOptions(pDICOMDIROPTIONS pOptions, L_INT nSize) const;
H\LeadTools\LTDIC.H:   virtual L_UINT16 OnInsertDicomFile(const L_CHAR* pszFileName,
H\LeadTools\LTDIC.H:                                      LDicomDS* pDataSet,
H\LeadTools\LTDIC.H:   L_CHAR*         m_pszDICOMDIRDstFolder;
H\LeadTools\LTDIC.H:   DICOMDIROPTIONS m_Options;
H\LeadTools\LTDIC.H:   pDICOMELEMENT FindDirectoryRecord(pDICOMELEMENT pReferencingDR, L_INT nDRType,
H\LeadTools\LTDIC.H:   L_VOID        SetSelectionKey(pDICOMELEMENT pDR, LDicomDS& DataSet, L_UINT32 uTag,
H\LeadTools\LTDIC.H:   L_VOID        DeleteDRElement(pDICOMELEMENT pDR, L_UINT32 uTag);
H\LeadTools\LTDIC.H:   L_UINT16      InsertIconImageSequence(pDICOMELEMENT pImageKey, LDicomDS& SourceDataSet);
H\LeadTools\LTDIC.H:#define PDU_REJECT_SOURCE_USER              1  // DICOM UL service-user
H\LeadTools\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER1         2  // DICOM UL service-provider (ASCE related function)
H\LeadTools\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER2         3  // DICOM UL service-provider (Presentation related function)
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomAssociate
H\LeadTools\LTDIC.H:   LDicomAssociate(L_BOOL bRequest);
H\LeadTools\LTDIC.H:   ~LDicomAssociate();
H\LeadTools\LTDIC.H:   friend class LDicomNet;
H\LeadTools\LTDIC.H:   LDicomTree m_Presentation;
H\LeadTools\LTDIC.H:   LDicomTree m_RoleSelect;
H\LeadTools\LTDIC.H:   LDicomTree m_UserInfo;
H\LeadTools\LTDIC.H:typedef L_VOID *HDICOMPDU;
H\LeadTools\LTDIC.H:HDICOMPDU EXT_FUNCTION L_DicomCreateAssociate        (L_BOOL bRequest);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomFreeAssociate          (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetAssociate         (HDICOMPDU hPDU, L_BOOL bRequest);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultAssociate       (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRequest              (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomSetRequest             (HDICOMPDU hPDU, L_BOOL bRequest);
H\LeadTools\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetVersion             (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetVersion             (HDICOMPDU hPDU, L_UINT16 nVersion);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalled              (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalled              (HDICOMPDU hPDU, L_CHAR *pszName);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalling             (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalling             (HDICOMPDU hPDU, L_CHAR *pszName);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetApplication         (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetApplication         (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetPresentationCount   (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetPresentation        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetPresentation        (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddPresentation        (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult, L_CHAR *pszAbstract);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelPresentation        (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetResult              (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetResult              (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetAbstract            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAbstract            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomFindAbstract           (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetTransferCount       (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRoleSelect           (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetUserRole            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetProviderRole        (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetRoleSelect          (HDICOMPDU hPDU, L_UCHAR nID, L_BOOL bEnabled, L_UCHAR nUser, L_UCHAR nProvider);
H\LeadTools\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetLengthExtended      (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_UCHAR  *EXT_FUNCTION L_DicomGetExtended            (HDICOMPDU hPDU, L_UCHAR nID);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetExtended            (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR *pData, L_UINT32 nLength);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsMaxLength            (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetMaxLength           (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetMaxLength           (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT32 nLength);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementClass       (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementClass      (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementClass      (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszUID);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsAsyncOperations      (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetInvokedOperations   (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetPerformedOperations (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAsyncOperations     (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT16 nInvoked, L_UINT16 nPerformed);
H\LeadTools\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementVersion     (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementVersion    (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementVersion    (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszVersion);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetUserInfoCount       (HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetTypeUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetLengthUserInfo      (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetDataUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetUserInfo            (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LeadTools\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddUserInfo            (HDICOMPDU hPDU, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LeadTools\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelUserInfo            (HDICOMPDU hPDU, L_INT nIndex);
H\LeadTools\LTDIC.H:typedef L_VOID *HDICOMNET;
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CONNECTCALLBACK)                 (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK ACCEPTCALLBACK)                  (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CLOSECALLBACK)                   (HDICOMNET hNet, L_INT nError, HDICOMNET hPeer, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECALLBACK)                 (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDCALLBACK)                    (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDEXTCALLBACK)                 (HDICOMNET hNet, pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREQUESTCALLBACK) (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEACCEPTCALLBACK)  (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREJECTCALLBACK)  (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEDATACALLBACK)             (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASEREQUESTCALLBACK)   (HDICOMNET hNet, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASERESPONSECALLBACK)  (HDICOMNET hNet, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEABORTCALLBACK)            (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTOREREQUESTCALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTORERESPONSECALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDRESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVEREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVERESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECCANCELREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHOREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHORESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT32 nCount, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEUNKNOWNCALLBACK)          (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK GETCHALLENGECALLBACK)          (HDICOMNET hNet, L_UINT64 *nChallenge, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK INTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 *nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK EXTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONSECURELINKREADY)             (HDICOMNET hNet, L_UINT32 nError, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURESENDISCL)           (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nLength, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURERECEIVEDISCL)       (HDICOMNET hNet, L_INT nError, L_CHAR *nType, L_UINT32 nLength, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK RECEIVEDISCLPACKET)            (HDICOMNET hNet, L_INT nError, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LeadTools\LTDIC.H:typedef struct _DICOMNETCALLBACK
H\LeadTools\LTDIC.H:} DICOMNETCALLBACK, *pDICOMNETCALLBACK;
H\LeadTools\LTDIC.H:typedef struct _LDICOMNETPRIVATEDATA
H\LeadTools\LTDIC.H:   DICOMNETDEBUGINFOONSEND m_DebugInfoOnSend;
H\LeadTools\LTDIC.H:}LDICOMNETPRIVATEDATA , * pLDICOMNETPRIVATEDATA;
H\LeadTools\LTDIC.H:class DICOM_EXPORT LDicomNet
H\LeadTools\LTDIC.H:   LDicomNet(L_CHAR *pszPath, L_INT32 nMode);
H\LeadTools\LTDIC.H:      // Values for nMode: DICOM_SECURE_ISCL, DICOM_SECURE_TLS, DICOM_SECURE_NONE
H\LeadTools\LTDIC.H:      // if a bad value is supplied, security will be DICOM_SECURE_NONE
H\LeadTools\LTDIC.H:   virtual ~LDicomNet();
H\LeadTools\LTDIC.H:   L_INT            Accept                     (LDicomNet *pNet);
H\LeadTools\LTDIC.H:   L_INT            SendAssociateRequest       (LDicomAssociate *pPDU);
H\LeadTools\LTDIC.H:   L_INT            SendAssociateAccept        (LDicomAssociate *pPDU);
H\LeadTools\LTDIC.H:   L_INT            SendData                   (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCStoreRequest          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCFindRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCFindResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCGetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCMoveRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendCMoveResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNReportRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNReportResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNSetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNSetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNActionRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNActionResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNCreateRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT            SendNCreateResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   LDicomNet       *GetServer                  ();
H\LeadTools\LTDIC.H:   LDicomNet       *GetClient                  (L_UINT nIndex);
H\LeadTools\LTDIC.H:   LDicomAssociate *GetAssociate               ();
H\LeadTools\LTDIC.H:   virtual L_VOID   OnClose                    (L_INT nError, LDicomNet *pNet);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveAssociateRequest  (LDicomAssociate *pPDU);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveAssociateAccept   (LDicomAssociate *pPDU);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveData              (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCStoreRequest     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCFindRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCFindResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCGetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCMoveRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveCMoveResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNReportRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNReportResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNSetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNSetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNActionRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNActionResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNCreateRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveNCreateResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnReceiveUnknown           (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_VOID           SetCallback                (pDICOMNETCALLBACK pCallback);
H\LeadTools\LTDIC.H:   virtual L_VOID   OnSendExt(pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend);
H\LeadTools\LTDIC.H:   pLDICOMNETPRIVATEDATA   m_pPrivateData;
H\LeadTools\LTDIC.H:   LDicomAssociate         m_AssociateRQ;
H\LeadTools\LTDIC.H:   LDicomAssociate         m_AssociateAC;
H\LeadTools\LTDIC.H:   LDicomFile              m_SendFile;
H\LeadTools\LTDIC.H:   LDicomDS                m_SendCS;
H\LeadTools\LTDIC.H:   LDicomFile              m_ReceiveFileCS;
H\LeadTools\LTDIC.H:   LDicomFile              m_ReceiveFileDS;
H\LeadTools\LTDIC.H:   LDicomDS                m_ReceiveCS;
H\LeadTools\LTDIC.H:   LDicomDS                m_ReceiveDS;
H\LeadTools\LTDIC.H:   DICOMNETCALLBACK        m_Callback;
H\LeadTools\LTDIC.H:   L_VOID   ReceiveData (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_INT    SendData    (L_BOOL bCommand, L_UCHAR nPresentationID, LDicomDS *pDS);
H\LeadTools\LTDIC.H:   L_UINT32 m_SecurityStandard;     // choose between DICOM_ISCL, DICOM_TLS and DICOM_NO_SECURITY
H\LeadTools\LTDIC.H:         // returns DICOM_SUCCES if OK, not 0 if nLengthLut too small
H\LeadTools\LTDIC.H:         // returns DICOM_SUCCESS if data decrypted and padding removed. Update nLengthOut to correct length of decrypted message
H\LeadTools\LTDIC.H:                                        L_UINT32 indicator,
H\LeadTools\LTDIC.H:   static LDicomNet *m_pNetTLS[512];
H\LeadTools\LTDIC.H:   L_VOID SetHandshakeDebug(L_BOOL isDebug, L_VOID (*myfn)(LDicomNet *pDic, const char *TLS_STATUS, int ret));
H\LeadTools\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomCreateNet                  (L_CHAR *pszPath, L_INT32 nMode);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxCommBlockLengthISCL(HDICOMNET hNet, L_UINT32 nCommBlockLength);   // maximum communication block size, there are performance
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetCommBlockLengthISCL(HDICOMNET hNet);     // return the comm block size negociated
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxMessageLengthISCL(HDICOMNET hNet, L_UINT32 nMsgLength);     // the maximum message length that can be processed - 1MB, 2MB and so on
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthAlgISCL(HDICOMNET hNet, L_UINT32 mutualAuthMode);       // only 4way 3pass
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultEncryptionISCL(HDICOMNET hNet, L_UINT32 EncryptionMode);   // bulk data encryption algorithm
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultSigningISCL(HDICOMNET hNet, L_UINT32 SignMode);            // message authentication algorithm
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerEncryptionISCL(HDICOMNET hNet);   // can be checked to see what algorithm of communication the sender tries to use
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerMACISCL(HDICOMNET hNet);      // ATTN: if the crypt/MAC algorithm differs, the message is dropped and the GetPeerEncryption()/GetPeerMAC() will tell me
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetErrorSecure(HDICOMNET hNet);       // returns the m_nISCLError in ISCL case, or m_nTLSError in case of TLS
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 nLength);    // nLength = 1...128
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 *nLength);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerRequestedMessageLengthISCL(HDICOMNET hNet);      // used if local end refuse to receive
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 nKey);      // key used during mutual authentication
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForMutualAuthISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetEncryptKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 key);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForEncryptISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForEncryptISCL(HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForMutualAuthISCL(HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetStatusISCL(HDICOMNET hNet);                          // return the internal status of the object.
H\LeadTools\LTDIC.H:   L_BOOL   EXT_FUNCTION L_DicomIsISCLQueueEmpty(HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_INT    EXT_FUNCTION L_DicomCloseForced(HDICOMNET hNet, L_BOOL bForced);
H\LeadTools\LTDIC.H:   L_INT32  EXT_FUNCTION L_DicomSendNonSecureISCL(HDICOMNET hNet, L_CHAR *pBuffer, L_UINT32 nBytes);
H\LeadTools\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetSecureMode(HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCipherFromIndexTLS(HDICOMNET hNet, L_UINT32 nIndex);
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetCipherToIndexTLS(HDICOMNET hNet, L_UINT32 nIndex, L_CIPHERSUITE cipher);
H\LeadTools\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCiphersuiteTLS(HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptionAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetAuthenticationAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetIntegrityAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetKeyExchangeAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetMutualAuthKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetClientCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LeadTools\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetServerCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LeadTools\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomFreeNet                    (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomStartUp                    ();
H\LeadTools\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomShutDown                   ();
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomConnect                    (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_CHAR *pszPeerAddress, L_UINT nPeerPort);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomListen                     (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_INT nNbPeers);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomAccept                     (HDICOMNET hNet, HDICOMNET hPeer);
H\LeadTools\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomClose                      (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateRequest       (HDICOMNET hNet, HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateAccept        (HDICOMNET hNet, HDICOMPDU hPDU);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateReject        (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendData                   (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseRequest         (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseResponse        (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAbort                  (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreRequest          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreResponse         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCCancelRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT16 nCount);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LeadTools\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsActivated                (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsConnected                (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsAssociated               (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetQueueSend               (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetServer                  (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetClientCount             (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetClient                  (HDICOMNET hNet, L_UINT nIndex);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetHostInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LeadTools\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetPeerInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LeadTools\LTDIC.H:   HDICOMPDU EXT_FUNCTION L_DicomGetAssociate               (HDICOMNET hNet);
H\LeadTools\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomSetCallback                (HDICOMNET hNet, pDICOMNETCALLBACK pCallback);
H\LeadTools\LTDIC.H:#endif  // LTDIC_H_INCLUDED
H\LeadTools\ltdicocx.h:#ifndef _LTDICOCX_H_
H\LeadTools\ltdicocx.h:#define _LTDICOCX_H_
H\LeadTools\ltdicocx.h:   } DicomVRCodeConstants;
H\LeadTools\ltdicocx.h:      DICOM_VR_FIXED = 0,       // DICOMVR.nLength bytes fixed
H\LeadTools\ltdicocx.h:      DICOM_VR_MAXIMUM,         // DICOMVR.nLength bytes maximum
H\LeadTools\ltdicocx.h:      DICOM_VR_MAXIMUM_GROUP,   // DICOMVR.nLength maximum per component group
H\LeadTools\ltdicocx.h:      DICOM_VR_ANY,             // Any length valid for any of the other DICOM Value Representations
H\LeadTools\ltdicocx.h:      DICOM_VR_NOT_APPLICABLE,  // DICOMVR.nLength not applicable
H\LeadTools\ltdicocx.h:      DICOM_VR_MAX,
H\LeadTools\ltdicocx.h:      DICOM_VR_BINARY = 0x0100, // Binary value
H\LeadTools\ltdicocx.h:      DICOM_VR_STRING = 0x0200, // String value (The character '\' is used as the delimiter between values for multiple data elements)
H\LeadTools\ltdicocx.h:      DICOM_VR_TEXT   = 0x0400, // Text value (Data Elements with this VR shall not be multi-valued)
H\LeadTools\ltdicocx.h:   } DicomVRRestrictionConstants;
H\LeadTools\ltdicocx.h:   } DicomAgeValueConstants;
H\LeadTools\ltdicocx.h:   } DicomConformanceStatusFlags;
H\LeadTools\ltdicocx.h:   } DicomDataSetFlags;
H\LeadTools\ltdicocx.h:      DICOM_SUCCESS                           = 0,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_LOCKED                      = 20001,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_MEMORY                      = 20002,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_OPEN                        = 20003,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_READ                        = 20004,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_WRITE                       = 20005,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_SEEK                        = 20006,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_END                         = 20007,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_FORMAT                      = 20008,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_PARAMETER                   = 20009,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_IMAGE                       = 20010,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_COMPRESSION                 = 20011,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_PHOTOMETRIC                 = 20012,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_CONVERSION                  = 20013,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_RANGE                       = 20014,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_BITSPERPIXEL                = 20015,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_QFACTOR                     = 20016,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_PDU_TYPE                    = 20017,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_PDU_LENGTH                  = 20018,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_PDU_ID                      = 20019,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_FAILURE                 = 20029,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_ACCESS                  = 20030,  // The address is a broadcast address
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_IN_USE          = 20031,  // The address is already in use
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_NOT_AVAILABLE   = 20032,  // The address is not available from the local computer
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_NOT_SUPPORTED   = 20033,  // The address family is not supported
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_ABORTED      = 20034,  // The virtual circuit was aborted
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_REFUSED      = 20035,  // The attempt to connect was forcefully rejected
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_RESET        = 20036,  // The virtual circuit was reset by the remote side
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_DESTINATION_REQUIRED    = 20037,  // A destination address is required
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_ARGUMENT_INCORRECT      = 20038,  // The namelen argument is incorrect
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_IN_PROGRESS             = 20039,  // A blocking operation is in progress
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_BLOCKING_CANCELED       = 20040,  // The blocking call was canceled
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_INVALID                 = 20041,  // The socket has not been bound with bind
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_IS_CONNECTED            = 20042,  // The socket is already connected
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NO_MORE_FILE            = 20043,  // No more file descriptors are available
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_MESSAGE_SIZE            = 20044,  // The datagram is larger than the maximum supported
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_DOWN                    = 20045,  // The network subsystem has failed
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_RESET                   = 20046,  // The connection must be reset
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_UN_REACH                = 20047,  // The network can't be reached from this host at this time
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NO_BUFFERS              = 20048,  // No buffer space is available
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NOT_CONNECTED           = 20049,  // The socket is not connected
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NOT_SOCKET              = 20050,  // The descriptor is not a socket
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_OPERATION_NOT_SUPPORTED = 20051,  // The type does not support connection-oriented service
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_PROTOCOL_NOT_SUPPORTED  = 20052,  // The specified protocol is not supported
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_PROTOCOL_TYPE           = 20053,  // The specified protocol is the wrong type
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_SHUTDOWN                = 20054,  // The socket has been shut down
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_SOCKET_NOT_SUPPORTED    = 20055,  // The type is not supported in this address family
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_TIME_OUT                = 20056,  // Attempt to connect timed out without establishing a connection
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_WOULD_BLOCK             = 20057,  // The socket is marked as nonblocking and the requested operation would block
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_HOST_NOT_FOUND          = 20058,  // Authoritative Answer Host not found
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NO_DATA                 = 20059,  // Valid name, no data record of requested type
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NO_RECOVERY             = 20060,  // Nonrecoverable errors
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_NOT_INITIALISED         = 20061,  // The system was not initialized
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_SYSTEM_NOT_READY        = 20062,  // Not ready for network communication
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_TRY_AGAIN               = 20063,  // Non-Authoritative Host not found, or server faild
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_VERSION_NOT_SUPPORTED   = 20064,  // The version requested is not provided by this implementation
H\LeadTools\ltdicocx.h:         DICOM_ERROR_NET_SECURITY_BREACH         = 20065,  // There is an cryptographic error. 
H\LeadTools\ltdicocx.h:         DICOM_ERROR_TLS                         = 20066,  // TLS internal error
H\LeadTools\ltdicocx.h:         DICOM_ERROR_SECURITY_LOCKED             = 20067,  // DICOM Security Features are locked
H\LeadTools\ltdicocx.h:         DICOM_ERROR_TLS_DLL_NOT_LOADED          = 20068,  // TLS and/or CRY DLL not loaded
H\LeadTools\ltdicocx.h:         DICOM_ERROR_BAD_SECURE_MODE             = 20069,  // if I do ISCL operations on TLS objects
H\LeadTools\ltdicocx.h:         DICOM_ERROR_ANN                         = 20070,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_ANN_LOCKED                  = 20071,  // Annotation support is locked
H\LeadTools\ltdicocx.h:         DICOM_ERROR_ANN_MISSING                 = 20072,  // Annotation dll is missing
H\LeadTools\ltdicocx.h:         DICOM_ERROR_TAG_ALREADY_EXISTS          = 20073,  // LEAD private creator element already exists
H\LeadTools\ltdicocx.h:         DICOM_ERROR_ANN_NO_EXIST                = 20074,  // Requested annotation file or page does not exist
H\LeadTools\ltdicocx.h:         DICOM_ERROR_ELEMENT_LENGTH_ODD          = 20100,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_DICOMDIR_FOLDER             = 20200,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_FILE                        = 20201,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_FILEID                      = 20202,
H\LeadTools\ltdicocx.h:         DICOM_ERROR_J2K_LOCKED                  = 20203,
H\LeadTools\ltdicocx.h:   } DicomSpecificErrorCodes;
H\LeadTools\ltdicocx.h:      DICOM_CLASS_CR_IMAGE_STORAGE=0,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_CT_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_MR_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_NM_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_NM_IMAGE_STORAGE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_US_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_US_IMAGE_STORAGE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_US_MULTI_FRAME_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_US_MULTI_FRAME_IMAGE_STORAGE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_SC_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STANDALONE_OVERLAY_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STANDALONE_CURVE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_STUDY_DESCRIPTOR,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STANDALONE_MODALITY_LUT_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STANDALONE_VOI_LUT_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_XA_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_XA_BIPLANE_IMAGE_STORAGE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_XRF_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_DOSE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_STRUCTURE_SET_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_PLAN_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PET_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STANDALONE_PET_CURVE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STORED_PRINT_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_HC_GRAYSCALE_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_HC_COLOR_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_IMAGE_STORAGE_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_IMAGE_STORAGE_PROCESSING,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_MAMMOGRAPHY_IMAGE_STORAGE_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_MAMMOGRAPHY_IMAGE_STORAGE_PROCESSING,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_INTRAORAL_IMAGE_STORAGE_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_DX_INTRAORAL_IMAGE_STORAGE_PROCESSING,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_BEAMS_TREATMENT_RECORD_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_BRACHY_TREATMENT_RECORD_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RT_TREATMENT_SUMMARY_RECORD_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VL_ENDOSCOPIC_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VL_MICROSCOPIC_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VL_SLIDE_COORDINATES_MICROSCOPIC_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VL_PHOTOGRAPHIC_IMAGE_STORAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VISIT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY_COMPONENT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RESULTS,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_INTERPRETATION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_FILM_SESSION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_FILM_BOX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_GRAYSCALE_IMAGE_BOX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_COLOR_IMAGE_BOX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_ANNOTATION_BOX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PRINT_JOB,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PRINTER,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_VOI_LUT_BOX_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_IMAGE_OVERLAY_BOX_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STORAGE_COMMITMENT_PUSH_MODEL,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STORAGE_COMMITMENT_PULL_MODEL,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PRINT_QUEUE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_MODALITY_PERFORMED_PROCEDURE_STEP,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PRESENTATION_LUT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PULL_PRINT_REQUEST,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_RESULTS_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_GRAYSCALE_PRINT_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_COLOR_PRINT_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_REFERENCED_GRAYSCALE_PRINT_META_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_REFERENCED_COLOR_PRINT_META_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PULL_STORED_PRINT_META,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PRINTER_CONFIGURATION,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_PRINT_IMAGE_OVERLAY_BOX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_DIRECTORY,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_PATIENT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_STUDY_QUERY_PATIENT,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_PATIENT_STUDY_QUERY_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_TEXT_SR,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_ENHANCED_SR,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_COMPREHENSIVE_SR,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_MODALITY_WORKLIST,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_VOICE_AUDIO,                    
H\LeadTools\ltdicocx.h:      DICOM_CLASS_12_LEAD_ECG,                          
H\LeadTools\ltdicocx.h:      DICOM_CLASS_GENERAL_ECG,                          
H\LeadTools\ltdicocx.h:      DICOM_CLASS_AMBULATORY_ECG,                       
H\LeadTools\ltdicocx.h:      DICOM_CLASS_HEMODYNAMIC,                          
H\LeadTools\ltdicocx.h:      DICOM_CLASS_BASIC_CARDIAC_EP,                     
H\LeadTools\ltdicocx.h:      DICOM_CLASS_MAX,
H\LeadTools\ltdicocx.h:      DICOM_CLASS_UNKNOWN = 65535,
H\LeadTools\ltdicocx.h:   } DicomClassConstants;
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT=0,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GENERAL_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_STUDY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GENERAL_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CR_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GENERAL_EQUIPMENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GENERAL_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_PIXEL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CONTRAST_BOLUS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CR_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_OVERLAY_PLANE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CURVE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MODALITY_LUT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VOI_LUT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SOP_COMMON,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_FRAME_OF_REFERENCE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_PLANE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CT_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MR_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_PET_PATIENT_ORIENTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_IMAGE_PIXEL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MULTI_FRAME,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_MULTI_FRAME,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_ISOTOPE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_DETECTOR,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_TOMO_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_MULTI_GATED_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_PHASE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_RECONSTRUCTION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MULTI_FRAME_OVERLAY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_FRAME_OF_REFERENCE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PALETTE_COLOR_LOOCKUP_TABLE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_REGION_CALIBRATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CURVE_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_AUDIO,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CINE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SC_EQUIPMENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SC_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_OVERLAY_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_SUMMARY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_CONTENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_LUT_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_FRAME_POINTERS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MASK,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DISPLAY_SHUTTER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DEVICE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_THERAPY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_COLLIMATOR,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_TABLE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_POSITIONER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BIPLANE_SEQUENCE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BIPLANE_OVERLAY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BIPLANE_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XRF_POSITIONER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XRF_TOMO_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_APPROVAL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_DOSE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_DVH,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STRUCTURE_SET,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_ROI_CONTOUR,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_DOSE_ROI,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_OBSERVATIONS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_GENERAL_PLAN,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_PRESCRIPTION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_TOLERANCE_TABLES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_PATIENT_SETUP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_FRACTION_SCHEME,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_BEAMS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_BRACHY_APPLICATION_SETUPS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PET_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PET_ISOTOPE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PET_MULTIGATED_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PET_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PET_CURVE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINTER_CHARACTERISTICS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_FILM_BOX,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_LIST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_ANNOTATION_LIST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_LIST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRESENTATION_LUT_LIST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_HC_EQUIPMENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_HC_GRAYSCALE_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_HC_COLOR_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_DEMOGRAPHIC,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_MEDICAL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_ADMISSION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_STAY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_DISCHARGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_SCHEDULING,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_CLASSIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_SCHEDULING,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_READ,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_ACQUISITION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RESULTS_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RESULTS_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RESULTS_IMPRESSIONS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_STATE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_RECORDING,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_TRANSCRIPTION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_APPROVAL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_SESSION_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_SESSION_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_BOX_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_BOX_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_PRESENTATION_GRAYSCALE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_PRESENTATION_COLOR,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_ANNOTATION_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINT_JOB,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINTER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_PRESENTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STORAGE_COMMITMENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GENERAL_QUEUE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINT_QUEUE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PERFORMED_PROCEDURE_STEP_RELATIONSHIP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PERFORMED_PROCEDURE_STEP_INFORMATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_ACQUISITION_RESULTS,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RADIATION_DOSE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BILLING_AND_MATERIAL_MANAGEMENT_CODES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRESENTATION_LUT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINT_REQUEST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_RELATIONSHIP_META,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_SERIES_RETIRED,                      
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_EQUIPMENT_RETIRED,                   
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_IMAGE_RETIRED,                               
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_SPECT_ACQUISITION_IMAGE_RETIRED,     
H\LeadTools\ltdicocx.h:      DICOM_MODULE_NM_MULTI_GATED_ACQUISITION_IMAGE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_FRAME_OF_REFERENCE_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_REGION_CALIBRATION_RETIRED,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_US_IMAGE_RETIRED,             
H\LeadTools\ltdicocx.h:      DICOM_MODULE_FILESET_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DIRECTORY_INFORMATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PATIENT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SERIES_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_OVERLAY_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MODALITY_LUT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VOI_LUT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CURVE_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STORED_PRINT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_DOSE_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_STRUCTURE_SET_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_PLAN_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_RECORD_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_TOPIC_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VISIT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RESULTS_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRIVATE_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SPECIMEN_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DX_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DX_ANATOMY_IMAGED,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DX_IMAGE,         
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DX_DETECTOR,      
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DX_POSITIONING,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_ACQUISITION_CONTEXT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_ACQUISITION_DOSE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_GENERATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_FILTRATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_XA_GRID,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGE_HISTOGRAM,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MAMMOGRAPHY_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MAMMOGRAPHY_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTRAORAL_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_INTRAORAL_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_GENERAL_TREATMENT_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_MACHINE_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MEASURED_DOSE_REFERENCE_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_CALCULATED_DOSE_REFERENCE_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_BEAMS_SESSION_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_SUMMARY_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_RT_BRACHY_SESSION_RECORD,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_VL_IMAGE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SLIDE_COORDINATES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BASIC_PRINT_IMAGE_OVERLAY_BOX,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRINTER_CONFIGURATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_GENERAL,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_CONTENT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SCHEDULED_PROCEDURE_STEP,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_REQUESTED_PROCEDURE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_IMAGING_SERVICE_REQUEST,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRESENTATION_SERIES,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRESENTATION_STATE,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_BITMAP_DISPLAY_SHUTTER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_OVERLAY_CURVE_ACTIVATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_DISPLAYED_AREA,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GRAPHIC_ANNOTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SPATIAL_TRANSFORMATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_GRAPHIC_LAYER,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SOFTCOPY_VOI_LUT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SOFTCOPY_PRESENTATION_LUT,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_SYNCHRONIZATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_WAVEFORM_IDENTIFICATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_WAVEFORM,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_WAVEFORM_ANNOTATION,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_PRESENTATION_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_WAVEFORM_KEY,
H\LeadTools\ltdicocx.h:      DICOM_MODULE_MAX,
H\LeadTools\ltdicocx.h:   } DicomModuleConstants;
H\LeadTools\ltdicocx.h:      TAG_NUCLEAR_MEDICINE_SERIES_TYPE_RETIRED                   = 0x00080042UL,
H\LeadTools\ltdicocx.h:      TAG_MEDICAL_RECORD_LOCATOR                                 = 0x00101090UL,
H\LeadTools\ltdicocx.h:      TAG_MEDICAL_ALERTS                                         = 0x00102000UL,
H\LeadTools\ltdicocx.h:      TAG_POSITION_REFERENCE_INDICATOR                           = 0x00201040UL,
H\LeadTools\ltdicocx.h:      TAG_PRE_MEDICATION                                         = 0x00400012UL,
H\LeadTools\ltdicocx.h:   } DicomDataSetTagConstants;
H\LeadTools\ltdicocx.h:   } DicomCommandSetTagConstants;
H\LeadTools\ltdicocx.h:      DICOM_IOD_TYPE_CLASS=0,             // Class type
H\LeadTools\ltdicocx.h:      DICOM_IOD_TYPE_MODULE,              // Module type
H\LeadTools\ltdicocx.h:      DICOM_IOD_TYPE_ELEMENT,             // Element type
H\LeadTools\ltdicocx.h:      DICOM_IOD_TYPE_MAX,
H\LeadTools\ltdicocx.h:   } DicomIODTypeConstants;
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_M,                  // Mandatory IOD   - M - (U - Unique for key)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_C,                  // Conditional IOD - C - (R - Required for key)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_U,                  // Optional IOD    - U - (O - Optional for key)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_1,                  // Mandatory IOD   - 1  (type 1)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_1C,                 // Conditional IOD - 1C (type 1)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_2,                  // Mandatory IOD   - 2  (type 2)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_2C,                 // Conditional IOD - 2C (type 2)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_3,                  // Optional IOD    - 3  (type 3)
H\LeadTools\ltdicocx.h:      DICOM_IOD_USAGE_MAX,
H\LeadTools\ltdicocx.h:   } DicomIODUsageConstants;
H\LeadTools\ltdicocx.h:   } DicomMiscConstants;
H\LeadTools\ltdicocx.h:   } DicomColorOrderConstants;
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_NONE=0,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_RLE,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LOSSLESS,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LOSSY,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LS_LOSSLESS,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LS_LOSSY,
H\LeadTools\ltdicocx.h:   } DicomImageCompressionConstants;
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_MONOCHROME1=0,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_MONOCHROME2,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_PALETTE_COLOR,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_RGB,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_ARGB,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_CMYK,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_YBR_FULL_422,
H\LeadTools\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_YBR_FULL,
H\LeadTools\ltdicocx.h:   } DicomImagePhotometricConstants;
H\LeadTools\ltdicocx.h:   } DicomCommandSetConstants;
H\LeadTools\ltdicocx.h:      DICOM_PRIORITY_LOW        = 0x0002,
H\LeadTools\ltdicocx.h:      DICOM_PRIORITY_MEDIUM     = 0x0000,
H\LeadTools\ltdicocx.h:      DICOM_PRIORITY_HIGH       = 0x0001,
H\LeadTools\ltdicocx.h:   } DicomCommandSetMessagePriorities;
H\LeadTools\ltdicocx.h:   } DicomCommandPriorities;
H\LeadTools\ltdicocx.h:   } DicomCommandSetDataSetTypes;
H\LeadTools\ltdicocx.h:   } DicomCommandStatusConstants;
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_OTHER          = 0,     // Unknown
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_TRANSFER1      = 1,     // Transfer Syntax - Uncompressed Image
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_TRANSFER2      = 2,     // Transfer Syntax - Compressed Image
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_CLASS          = 3,     // SOP Class
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_META_CLASS     = 4,     // Meta SOP Class
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_INSTANCE       = 5,     // SOP Instance
H\LeadTools\ltdicocx.h:      DICOM_UID_TYPE_APPLICATION    = 6,     // Application Context Name
H\LeadTools\ltdicocx.h:   } DicomUIDTypes;
H\LeadTools\ltdicocx.h:   #define UID_JPEG_LOSSLESS_NONHIER_14B                 "1.2.840.10008.1.2.4.70"         // JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])
H\LeadTools\ltdicocx.h:   #define UID_NM_IMAGE_STORAGE_RETIRED                  "1.2.840.10008.5.1.4.1.1.5"      // Nuclear Medicine Image Storage (Retired)
H\LeadTools\ltdicocx.h:   #define UID_NM_IMAGE_STORAGE                          "1.2.840.10008.5.1.4.1.1.20"     // Nuclear Medicine Image Storage
H\LeadTools\ltdicocx.h:   #define UID_GE_MAGNETIC_RESONANCE_IMAGE_INFORMATION_OBJECT    "1.2.840.113619.4.2"             // GE Private Dicom Magnetic Resonance Image Information Object
H\LeadTools\ltdicocx.h:   #define UID_GE_COMPUTED_TOMOGRAPHY_IMAGE_INFORMATION_OBJECT   "1.2.840.113619.4.3"             // GE Private Dicom Computed Tomography Image Information Object
H\LeadTools\ltdicocx.h:   #define UID_GE_DISPLAY_IMAGERMATION_INFO_OBJECT               "1.2.840.113619.4.4"             // GE Private Dicom Display Imagermation Info Object
H\LeadTools\ltdicocx.h:#endif                          /* _LTDICOCX_H_ */
H\LeadTools\LTDLG.H:   L_UINT32    uProcess ;	   // flag indicating which function was chosen.  
H\LeadTools\LTDLG.H:   L_UINT32 uType ;	// flag indicating which function was chosen.  
H\LeadTools\LTDLG.H:   FS_DICOM8,
H\LeadTools\LTDLG.H:   FS_DICOM16,
H\LeadTools\LTDLG.H:   FS_DICOM24,
H\LeadTools\LTDLG.H:// DICOM file subtypes (8-bit)       
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM8_GRAY                  0x0001
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM8_COLOR                 0x0002
H\LeadTools\LTDLG.H:// DICOM file subtypes (Other-bit)   
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_RLE_GRAY               0x0001
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_RLE_COLOR              0x0002
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_JPEG_GRAY              0x0004
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_LOSSLESSJPEG_GRAY      0x0008
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_JPEG_COLOR             0x0010
H\LeadTools\LTDLG.H:#define DLG_FS_SUB_DICOM_LOSSLESSJPEG_COLOR     0x0020
H\LeadTools\LTDLG.H:/* Dialog String Indices */
H\LeadTools\LTDLG.H:   /* dicom */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_COLOR,   /* DICOM Color            */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\LeadTools\LTDLG.H:   DLG_STR_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\LeadTools\LTDLG.H:   DLG_STR_DICOM8,
H\LeadTools\LTDLG.H:   DLG_STR_DICOM16,
H\LeadTools\LTDLG.H:   DLG_STR_DICOM24,
H\LeadTools\LTDLG.H:   /* DICOM file subtypes (8-bit)       */
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_GRAY,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_COLOR,
H\LeadTools\LTDLG.H:   /* DICOM file subtypes (Other-bit)   */
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_RLE_GRAY,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_RLE_COLOR,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_JPEG_GRAY,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_JPEG_COLOR,
H\LeadTools\LTDLG.H:   DLG_STR_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\LeadTools\LTDLG.H:   DLG_STR_EXT_DICOM,
H\LeadTools\LTDLG.H:   DLG_STR_J2KPREDICTABLETERMINATION,
H\LeadTools\LTDLGOCX.H:      DLG_FS_DICOM8,
H\LeadTools\LTDLGOCX.H:      DLG_FS_DICOM16,
H\LeadTools\LTDLGOCX.H:      DLG_FS_DICOM24,
H\LeadTools\LTDLGOCX.H:      /* DICOM file subtypes (8-bit)       */
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM8_GRAY                  = 0x0001,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM8_COLOR                 = 0x0002,
H\LeadTools\LTDLGOCX.H:      /* DICOM file subtypes (Other-bit)   */
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_RLE_GRAY               = 0x0001,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_RLE_COLOR              = 0x0002,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_JPEG_GRAY              = 0x0004,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_LOSSLESSJPEG_GRAY      = 0x0008,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_JPEG_COLOR             = 0x0010,
H\LeadTools\LTDLGOCX.H:       DLG_FS_SUB_DICOM_LOSSLESSJPEG_COLOR     = 0x0020,
H\LeadTools\LTDLGOCX.H:      /* dicom */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_COLOR,   /* DICOM Color            */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_DICOM8,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_DICOM16,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_DICOM24,
H\LeadTools\LTDLGOCX.H:      /* DICOM file subtypes (8-bit)       */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM8_GRAY,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM8_COLOR,
H\LeadTools\LTDLGOCX.H:      /* DICOM file subtypes (Other-bit)   */
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_RLE_GRAY,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_RLE_COLOR,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_JPEG_GRAY,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_JPEG_COLOR,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_EXT_DICOM,
H\LeadTools\LTDLGOCX.H:      DLG_STRING_J2KPREDICTABLETERMINATION,
H\LeadTools\LTDLGRES.H:// DICOM info dialog IDs
H\LeadTools\LTDLGRES.H:#define LT_DLG_DICOMFILEINFO_IDDLG                                   24100
H\LeadTools\LTDLGRES.H:#define LT_DLG_DICOMFILEINFO_IDLST_INFOLIST                          24101
H\LeadTools\LTDLGRES.H:#define LT_DLG_J2KOPTIONS_IDCHK_PREDICTABLETERMINATION               25833
H\LeadTools\ltdncocx.h:      PDU_REJECT_SOURCE_USER             = 1,  // DICOM UL service-user
H\LeadTools\ltdncocx.h:      PDU_REJECT_SOURCE_PROVIDER1        = 2,  // DICOM UL service-provider (ASCE related function)
H\LeadTools\ltdncocx.h:      PDU_REJECT_SOURCE_PROVIDER2        = 3,  // DICOM UL service-provider (Presentation related function)
H\LeadTools\ltdncocx.h:   #define UID_JPEG_LOSSLESS_NONHIER_14B              "1.2.840.10008.1.2.4.70"         // JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])
H\LeadTools\ltdncocx.h:   #define UID_NM_IMAGE_STORAGE_RETIRED               "1.2.840.10008.5.1.4.1.1.5"      // Nuclear Medicine Image Storage (Retired)
H\LeadTools\ltdncocx.h:   #define UID_NM_IMAGE_STORAGE                       "1.2.840.10008.5.1.4.1.1.20"     // Nuclear Medicine Image Storage
H\LeadTools\ltdncocx.h:   #define UID_GE_MAGNETIC_RESONANCE_IMAGE_INFORMATION_OBJECT    "1.2.840.113619.4.2"             // GE Private Dicom Magnetic Resonance Image Information Object
H\LeadTools\ltdncocx.h:   #define UID_GE_COMPUTED_TOMOGRAPHY_IMAGE_INFORMATION_OBJECT   "1.2.840.113619.4.3"             // GE Private Dicom Computed Tomography Image Information Object
H\LeadTools\ltdncocx.h:   #define UID_GE_DISPLAY_IMAGERMATION_INFO_OBJECT               "1.2.840.113619.4.4"             // GE Private Dicom Display Imagermation Info Object
H\LeadTools\ltdncocx.h:      DICOM_SECURE_NONE         =  0xABCD0000,
H\LeadTools\ltdncocx.h:      DICOM_SECURE_ISCL         =  0xABCD0001,
H\LeadTools\ltdncocx.h:      DICOM_SECURE_TLS          =  0xABCD0002,
H\LeadTools\ltdncocx.h:   } DicomSecurityMode;
H\LeadTools\ltdncocx.h:      DICOM_TLS_DHE_RSA_WITH_DES_CBC_SHA        = 0x12,
H\LeadTools\ltdncocx.h:      DICOM_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA   = 0x13,  // mandatory standard
H\LeadTools\ltdncocx.h:   } DicomCiphersuiteConstants;
H\LeadTools\ltdncocx.h:      DICOM_CRYPT_DES   = 0x01,
H\LeadTools\ltdncocx.h:      DICOM_CRYPT_3DES  = 0x02,
H\LeadTools\ltdncocx.h:   } DicomEncryptionMethod;
H\LeadTools\ltdncocx.h:      DICOM_MAC_SHA1  = 0x10,
H\LeadTools\ltdncocx.h:   } DicomMACTypeConstants;
H\LeadTools\ltdncocx.h:      DICOM_MUTUALAUTH_RSA = 0x20,
H\LeadTools\ltdncocx.h:   } DicomMutualAuthMethod;
H\LeadTools\ltdncocx.h:      DICOM_KEYEXCHANGE_RSA_SIGNED_DHE = 0x40,
H\LeadTools\ltdncocx.h:   } DicomKeyExchangeAlgorithm;
H\LeadTools\ltdncocx.h:   } DicomTLSCertType;
H\LeadTools\ltdncocx.h:      DICOM_ISCL_MUTUAL_AUTH_3P4W       =  0x00000000,
H\LeadTools\ltdncocx.h:   } DicomMutualAuthMode;
H\LeadTools\ltdncocx.h:      DICOM_ISCL_ENCRYPT_NONE        =  0x00000000,
H\LeadTools\ltdncocx.h:      DICOM_ISCL_ENCRYPT_DESCBC      =  0x00001212,
H\LeadTools\ltdncocx.h:   } DicomEncryptionMode;
H\LeadTools\ltdncocx.h:      DICOM_ISCL_MAC_NONE               =  0x00000000,
H\LeadTools\ltdncocx.h:      DICOM_ISCL_MAC_MD5                =  0x00001441,
H\LeadTools\ltdncocx.h:      DICOM_ISCL_MAC_DESMAC             =  0x00004001,
H\LeadTools\ltdncocx.h:   } DicomMsgAuthCode;
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR1 = 0x00000001,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR2 = 0x00000002,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR3 = 0x00000003,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR4 = 0x00000004,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR5 = 0x00000005,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR6 = 0x00000006,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR7 = 0x00000007,
H\LeadTools\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR8 = 0x00000008,
H\LeadTools\ltdncocx.h:      DIC_ISCL_UNIQUE_SESSION_KEYS = 0x00000010
H\LeadTools\ltdncocx.h:   } DicomISCLCryptKeyPair;
H\LeadTools\Lterr.h:#define ERROR_MEDICAL_NOT_ENABLED            -314  /* Medical Express capability is required to use this function */
H\LeadTools\Lterr.h:#define ERROR_MEDICAL_NET_NOT_ENABLED        -318  /* Medical Network Express capability is required to use this function */
H\LeadTools\Lterr.h:#define ERROR_DICOM_NOT_ENABLED                 -803  /* DICOM support is required to use this function */
H\LeadTools\Ltfil.h:#define FILE_DICOM_GRAY          89
H\LeadTools\Ltfil.h:#define FILE_DICOM_COLOR         90
H\LeadTools\Ltfil.h:#define FILE_DICOM_RLE_GRAY      125
H\LeadTools\Ltfil.h:#define FILE_DICOM_RLE_COLOR     126
H\LeadTools\Ltfil.h:#define FILE_DICOM_JPEG_GRAY     127
H\LeadTools\Ltfil.h:#define FILE_DICOM_JPEG_COLOR    128
H\LeadTools\Ltfil.h:#define FILE_DICOM_J2K_GRAY         293
H\LeadTools\Ltfil.h:#define FILE_DICOM_J2K_COLOR        294
H\LeadTools\Ltfil.h:   the following indicate the associated strings are nul terminated
H\LeadTools\Ltfil.h:#define CMNT_SZPATIENTNAME          10 /* Patient name (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZPATIENTID            11 /* Patient ID (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZPATIENTBIRTHDATE     12 /* Patient birthdate (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZPATIENTSEX           13 /* Patient sex (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSTUDYINSTANCE        14 /* Study instance ID (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSTUDYDATE            15 /* Study date (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSTUDYTIME            16 /* Study time (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSTUDYREFERRINGPHYSICIAN 17 /* Referring physician (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSERIESMODALITY       18 /* Series modality (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSERIESID             19 /* Series ID (DICOM) */
H\LeadTools\Ltfil.h:#define CMNT_SZSERIESNUMBER         20 /* Series number (DICOM) */
H\LeadTools\Ltfil.h:#define FILEINFO_LOSSLESSJPEG          0x00000400  /* Internal flag, indicating that the JPEG file uses the lossless compression.
H\LeadTools\Ltfil.h:#define ELO_USEBADJPEGPREDICTOR     0x00001000 /* (JPEG only) Load lossless JPEG file using an incorrect predictor */
H\LeadTools\Ltfil.h:   L_UINT   bPredictableTermination:1;
H\LeadTools\Ltfil.h:   L_UINT   uDecompLevel;   // Number of decomposition levels, dyadic decomposition (Zero Implies no transform )
H\LeadTools\Ltfil.h://Flags to indicate if beginning, end of a strip
H\LeadTools\Ltfil.h:   L_UINT           uStripsOrTiles;   // DECOMPRESS_STRIPS -- indicates that we are decompressing strips of data
H\LeadTools\Ltfil.h:                                      // DECOMPRESS_TILES  -- indicates that we are decompressing tiles of data
H\LeadTools\ltkey.h:#define L_KEY_MEDICAL            MYTEXT("")
H\LeadTools\ltkey.h:#define L_KEY_MEDICAL_NET        MYTEXT("")
H\LeadTools\ltkey.h:#define L_KEY_DICOM              MYTEXT("")
H\LeadTools\ltkey.h:#define L_KEY_MEDICAL_SECURITY   MYTEXT("")
H\LeadTools\Ltkrn.h:#define TOOLKIT_LEVEL_MEDICAL        0x02 /* Medical Toolkit. */
H\LeadTools\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL, L_KEY_MEDICAL); \
H\LeadTools\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL_NET, L_KEY_MEDICAL_NET); \
H\LeadTools\LTLCK.H:   L_UnlockSupport(L_SUPPORT_DICOM, L_KEY_DICOM);\
H\LeadTools\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL_SECURITY, L_KEY_MEDICAL_SECURITY);\
H\LeadTools\ltlck_.h:#define L_SUPPORT_MEDICAL              6
H\LeadTools\ltlck_.h:#define L_SUPPORT_MEDICAL_NET          8
H\LeadTools\ltlck_.h:#define L_SUPPORT_DICOM                26
H\LeadTools\ltlck_.h:#define L_SUPPORT_MEDICAL_SECURITY     29
H\LeadTools\LTOCR.h:   LANG_PACK_ID_GREENLANDIC  =62,
H\LeadTools\LTOCR.h:   LANG_PACK_ID_ICELANDIC    =64,
H\LeadTools\LTSCR.H:   L_BOOL bCaptureByIndex,                 //TRUE indicates that pResID is the index position of the
H\LeadTools\LTSCR.H:                                          //FALSE indicates that pResID is the resource ID of the 
H\LeadTools\lttmb.h:#define BROWSE_LOADING 2 /* used to indicate image is being loaded */
H\LeadTools\lttmb.h:#define BROWSE_SKIPPED 3 /* used to indicate image was skipped b/c
H\LeadTools\lttmb.h:#define BROWSE_PRELOAD 4 /* used to indicate image is about to be
H\LeadTools\lttmbocx.h:      BROWSE_LOADING = 2, // used to indicate image is being loaded
H\LeadTools\lttmbocx.h:      BROWSE_SKIPPED = 3, // used to indicate image was skipped b/c it was larger than the specified range
H\LeadTools\lttmbocx.h:      BROWSE_PRELOAD = 4, // used to indicate image is about to be loaded
H\LeadTools\Lttwn.h:#define TWAIN_SHOWSTATUS           0x0002 /* Show the Status Indicator, if it
H\LeadTools\ltvecocx.h:#define FILE_DICOM_GRAY          89
H\LeadTools\ltvecocx.h:#define FILE_DICOM_COLOR         90
H\LeadTools\ltvecocx.h:#define FILE_DICOM_RLE_GRAY      125
H\LeadTools\ltvecocx.h:#define FILE_DICOM_RLE_COLOR     126
H\LeadTools\ltvecocx.h:#define FILE_DICOM_JPEG_GRAY     127
H\LeadTools\ltvecocx.h:#define FILE_DICOM_JPEG_COLOR    128
H\LeadTools\Ltwnd.h:#define L_BS_MDICHILD     0x00000100   /* The Window is an MDI Child */
H\LeadTools\lvdlg.h:/* Dialog String Indices */
H\LeadTools\l_bitmap.h:#include "ltdic.h"
H\LeadTools\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL, L_KEY_MEDICAL); \
H\LeadTools\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL_NET, L_KEY_MEDICAL_NET); \
H\LeadTools\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_DICOM,   L_KEY_DICOM); \
H\LeadTools\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL_SECURITY, L_KEY_MEDICAL_SECURITY); \
H\LeadTools\L_FOX.H:#DEFINE VERSIONLEVEL_MEDICAL 2
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_GRAY 89
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_COLOR 90
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_RLE_GRAY      125
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_RLE_COLOR     126
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_JPEG_GRAY     127
H\LeadTools\L_FOX.H:#DEFINE FILE_DICOM_JPEG_COLOR    128
H\LeadTools\L_FOX.H:#DEFINE ERROR_MEDICAL_NOT_ENABLED 20314
H\LeadTools\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL 6
H\LeadTools\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL_NET 8
H\LeadTools\L_FOX.H:#DEFINE L_SUPPORT_DICOM               26
H\LeadTools\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL_SECURITY    29
H\LeadTools\L_FOX.H:#DEFINE L_KEY_MEDICAL            ""
H\LeadTools\L_FOX.H:#DEFINE L_KEY_MEDICAL_NET        ""
H\LeadTools\L_FOX.H:#DEFINE L_KEY_DICOM              ""
H\LeadTools\L_FOX.H:#DEFINE L_KEY_MEDICAL_SECURITY   ""
H\LeadTools\L_FOX.H:#DEFINE DLG_FS_DICOM (4 * 16)
H\LeadTools\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_MEDICAL            , L_KEY_MEDICAL           ); \
H\LeadTools\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_MEDICAL_NET        , L_KEY_MEDICAL_NET       ); \
H\LeadTools\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_DICOM              , L_KEY_DICOM             ); \
H\LeadTools\L_OCX40.H:      VERSIONLEVEL_MEDICAL = 2,
H\LeadTools\L_OCX40.H:      FILE_DICOM_GRAY = 89,
H\LeadTools\L_OCX40.H:      FILE_DICOM_COLOR = 90,
H\LeadTools\L_OCX40.H:      FILE_DICOM_RLE_GRAY = 125,
H\LeadTools\L_OCX40.H:      FILE_DICOM_RLE_COLOR = 126,
H\LeadTools\L_OCX40.H:      FILE_DICOM_JPEG_GRAY = 127,
H\LeadTools\L_OCX40.H:      FILE_DICOM_JPEG_COLOR = 128,
H\LeadTools\L_OCX40.H:      L_SUPPORT_MEDICAL,
H\LeadTools\L_OCX40.H:      L_SUPPORT_MEDICAL_NET,
H\LeadTools\L_OCX40.H:      L_SUPPORT_DICOM,
H\LeadTools\L_OCX40.H:      L_SUPPORT_MEDICAL_SECURITY,
H\LeadTools\L_OcxErr.h:   #define ERROR_MEDICAL_NOT_ENABLED 20314
H\LeadTools\L_OcxErr.h:   #define ERROR_MEDICAL_NET_NOT_ENABLED 20318
H\LeadTools\L_OcxErr.h:   #define ERROR_DICOM_NOT_ENABLED                 20803  /* Dicom support is required to use this function */
H\LeadTools\twain.h:/* DAT_PENDINGXFERS. Used with MSG_ENDXFER to indicate additional data. */
H\LeadTools\twain.h:#define TWON_ARRAY           3 /* indicates TW_ARRAY container       */
H\LeadTools\twain.h:#define TWON_ENUMERATION     4 /* indicates TW_ENUMERATION container */
H\LeadTools\twain.h:#define TWON_ONEVALUE        5 /* indicates TW_ONEVALUE container    */
H\LeadTools\twain.h:#define TWON_RANGE           6 /* indicates TW_RANGE container       */
H\LeadTools\twain.h:#define TWLG_ICE              7 /* Icelandic              */
H\LeadTools\twain.h:#define TWLG_ICELANDIC            TWLG_ICE
H\LeadTools\twain.h:#define CAP_INDICATORS              0x100b   /* Added 1.1 */
H\libfile.h:	BOOL	m_bCreate;					// flag indicating we're creating this library
H\libfile.h:	BOOL	m_HeaderChanged;			// flag indicating need to rewrite file header
H\libio.h:// Changed prototypes to indicate far pointers to YZNAME structures.
H\Ltann.h:L_INT EXT_FUNCTION L_AnnShowLockedIcon (HANNOBJECT hObject,
H\ltclr.h:                       /* which will indicate what is the arrangement of the YUV      */
H\LTDIC.H://  LTDic : Header file.
H\LTDIC.H:#ifndef LTDIC_H_INCLUDED
H\LTDIC.H:#define LTDIC_H_INCLUDED
H\LTDIC.H:   #ifdef _LEAD_DICOM_NO_EXP_IMP
H\LTDIC.H:      #define  DICOM_EXPORT      
H\LTDIC.H:   #ifdef _LEAD_DICOM_
H\LTDIC.H:         #define  DICOM_EXPORT 
H\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllexport)
H\LTDIC.H:         #define  DICOM_EXPORT 
H\LTDIC.H:         #define  DICOM_EXPORT __declspec(dllimport)
H\LTDIC.H:   #endif //_LEAD_DICOM_NO_EXP_IMP
H\LTDIC.H:#define DICOM_SUCCESS                            0
H\LTDIC.H:#define DICOM_ERROR_LOCKED                       1
H\LTDIC.H:#define DICOM_ERROR_MEMORY                       2
H\LTDIC.H:#define DICOM_ERROR_OPEN                         3
H\LTDIC.H:#define DICOM_ERROR_READ                         4
H\LTDIC.H:#define DICOM_ERROR_WRITE                        5
H\LTDIC.H:#define DICOM_ERROR_SEEK                         6
H\LTDIC.H:#define DICOM_ERROR_END                          7
H\LTDIC.H:#define DICOM_ERROR_FORMAT                       8
H\LTDIC.H:#define DICOM_ERROR_PARAMETER                    9
H\LTDIC.H:#define DICOM_ERROR_IMAGE                       10
H\LTDIC.H:#define DICOM_ERROR_COMPRESSION                 11
H\LTDIC.H:#define DICOM_ERROR_PHOTOMETRIC                 12
H\LTDIC.H:#define DICOM_ERROR_CONVERSION                  13
H\LTDIC.H:#define DICOM_ERROR_RANGE                       14
H\LTDIC.H:#define DICOM_ERROR_BITSPERPIXEL                15
H\LTDIC.H:#define DICOM_ERROR_QFACTOR                     16
H\LTDIC.H:#define DICOM_ERROR_ELEMENT_LENGTH_ODD          100
H\LTDIC.H:#define DICOM_ERROR_DICOMDIR_FOLDER             200
H\LTDIC.H:#define DICOM_ERROR_FILE                        201
H\LTDIC.H:#define DICOM_ERROR_FILEID                      202
H\LTDIC.H:#define DICOM_ERROR_J2K_LOCKED                  203
H\LTDIC.H:#define DICOM_ERROR_PDU_TYPE                    17
H\LTDIC.H:#define DICOM_ERROR_PDU_LENGTH                  18
H\LTDIC.H:#define DICOM_ERROR_PDU_ID                      19
H\LTDIC.H:#define DICOM_ERROR_NET_FAILURE                 29
H\LTDIC.H:#define DICOM_ERROR_NET_ACCESS                  30  // The address is a broadcast address
H\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_IN_USE          31  // The address is already in use
H\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_AVAILABLE   32  // The address is not available from the local computer
H\LTDIC.H:#define DICOM_ERROR_NET_ADDRESS_NOT_SUPPORTED   33  // The address family is not supported
H\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_ABORTED      34  // The virtual circuit was aborted
H\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_REFUSED      35  // The attempt to connect was forcefully rejected
H\LTDIC.H:#define DICOM_ERROR_NET_CONNECTION_RESET        36  // The virtual circuit was reset by the remote side
H\LTDIC.H:#define DICOM_ERROR_NET_DESTINATION_REQUIRED    37  // A destination address is required
H\LTDIC.H:#define DICOM_ERROR_NET_ARGUMENT_INCORRECT      38  // The namelen argument is incorrect
H\LTDIC.H:#define DICOM_ERROR_NET_IN_PROGRESS             39  // A blocking operation is in progress
H\LTDIC.H:#define DICOM_ERROR_NET_BLOCKING_CANCELED       40  // The blocking call was canceled
H\LTDIC.H:#define DICOM_ERROR_NET_INVALID                 41  // The socket has not been bound with bind
H\LTDIC.H:#define DICOM_ERROR_NET_IS_CONNECTED            42  // The socket is already connected
H\LTDIC.H:#define DICOM_ERROR_NET_NO_MORE_FILE            43  // No more file descriptors are available
H\LTDIC.H:#define DICOM_ERROR_NET_MESSAGE_SIZE            44  // The datagram is larger than the maximum supported
H\LTDIC.H:#define DICOM_ERROR_NET_DOWN                    45  // The network subsystem has failed
H\LTDIC.H:#define DICOM_ERROR_NET_RESET                   46  // The connection must be reset
H\LTDIC.H:#define DICOM_ERROR_NET_UN_REACH                47  // The network can't be reached from this host at this time
H\LTDIC.H:#define DICOM_ERROR_NET_NO_BUFFERS              48  // No buffer space is available
H\LTDIC.H:#define DICOM_ERROR_NET_NOT_CONNECTED           49  // The socket is not connected
H\LTDIC.H:#define DICOM_ERROR_NET_NOT_SOCKET              50  // The descriptor is not a socket
H\LTDIC.H:#define DICOM_ERROR_NET_OPERATION_NOT_SUPPORTED 51  // The type does not support connection-oriented service
H\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_NOT_SUPPORTED  52  // The specified protocol is not supported
H\LTDIC.H:#define DICOM_ERROR_NET_PROTOCOL_TYPE           53  // The specified protocol is the wrong type
H\LTDIC.H:#define DICOM_ERROR_NET_SHUTDOWN                54  // The socket has been shut down
H\LTDIC.H:#define DICOM_ERROR_NET_SOCKET_NOT_SUPPORTED    55  // The type is not supported in this address family
H\LTDIC.H:#define DICOM_ERROR_NET_TIME_OUT                56  // Attempt to connect timed out without establishing a connection
H\LTDIC.H:#define DICOM_ERROR_NET_WOULD_BLOCK             57  // The socket is marked as nonblocking and the requested operation would block
H\LTDIC.H:#define DICOM_ERROR_NET_HOST_NOT_FOUND          58  // Authoritative Answer Host not found
H\LTDIC.H:#define DICOM_ERROR_NET_NO_DATA                 59  // Valid name, no data record of requested type
H\LTDIC.H:#define DICOM_ERROR_NET_NO_RECOVERY             60  // Nonrecoverable errors
H\LTDIC.H:#define DICOM_ERROR_NET_NOT_INITIALISED         61  // The system was not initialized
H\LTDIC.H:#define DICOM_ERROR_NET_SYSTEM_NOT_READY        62  // Not ready for network communication
H\LTDIC.H:#define DICOM_ERROR_NET_TRY_AGAIN               63  // Non-Authoritative Host not found, or server faild
H\LTDIC.H:#define DICOM_ERROR_NET_VERSION_NOT_SUPPORTED   64  // The version requested is not provided by this implementation
H\LTDIC.H:#define DICOM_ERROR_NET_SECURITY_BREACH         65  // There is an cryptographic error. 
H\LTDIC.H:      // Call LDicomNet::GetStatusISCL or LDicomNet::GetStatusTLS for the description of internal status
H\LTDIC.H:      // before error, and LDicomNet::GetErrorSecure for the description of the error
H\LTDIC.H:#define DICOM_ERROR_TLS                         66  // TLS internal error
H\LTDIC.H:#define DICOM_ERROR_SECURITY_LOCKED             67  // DICOM Security Features are locked
H\LTDIC.H:#define DICOM_ERROR_TLS_DLL_NOT_LOADED          68  // TLS and/or CRY DLL not loaded
H\LTDIC.H:#define DICOM_ERROR_BAD_SECURE_MODE             69  // if I do ISCL operations on TLS objects
H\LTDIC.H:#define DICOM_ERROR_ANN                         70
H\LTDIC.H:#define DICOM_ERROR_ANN_LOCKED                  71  // Annotation support is locked
H\LTDIC.H:#define DICOM_ERROR_ANN_MISSING                 72  // Annotation dll is missing
H\LTDIC.H:#define DICOM_ERROR_TAG_ALREADY_EXISTS          73  // LEAD private creator element already exists
H\LTDIC.H:#define DICOM_ERROR_ANN_NO_EXIST                74  // Requested annotation file or page does not exist
H\LTDIC.H:#define DICOM_SECURE_NONE  0xABCD0000
H\LTDIC.H:#define DICOM_SECURE_ISCL  0xABCD0001
H\LTDIC.H:#define DICOM_SECURE_TLS   0xABCD0002
H\LTDIC.H:#define DICOM_ERROR_TLS_OK                      0
H\LTDIC.H:#define DICOM_ERROR_TLS_CLOSE_NOTIFY            128
H\LTDIC.H:#define DICOM_ERROR_TLS_UNEXPECTED_MESSAGE      129
H\LTDIC.H:#define DICOM_ERROR_TLS_BAD_RECORD_MAC          130
H\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_FAILED          131
H\LTDIC.H:#define DICOM_ERROR_TLS_RECORD_OVERFLOW         132
H\LTDIC.H:#define DICOM_ERROR_TLS_DECOMPRESSION_FAILURE   133
H\LTDIC.H:#define DICOM_ERROR_TLS_HANDSHAKE_FAILURE       134
H\LTDIC.H:#define DICOM_ERROR_TLS_BAD_CERTIFICATE         135
H\LTDIC.H:#define DICOM_ERROR_TLS_UNSUPPORTED_CERTIFICATE 136
H\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_REVOKED     137
H\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_EXPIRED     138
H\LTDIC.H:#define DICOM_ERROR_TLS_CERTIFICATE_UNKNOWN     139
H\LTDIC.H:#define DICOM_ERROR_TLS_ILLEGAL_PARAMETER       140
H\LTDIC.H:#define DICOM_ERROR_TLS_UNKNOWN_CA              141
H\LTDIC.H:#define DICOM_ERROR_TLS_ACCESS_DENIED           142
H\LTDIC.H:#define DICOM_ERROR_TLS_DECODE_ERROR            143
H\LTDIC.H:#define DICOM_ERROR_TLS_DECRYPT_ERROR           144
H\LTDIC.H:#define DICOM_ERROR_TLS_EXPORT_RESTRICTION      145
H\LTDIC.H:#define DICOM_ERROR_TLS_PROTOCOL_VERSION        146
H\LTDIC.H:#define DICOM_ERROR_TLS_INSUFFICIENT_SECURITY   147
H\LTDIC.H:#define DICOM_ERROR_TLS_INTERNAL_ERROR          148
H\LTDIC.H:#define DICOM_ERROR_TLS_USER_CANCELED           149
H\LTDIC.H:#define DICOM_ERROR_TLS_NO_RENEGOTIATION        150
H\LTDIC.H:#define DICOM_ERROR_TLS_NO_KEEPALIVE            151
H\LTDIC.H:#define DICOM_ERROR_TLS_CLOSED_CONTROLLED       152
H\LTDIC.H:typedef enum _DICOM_TLS_ERRORS DICOM_TLS_ERRORS;
H\LTDIC.H:#define DICOM_ISCL_MAX_PACKET_SIZE        (8160)     // set with manual values
H\LTDIC.H:#define DICOM_ISCL_MAX_MESSAGE_SIZE       (1048576)   // set with manual values
H\LTDIC.H:#define DICOM_ISCL_ACK                    0x00000000
H\LTDIC.H:#define DICOM_ISCL_NAK                    0xFFFFFFFF
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_3P4W       0x00000000  // three pass four way mutual auth
H\LTDIC.H:#define DICOM_ISCL_ENCRYPT_NONE           0x00000000
H\LTDIC.H:#define DICOM_ISCL_ENCRYPT_DESCBC         0x00001212
H\LTDIC.H:#define DICOM_ISCL_MAC_NONE               0x00000000
H\LTDIC.H:#define DICOM_ISCL_MAC_MD5                0x00001441
H\LTDIC.H:#define DICOM_ISCL_MAC_DESMAC             0x00004001
H\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RQ     0x00110001  // RQ - request, RP - response
H\LTDIC.H:#define DICOM_ISCL_LINE_CONNECTION_CHECK_RP     0x00110003
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RQ               0x00120001
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_RP               0x00120003
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS1_NOTIF      0x00130002
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS2_NOTIF      0x00140002
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_PASS3_NOTIF      0x00150002
H\LTDIC.H:#define DICOM_ISCL_MUTUAL_AUTH_COMPLETION_NOTIF 0x00160002
H\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RQ      0x00200001
H\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_RP      0x00200003
H\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RQ     0x00210001
H\LTDIC.H:#define DICOM_ISCL_RNDNO_FOR_SESSION_KEY_RP     0x00210003
H\LTDIC.H:#define DICOM_ISCL_MESSAGE_TRANSMISSION_NOTIF   0x00200002
H\LTDIC.H:#define DICOM_ISCL_MAC_TRANSMISSION_NOTIF       0x00230002
H\LTDIC.H:#define DICOM_ISCL_THROUGH_MODE_TRANSMISSION_NOTIF 0x00260002
H\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RQ        0x00FF0001
H\LTDIC.H:#define DICOM_ISCL_LINE_DISCONNECTION_RP        0x00FF0003
H\LTDIC.H:enum DICOM_ISCLAuthKeyPair
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR1 = 0x00000001,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR2 = 0x00000002,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR3 = 0x00000003,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR4 = 0x00000004,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR5 = 0x00000005,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR6 = 0x00000006,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR7 = 0x00000007,
H\LTDIC.H:   DICOM_ISCL_AUTH_KEY_PAIR8 = 0x00000008
H\LTDIC.H:enum DICOM_ISCLCryptKeyPair
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR1 = 0x00000001,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR2 = 0x00000002,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR3 = 0x00000003,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR4 = 0x00000004,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR5 = 0x00000005,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR6 = 0x00000006,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR7 = 0x00000007,
H\LTDIC.H:   DICOM_ISCL_CRYPT_KEY_PAIR8 = 0x00000008,
H\LTDIC.H:   DICOM_ISCL_UNIQUE_SESSION_KEYS = 0x00000010
H\LTDIC.H:struct DICOM_ISCLMessageHeader
H\LTDIC.H:   L_UINT32 Indicator;    // not used
H\LTDIC.H:#define DICOM_ERROR_ISCL_OK                      0 // start of ISCL errors
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_OPTION             100 // option not expected or unknown
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_LENGTH             101 // the length of the message differ of the expected length
H\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_ICCARD           102 // local error on Id card
H\LTDIC.H:#define DICOM_ERROR_ISCL_REMOTE_ICCARD          103 // error on Id card level at peer
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MSGID              104 // message id not expected or unknown
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_VERSION            105 // not MEDIS-ISCL V1.00
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MUTUAL_AUTH_METHOD 106 // mutual auth not 3pass 4way
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_COMMBLOCK_LENGTH   107 // if the comm block length is too big
H\LTDIC.H:#define DICOM_ERROR_ISCL_RECEIVED_NAK           108 // when the peer sent option = NAK in general cases, there are some special cases
H\LTDIC.H:#define DICOM_ERROR_ISCL_MSG_TRANSMISSION       109 // bad encryption method or MAC method
H\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_SMALL_LENGTH      110 // message length of the peer is too small
H\LTDIC.H:#define DICOM_ERROR_ISCL_LOCAL_SMALL_LENGTH     111 // peer want to send a message bigger than local MaxMessageLength
H\LTDIC.H:#define DICOM_ERROR_ISCL_DECRYPT                112 // error during decryption - decryption generate bad result
H\LTDIC.H:#define DICOM_ERROR_ISCL_BAD_MAC                113 // wrong message authentication code
H\LTDIC.H:#define DICOM_ERROR_ISCL_RND_NO_FOR_SESSION_KEY_EXPECTED 114  // only when the receiver expect to receive a "Random number for session key" request
H\LTDIC.H:                                          // when appears, the sender must be set to "SetSecurity(DICOM_ISCL_UNIQUE_SESSION_KEYS)"
H\LTDIC.H:#define DICOM_ERROR_ISCL_PEER_REFUSE_CLOSE      115 // when the peer does not accept the closing of connection
H\LTDIC.H:#define DICOM_FILE_OPEN       0x0000
H\LTDIC.H:#define DICOM_FILE_CREATE     0x0001
H\LTDIC.H:#define DICOM_FILE_READ       0x0002
H\LTDIC.H:#define DICOM_FILE_WRITE      0x0004
H\LTDIC.H:#define DICOM_FILE_TEMPORARY  0x0008
H\LTDIC.H:#define DICOM_FILE_MEMORY     0x0010
H\LTDIC.H:#define DICOM_FILE_REDIRECT   0x0020
H\LTDIC.H:#define DICOM_FILE_CLOSE      0x0040
H\LTDIC.H:#define DICOM_FILE_DELETE     0x0080
H\LTDIC.H:#define DICOM_FILE_BEGIN      0
H\LTDIC.H:#define DICOM_FILE_CURRENT    1
H\LTDIC.H:#define DICOM_FILE_END        2
H\LTDIC.H:class DICOM_EXPORT LDicomFile
H\LTDIC.H:   LDicomFile();
H\LTDIC.H:   ~LDicomFile();
H\LTDIC.H:#define GENERICLINK  pDICOMLINK pParent;     \
H\LTDIC.H:                     pDICOMLINK pFirstChild; \
H\LTDIC.H:                     pDICOMLINK pLastChild;  \
H\LTDIC.H:                     pDICOMLINK pPrev;       \
H\LTDIC.H:                     pDICOMLINK pNext;       \
H\LTDIC.H:typedef struct _DICOMLINK *pDICOMLINK;
H\LTDIC.H:class DICOM_EXPORT LDicomTree
H\LTDIC.H:   LDicomTree();
H\LTDIC.H:   ~LDicomTree();
H\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LTDIC.H:   pDICOMLINK  GetRoot   (pDICOMLINK pLink);
H\LTDIC.H:   pDICOMLINK  GetParent (pDICOMLINK pLink);
H\LTDIC.H:   pDICOMLINK  GetChild  (pDICOMLINK pLink);
H\LTDIC.H:   pDICOMLINK  GetFirst  (pDICOMLINK pLink, L_BOOL bTree);
H\LTDIC.H:   pDICOMLINK  GetLast   (pDICOMLINK pLink, L_BOOL bTree);
H\LTDIC.H:   pDICOMLINK  GetPrev   (pDICOMLINK pLink, L_BOOL bTree);
H\LTDIC.H:   pDICOMLINK  GetNext   (pDICOMLINK pLink, L_BOOL bTree);
H\LTDIC.H:   L_UINT32    GetLevel  (pDICOMLINK pLink);
H\LTDIC.H:   L_UINT32    GetCount  (pDICOMLINK pLink, L_BOOL bTree);
H\LTDIC.H:   pDICOMLINK  FindIndex (pDICOMLINK pLink, L_BOOL bTree, L_UINT32 nIndex);
H\LTDIC.H:   L_BOOL      Exists    (pDICOMLINK pLink);
H\LTDIC.H:   pDICOMLINK  Verify    ();
H\LTDIC.H:   pDICOMLINK m_pFirstChild;
H\LTDIC.H:   pDICOMLINK m_pLastChild;
H\LTDIC.H:class DICOM_EXPORT LDicomTreeEx : public LDicomTree
H\LTDIC.H:   LDicomTreeEx();
H\LTDIC.H:   ~LDicomTreeEx();
H\LTDIC.H:   pDICOMLINK  Insert    (pDICOMLINK pNeighbor, L_UINT32 nSize, L_UINT16 nFlags);
H\LTDIC.H:   L_VOID      Delete    (pDICOMLINK pLink);
H\LTDIC.H:   VR_FIXED = 0,           // DICOMVR.nLength bytes fixed
H\LTDIC.H:   VR_MAXIMUM,             // DICOMVR.nLength bytes maximum
H\LTDIC.H:   VR_MAXIMUM_GROUP,       // DICOMVR.nLength maximum per component group
H\LTDIC.H:   VR_ANY,                 // DICOMVR.nLength any length valid for any of the other DICOM Value Representations
H\LTDIC.H:   VR_NOT_APPLICABLE,      // DICOMVR.nLength not applicable
H\LTDIC.H://typedef struct _DICOMVR DICOMVR, *pDICOMVR;
H\LTDIC.H:typedef struct _DICOMVR
H\LTDIC.H:} DICOMVR, *pDICOMVR;
H\LTDIC.H:class DICOM_EXPORT LDicomVR
H\LTDIC.H:   static pDICOMVR Insert    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LTDIC.H:   static pDICOMVR Delete    (pDICOMVR pVR);
H\LTDIC.H:   static pDICOMVR GetFirst  ();
H\LTDIC.H:   static pDICOMVR GetLast   ();
H\LTDIC.H:   static pDICOMVR GetPrev   (pDICOMVR pVR);
H\LTDIC.H:   static pDICOMVR GetNext   (pDICOMVR pVR);
H\LTDIC.H:   static L_BOOL   Exists    (pDICOMVR pVR);
H\LTDIC.H:   static pDICOMVR Find      (L_UINT16 nCode);
H\LTDIC.H:   static pDICOMVR FindIndex (L_UINT32 nIndex);
H\LTDIC.H:   static L_BOOL   SetName   (pDICOMVR pVR, L_CHAR *pszName);
H\LTDIC.H:   static LDicomTreeEx m_InfoVR;
H\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomDefaultVR   ();
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomInsertVR    (L_UINT16 nCode, L_CHAR *pszName, L_UINT32 nLength, L_UINT16 nRestrict, L_UINT16 nUnitSize);
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomDeleteVR    (pDICOMVR pVR);
H\LTDIC.H:L_VOID   EXT_FUNCTION L_DicomResetVR     ();
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetFirstVR  ();
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetLastVR   ();
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetPrevVR   (pDICOMVR pVR);
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomGetNextVR   (pDICOMVR pVR);
H\LTDIC.H:L_UINT32 EXT_FUNCTION L_DicomGetCountVR  ();
H\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomExistsVR    (pDICOMVR pVR);
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindVR      (L_UINT16 nCode);
H\LTDIC.H:pDICOMVR EXT_FUNCTION L_DicomFindIndexVR (L_UINT32 nIndex);
H\LTDIC.H:L_BOOL   EXT_FUNCTION L_DicomSetNameVR   (pDICOMVR pVR, L_CHAR *pszName);
H\LTDIC.H://typedef struct _DICOMUID DICOMUID, *pDICOMUID;
H\LTDIC.H:typedef struct _DICOMUID
H\LTDIC.H:} DICOMUID, *pDICOMUID;
H\LTDIC.H:class DICOM_EXPORT LDicomUID
H\LTDIC.H:   static pDICOMUID Insert    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LTDIC.H:   static pDICOMUID Delete    (pDICOMUID pUID);
H\LTDIC.H:   static pDICOMUID GetFirst  ();
H\LTDIC.H:   static pDICOMUID GetLast   ();
H\LTDIC.H:   static pDICOMUID GetPrev   (pDICOMUID pUID);
H\LTDIC.H:   static pDICOMUID GetNext   (pDICOMUID pUID);
H\LTDIC.H:   static L_BOOL    Exists    (pDICOMUID pUID);
H\LTDIC.H:   static pDICOMUID Find      (L_CHAR *pszCode);
H\LTDIC.H:   static pDICOMUID FindIndex (L_UINT32 nIndex);
H\LTDIC.H:   static L_BOOL    SetName   (pDICOMUID pUID, L_CHAR *pszName);
H\LTDIC.H:   static LDicomTreeEx m_InfoUID;
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultUID   ();
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomInsertUID    (L_CHAR *pszCode, L_CHAR *pszName, L_INT nType);
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomDeleteUID    (pDICOMUID pUID);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetUID     ();
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetFirstUID  ();
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetLastUID   ();
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetPrevUID   (pDICOMUID pUID);
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomGetNextUID   (pDICOMUID pUID);
H\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountUID  ();
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsUID    (pDICOMUID pUID);
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindUID      (L_CHAR *pszCode);
H\LTDIC.H:pDICOMUID EXT_FUNCTION L_DicomFindIndexUID (L_UINT32 nIndex);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameUID   (pDICOMUID pUID, L_CHAR *pszName);
H\LTDIC.H://typedef struct _DICOMTAG DICOMTAG, *pDICOMTAG;
H\LTDIC.H:typedef struct _DICOMTAG
H\LTDIC.H:} DICOMTAG, *pDICOMTAG;
H\LTDIC.H:class DICOM_EXPORT LDicomTag
H\LTDIC.H:   static pDICOMTAG Insert    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LTDIC.H:   static pDICOMTAG Delete    (pDICOMTAG pTag);
H\LTDIC.H:   static pDICOMTAG GetFirst  ();
H\LTDIC.H:   static pDICOMTAG GetLast   ();
H\LTDIC.H:   static pDICOMTAG GetPrev   (pDICOMTAG pTag);
H\LTDIC.H:   static pDICOMTAG GetNext   (pDICOMTAG pTag);
H\LTDIC.H:   static L_BOOL    Exists    (pDICOMTAG pTag);
H\LTDIC.H:   static pDICOMTAG Find      (L_UINT32 nCode);
H\LTDIC.H:   static pDICOMTAG FindIndex (L_UINT32 nIndex);
H\LTDIC.H:   static L_BOOL    SetName   (pDICOMTAG pTag, L_CHAR *pszName);
H\LTDIC.H:   static LDicomTreeEx m_InfoTag;
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultTag   ();
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomInsertTag    (L_UINT32 nCode, L_UINT32 nMask, L_CHAR *pszName, L_UINT16 nVR, L_UINT32 nMinVM, L_UINT32 nMaxVM, L_UINT32 nDivideVM);
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomDeleteTag    (pDICOMTAG pTag);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetTag     ();
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetFirstTag  ();
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetLastTag   ();
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetPrevTag   (pDICOMTAG pTag);
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomGetNextTag   (pDICOMTAG pTag);
H\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountTag  ();
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsTag    (pDICOMTAG pTag);
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindTag      (L_UINT32 nCode);
H\LTDIC.H:pDICOMTAG EXT_FUNCTION L_DicomFindIndexTag (L_UINT32 nIndex);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameTag   (pDICOMTAG pTag, L_CHAR *pszName);
H\LTDIC.H:#define TAG_NUCLEAR_MEDICINE_SERIES_TYPE_RETIRED                   0x00080042UL
H\LTDIC.H:#define TAG_MEDICAL_RECORD_LOCATOR                                 0x00101090UL
H\LTDIC.H:#define TAG_MEDICAL_ALERTS                                         0x00102000UL
H\LTDIC.H:#define TAG_POSITION_REFERENCE_INDICATOR                           0x00201040UL
H\LTDIC.H:#define TAG_PRE_MEDICATION                                         0x00400012UL
H\LTDIC.H://typedef struct _DICOMIOD DICOMIOD, *pDICOMIOD;
H\LTDIC.H:typedef struct _DICOMIOD
H\LTDIC.H:} DICOMIOD, *pDICOMIOD;
H\LTDIC.H:class DICOM_EXPORT LDicomIOD
H\LTDIC.H:   static pDICOMIOD Insert          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LTDIC.H:   static pDICOMIOD Delete          (pDICOMIOD pIOD);
H\LTDIC.H:   static pDICOMIOD GetRoot         (pDICOMIOD pIOD);
H\LTDIC.H:   static pDICOMIOD GetParent       (pDICOMIOD pIOD);
H\LTDIC.H:   static pDICOMIOD GetChild        (pDICOMIOD pIOD);
H\LTDIC.H:   static pDICOMIOD GetFirst        (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:   static pDICOMIOD GetLast         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:   static pDICOMIOD GetPrev         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:   static pDICOMIOD GetNext         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:   static L_BOOL    Exists          (pDICOMIOD pIOD);
H\LTDIC.H:   static pDICOMIOD Find            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LTDIC.H:   static pDICOMIOD FindClass       (L_UINT32 nClass);
H\LTDIC.H:   static pDICOMIOD FindModule      (L_UINT32 nClass, L_UINT32 nModule);
H\LTDIC.H:   static pDICOMIOD FindIndexModule (L_UINT32 nClass, L_UINT32 nIndex);
H\LTDIC.H:   static L_BOOL    SetName         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LTDIC.H:   static L_BOOL    SetDescription  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LTDIC.H:   static LDicomTreeEx m_InfoIOD;
H\LTDIC.H:   static L_VOID    Default         (pDICOMIOD pIOD, L_VOID *pReference);
H\LTDIC.H:   static pDICOMIOD FindInClass     (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultIOD         ();
H\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomSetMemoryAllocation(L_UINT16 nType);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomInsertIOD          (pDICOMIOD pNeighbor, L_BOOL bChild, L_UINT32 nCode, L_CHAR  *pszName, L_CHAR nType, L_UINT16 nUsage, L_CHAR *pszDescription);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomDeleteIOD          (pDICOMIOD pIOD);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetIOD           ();
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetRootIOD         (pDICOMIOD pIOD);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetParentIOD       (pDICOMIOD pIOD);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetChildIOD        (pDICOMIOD pIOD);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetFirstIOD        (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetLastIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetPrevIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomGetNextIOD         (pDICOMIOD pIOD, L_BOOL bTree);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomExistsIOD          (pDICOMIOD pIOD);
H\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetCountModuleIOD  (L_UINT32 nClass);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIOD            (pDICOMIOD pIOD, L_UINT32 nCode, L_CHAR nType, L_BOOL bTree);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindClassIOD       (L_UINT32 nClass);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindModuleIOD      (L_UINT32 nClass, L_UINT32 nModule);
H\LTDIC.H:pDICOMIOD EXT_FUNCTION L_DicomFindIndexModuleIOD (L_UINT32 nClass, L_UINT32 nIndex);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetNameIOD         (pDICOMIOD pIOD, L_CHAR *pszName);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomSetDescriptionIOD  (pDICOMIOD pIOD, L_CHAR *pszDescription);
H\LTDIC.H:   MODULE_PATIENT_MEDICAL,
H\LTDIC.H:#define DS_PREFIX                      "DICM"
H\LTDIC.H://typedef struct _DICOMELEMENT DICOMELEMENT, *pDICOMELEMENT;
H\LTDIC.H:typedef struct _DICOMELEMENT
H\LTDIC.H:} DICOMELEMENT, *pDICOMELEMENT;
H\LTDIC.H://typedef struct _DICOMMODULE DICOMMODULE, *pDICOMMODULE;
H\LTDIC.H:typedef struct _DICOMMODULE
H\LTDIC.H:   pDICOMELEMENT pElement[1000];  // Pointers to elements
H\LTDIC.H:} DICOMMODULE, *pDICOMMODULE;
H\LTDIC.H:typedef struct _DICOMIMAGE
H\LTDIC.H:} DICOMIMAGE, *pDICOMIMAGE;
H\LTDIC.H:typedef struct _DICOMNETDEBUGINFOONSEND
H\LTDIC.H:}DICOMNETDEBUGINFOONSEND, *pDICOMNETDEBUGINFOONSEND;
H\LTDIC.H:typedef L_BOOL (pEXT_CALLBACK CONFORMANCECALLBACK) (pDICOMELEMENT pElement, L_UINT16 nFlags, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID *HDICOMDS;
H\LTDIC.H:typedef enum tagDICOM_TRANSFER_SYNTAXES
H\LTDIC.H:DICOM_TRANSFER_SYNTAXES, *pDICOM_TRANSFER_SYNTAXES;
H\LTDIC.H:class DICOM_EXPORT LDicomNet;
H\LTDIC.H:class DICOM_EXPORT LDicomDS
H\LTDIC.H:   LDicomDS(L_CHAR *pszPath=NULL);
H\LTDIC.H:   ~LDicomDS();
H\LTDIC.H:   L_UINT16        CopyDS            (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LTDIC.H:   pDICOMELEMENT   InsertElement     (pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LTDIC.H:   pDICOMMODULE    InsertModule      (L_UINT32 nModule, L_BOOL bOptional);
H\LTDIC.H:   pDICOMELEMENT   InsertKey         (pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LTDIC.H:   pDICOMELEMENT   DeleteElement     (pDICOMELEMENT pElement);
H\LTDIC.H:   L_VOID          DeleteKey         (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetRootElement    (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetParentElement  (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetChildElement   (pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LTDIC.H:   pDICOMELEMENT   GetFirstElement   (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:   pDICOMELEMENT   GetLastElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:   pDICOMELEMENT   GetPrevElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:   pDICOMELEMENT   GetNextElement    (pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:   L_UINT32        GetLevelElement   (pDICOMELEMENT pElement);
H\LTDIC.H:   L_BOOL          ExistsElement     (pDICOMELEMENT pElement);
H\LTDIC.H:   L_BOOL          IsVolatileElement (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetRootKey        (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetParentKey      (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetChildKey       (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   GetFirstKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   GetLastKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   GetPrevKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   GetNextKey        (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   L_CHAR         *GetValueKey       (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT   FindFirstElement  (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindLastElement   (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindPrevElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindNextElement   (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMMODULE    FindModule        (L_UINT32 nModule);
H\LTDIC.H:   pDICOMMODULE    FindIndexModule   (L_UINT32 nIndex);
H\LTDIC.H:   pDICOMELEMENT   FindFirstKey      (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindLastKey       (pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindPrevKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   pDICOMELEMENT   FindNextKey       (pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:   L_UINT32        GetCountValue     (pDICOMELEMENT pElement);
H\LTDIC.H:   L_VOID          FreeValue         (pDICOMELEMENT pElement);
H\LTDIC.H:   L_BOOL          GetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LTDIC.H:   L_CHAR         *GetCharValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_INT16        *GetShortValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_INT32        *GetLongValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_FLOAT        *GetFloatValue     (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_DOUBLE       *GetDoubleValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_CHAR         *GetStringValue    (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   pVALUEAGE       GetAgeValue       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   pVALUEDATE      GetDateValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_INT           GetDateRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATERANGE pValue);
H\LTDIC.H:   L_INT16         GetTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUETIMERANGE pValue);
H\LTDIC.H:   L_INT16         GetDateTimeRangeValue (pDICOMELEMENT pElement, L_UINT32 nIndex, pVALUEDATETIMERANGE pValue);
H\LTDIC.H:   pVALUETIME      GetTimeValue      (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   pVALUEDATETIME  GetDateTimeValue  (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_UINT32        GetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText);
H\LTDIC.H:   L_UINT32        GetCountImage     (pDICOMELEMENT pElement);
H\LTDIC.H:   L_UINT16        GetInfoImage      (pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LTDIC.H:   L_UINT16        GetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:   L_UINT16        GetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LTDIC.H:   L_BOOL          SetBinaryValue    (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LTDIC.H:   L_BOOL          SetCharValue      (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetShortValue     (pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetLongValue      (pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetFloatValue     (pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetDoubleValue    (pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetStringValue    (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetAgeValue       (pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetDateValue      (pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetTimeValue      (pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetDateTimeValue  (pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetDateRangeValue      (pDICOMELEMENT pElement, pVALUEDATERANGE pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetTimeRangeValue      (pDICOMELEMENT pElement, pVALUETIMERANGE pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetDateTimeRangeValue  (pDICOMELEMENT pElement, pVALUEDATETIMERANGE pValue, L_UINT32 nCount);
H\LTDIC.H:   L_BOOL          SetConvertValue   (pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LTDIC.H:   L_UINT16        InsertImage       (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:   L_UINT16        InsertImageList   (pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LTDIC.H:   L_UINT16        SetImage          (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:   L_UINT16        SetImageList      (pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LTDIC.H:   L_UINT16        DeleteImage       (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:   L_UINT16        AnnCount         (L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LTDIC.H:   L_UINT16        LoadDS            (LDicomFile *pFile, L_UINT16 nFlags, L_BOOL bVerify);
H\LTDIC.H:   L_UINT16        SaveDS            (LDicomFile *pFile, L_UINT16 nFlags);
H\LTDIC.H:   L_UINT32        FindGetValue      (pDICOMELEMENT pElement, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nIndex, L_UINT32 nCount, L_INT16 nType);
H\LTDIC.H:   pDICOMELEMENT   FindSetValue      (pDICOMELEMENT Element, L_UINT32 nTag, L_VOID *pValue, L_UINT32 nCount, L_INT16 nType);
H\LTDIC.H:   friend L_BOOL EXT_FUNCTION L_DicomInsertUncompressedFrame(LDicomDS *pDS , pDICOMELEMENT pPixelDataElement, L_VOID *pFrameBuffer, L_UINT32 nLength,L_UINT32 nFrameIndex);
H\LTDIC.H:   LDicomTree           m_Tree;
H\LTDIC.H:   LDicomFile          *m_pInput;
H\LTDIC.H:   LDicomFile           m_MyInput;
H\LTDIC.H:   LDicomFile           m_MyScratch;
H\LTDIC.H:   DICOMMODULE          m_Module;
H\LTDIC.H:   L_UINT16      CopyTreeDS             (pDICOMELEMENT pDstParent, LDicomDS *pSrcDS, pDICOMELEMENT pSrcParent);
H\LTDIC.H:   L_UINT16      GetDefaultVR           (pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bParent);
H\LTDIC.H:   L_BOOL        VerifyVR               (pDICOMELEMENT pElement, L_UINT16 nType);
H\LTDIC.H:   L_BOOL        VerifyTypeValue        (pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 *pnCount, L_UINT16 nType);
H\LTDIC.H:   L_BOOL        GetTypeValue           (pDICOMELEMENT pElement);
H\LTDIC.H:   L_BOOL        SetTypeValue           (pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount, L_UINT32 uFlags=0);
H\LTDIC.H:   L_BOOL        GetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LTDIC.H:   L_BOOL        SetFileBinaryValue     (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LTDIC.H:   L_BOOL        InsertFileBinaryValue  (pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nOffset, L_UINT32 nLength);
H\LTDIC.H:   L_BOOL        DeleteFileBinaryValue  (pDICOMELEMENT pElement, L_UINT32 nOffset, L_UINT32 nLength);
H\LTDIC.H:   L_UINT32      GetFileBinaryIndex     (pDICOMELEMENT pElement, L_UINT32 *nOffset);
H\LTDIC.H:   L_BOOL        CopyFileBinaryValue    (pDICOMELEMENT pElement, L_UINT32 nOffset1, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian1, LDicomFile *pFile2, L_UINT32 nOffset2, L_BOOL bLittleEndian2);
H\LTDIC.H:   L_UINT32      GetLengthSequence      (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LTDIC.H:   L_UINT32      GetLengthGroup         (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LTDIC.H:   L_UINT32      GetOffsetElement       (pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LTDIC.H:   L_UINT16      ReadSequence           (LDicomFile *pInput, pDICOMELEMENT hParent, L_UINT16 nFlags, L_UINT32 *pnLength);
H\LTDIC.H:   L_UINT16      WriteSequence          (LDicomFile *pOutput, pDICOMELEMENT pElement, L_UINT16 nFlags);
H\LTDIC.H:   L_UINT16      ReadElement            (LDicomFile *pInput, L_UINT32 *pnTag, L_UINT16 *pnVR, L_UINT32 *pnLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LTDIC.H:   L_UINT16      WriteElement           (LDicomFile *pOutput, L_UINT32 nTag, L_UINT16 nVR, L_UINT32 nLength, L_BOOL bLittleEndian, L_BOOL bExplicitVR);
H\LTDIC.H:   L_BOOL        Read                   (LDicomFile *pInput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LTDIC.H:   L_BOOL        Write                  (LDicomFile *pOutput, L_VOID *pBuffer, L_UINT32 nLength, L_UINT16 nVR, L_BOOL bLittleEndian);
H\LTDIC.H:   L_BOOL        InsertModule           (pDICOMELEMENT pParent, L_UINT32 nModule, L_UINT32 nIndex, L_BOOL bOptional);
H\LTDIC.H:   L_VOID        InsertModule           (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LTDIC.H:   pDICOMIOD     VerifyModule           (pDICOMELEMENT pParent, L_UINT32 nModule);
H\LTDIC.H:   L_UINT32      GetCountElementIOD     (pDICOMIOD pIOD, L_BOOL bOptional);
H\LTDIC.H:   pDICOMELEMENT GetItemKey             (pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT FindAttachKey          (pDICOMELEMENT pElement, L_UINT32 nTag);
H\LTDIC.H:   L_VOID        InsertModuleKey        (pDICOMELEMENT pParentElement, pDICOMIOD pParentIOD, L_BOOL bOptional);
H\LTDIC.H:   L_UINT16      GetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, L_UINT32 nIndex, L_BOOL bPalette);
H\LTDIC.H:   L_UINT16      SetInfoImage           (pDICOMELEMENT pElement, pIMAGEINFO pInfo, pBITMAPHANDLE pBitmap, L_INT32 nPhotometric, L_BOOL bSave);
H\LTDIC.H:   L_UINT16      LoadImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:   L_UINT16      SaveImage              (pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:   L_UINT16      DeleteImage            (pDICOMELEMENT pElement, L_UINT32 nIndex);
H\LTDIC.H:   L_UINT16      RefreshImage           (pDICOMELEMENT pElement);
H\LTDIC.H:   L_BOOL        CreatePrivateCreatorElement(pDICOMELEMENT pElement, L_UINT32 uTag);
H\LTDIC.H:   L_BOOL        IsAnnPrivateCreatorElement(pDICOMELEMENT pElement);
H\LTDIC.H:   pDICOMELEMENT FindAnnPrivateCreatorElement(L_CHAR *pszPrivateString);
H\LTDIC.H:   L_INT         GetXRangeValue(pDICOMELEMENT pElement, L_UINT32 nIndex, L_VOID * pValue, L_UINT16 nType, L_UINT32 nCount);
H\LTDIC.H:   L_UINT16      ChangeTransferSyntax(DICOM_TRANSFER_SYNTAXES NewTransferSyntax,L_INT32 nQFactor,L_BOOL bKeepPixelDataIntact,L_UINT32 uFlags);
H\LTDIC.H:   L_UINT16      GetFrameBinaryData(pDICOMELEMENT pPixelDataElement,L_INT nFrameIndex,L_UCHAR *pFrameDataBuffer,L_UINT *puFrameDataSize);
H\LTDIC.H:HDICOMDS        EXT_FUNCTION L_DicomCreateDS          (L_CHAR *pszPath);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeDS            (HDICOMDS hDS);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitDS            (HDICOMDS hDS, L_UINT32 nClass, L_UINT16 nFlags);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoDS         (HDICOMDS hDS, L_UINT32 *pnClass, L_UINT16 *pnFlags);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomInitCS            (HDICOMDS hDS, L_UINT16 nCommand, L_BOOL bRequest);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetInfoCS         (HDICOMDS hDS, L_UINT16 *pnCommand, L_BOOL *pbRequest);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomLoadDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSaveDS            (HDICOMDS hDS, L_CHAR *pszName, L_UINT16 nFlags);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomCopyDS            (HDICOMDS hDstDS, pDICOMELEMENT pDstParent, HDICOMDS hSrcDS, pDICOMELEMENT pSrcParent);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertElement     (HDICOMDS hDS, pDICOMELEMENT pNeighbor, L_BOOL bChild, L_UINT32 nTag, L_UINT16 nVR, L_BOOL bSequence, L_UINT32 nIndex);
H\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomInsertModule      (HDICOMDS hDS, L_UINT32 nModule, L_BOOL bOptional);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomInsertKey         (HDICOMDS hDS, pDICOMELEMENT pParent, L_CHAR *pszKey, L_BOOL bOptional);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomDeleteElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteModule      (HDICOMDS hDS, L_UINT32 nModule);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomDeleteKey         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomResetDS           (HDICOMDS hDS);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootElement    (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentElement  (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bVolatile);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextElement    (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree, L_BOOL bVolatile);
H\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetLevelElement   (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountModule    (HDICOMDS hDS);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomExistsElement     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomIsVolatileElement (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomConformanceDS     (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetDebugDS        (HDICOMDS hDS, CONFORMANCECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetRootKey        (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetParentKey      (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetChildKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetFirstKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetLastKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetPrevKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomGetNextKey        (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetValueKey       (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstElement  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nTag, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextElement   (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindModule        (HDICOMDS hDS, L_UINT32 nModule);
H\LTDIC.H:pDICOMMODULE    EXT_FUNCTION L_DicomFindIndexModule   (HDICOMDS hDS, L_UINT32 nIndex);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindFirstKey      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindLastKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszKey, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindPrevKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:pDICOMELEMENT   EXT_FUNCTION L_DicomFindNextKey       (HDICOMDS hDS, pDICOMELEMENT pElement, L_BOOL bTree);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomGetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountValue     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomFreeValue         (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_INT16        *EXT_FUNCTION L_DicomGetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_INT32        *EXT_FUNCTION L_DicomGetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_FLOAT        *EXT_FUNCTION L_DicomGetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_DOUBLE       *EXT_FUNCTION L_DicomGetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_CHAR         *EXT_FUNCTION L_DicomGetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:pVALUEAGE       EXT_FUNCTION L_DicomGetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:pVALUEDATE      EXT_FUNCTION L_DicomGetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:pVALUETIME      EXT_FUNCTION L_DicomGetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:pVALUEDATETIME  EXT_FUNCTION L_DicomGetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText);
H\LTDIC.H:L_UINT32        EXT_FUNCTION L_DicomGetCountImage     (HDICOMDS hDS, pDICOMELEMENT pElement);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetInfoImage      (HDICOMDS hDS, pDICOMELEMENT pElement, pDICOMIMAGE pInfo, L_UINT32 nIndex);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nBitsPerPixel, L_INT32 nOrder, FILEREADCALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_UINT32 nCount, L_INT32 nBitsPerPixel, L_INT32 nOrder);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomGetKeepPixelDataIntactFlag(HDICOMDS hDS);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomGetDefaultJ2KOptions( HDICOMDS hDS,pFILEJ2KOPTIONS pOptions, L_INT nSize );
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetPreamble       (HDICOMDS hDS, L_CHAR *pPreamble, L_UINT16 nLength);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetBinaryValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_VOID *pValue, L_UINT32 nLength);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetCharValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetShortValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT16 *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetLongValue      (HDICOMDS hDS, pDICOMELEMENT pElement, L_INT32 *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetFloatValue     (HDICOMDS hDS, pDICOMELEMENT pElement, L_FLOAT *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDoubleValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_DOUBLE *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetStringValue    (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetAgeValue       (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEAGE pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATE pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetTimeValue      (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUETIME pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetDateTimeValue  (HDICOMDS hDS, pDICOMELEMENT pElement, pVALUEDATETIME pValue, L_UINT32 nCount);
H\LTDIC.H:L_BOOL          EXT_FUNCTION L_DicomSetConvertValue   (HDICOMDS hDS, pDICOMELEMENT pElement, L_CHAR *pszText, L_UINT32 nCount);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImage       (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomInsertImageList   (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_UINT32 nIndex, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImage          (HDICOMDS hDS, pDICOMELEMENT pElement, pBITMAPHANDLE pBitmap, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor, FILESAVECALLBACK pfnCallback, L_VOID *pUserData);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetImageList      (HDICOMDS hDS, pDICOMELEMENT pElement, HBITMAPLIST hList, L_INT32 nCompression, L_INT32 nPhotometric, L_INT32 nBitsPerPixel, L_INT32 nQFactor);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomDeleteImage       (HDICOMDS hDS, pDICOMELEMENT pElement, L_UINT32 nIndex, L_UINT32 nCount);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomChangeTransferSyntax(HDICOMDS hDS, L_CHAR *pszUID,L_INT32 nQFactor/*For lossy*/,L_UINT32 uFlags);
H\LTDIC.H:L_VOID          EXT_FUNCTION L_DicomSetKeepPixelDataIntactFlag(HDICOMDS hDS, L_BOOL bSet);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomSetJ2KOptions( HDICOMDS hDS,const pFILEJ2KOPTIONS pOptions);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnSave           (HDICOMDS hDS,
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnLoad           (HDICOMDS hDS,
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnCount         (HDICOMDS hDS, L_INT *pFileIndices, L_UINT32 *pnPrivateCreatorTag);
H\LTDIC.H:L_UINT16        EXT_FUNCTION L_DicomAnnDelete        (HDICOMDS hDS, L_INT nIndex, L_INT nPage ); //nIndex: Pass -1 to delete the LEAD Private tag and all files
H\LTDIC.H:typedef struct tagDICOMDIROPTIONS
H\LTDIC.H:} DICOMDIROPTIONS, * pDICOMDIROPTIONS;
H\LTDIC.H:#define DICOMDIR_REJECT_INVALID_FILEID          0x01
H\LTDIC.H:#define DICOMDIR_INSERT_ICON_IMAGE_SEQUENCE     0x02
H\LTDIC.H:#define DICOMDIR_INSERTDICOMFILE_PREADD   300
H\LTDIC.H:class DICOM_EXPORT LDicomDir : public LDicomDS
H\LTDIC.H:   LDicomDir(L_CHAR* pszDICOMDIRDstFolder = NULL, L_CHAR* pszPath = NULL);
H\LTDIC.H:   virtual ~LDicomDir();
H\LTDIC.H:   L_UINT16 SaveDicomDir(L_UINT16 uFlags = 0);   
H\LTDIC.H:   L_UINT16 ResetDicomDir(const L_CHAR* pszDICOMDIRDstFolder);
H\LTDIC.H:   L_UINT16 InsertDicomFile(L_CHAR* pszFileName);
H\LTDIC.H:   L_UINT16 InsertDicomDS(LDicomDS& DataSet, L_CHAR* pszFileName);
H\LTDIC.H:   L_UINT16 SetOptions(const pDICOMDIROPTIONS pOptions);
H\LTDIC.H:   L_UINT16 GetOptions(pDICOMDIROPTIONS pOptions, L_INT nSize) const;
H\LTDIC.H:   virtual L_UINT16 OnInsertDicomFile(const L_CHAR* pszFileName,
H\LTDIC.H:                                      LDicomDS* pDataSet,
H\LTDIC.H:   L_CHAR*         m_pszDICOMDIRDstFolder;
H\LTDIC.H:   DICOMDIROPTIONS m_Options;
H\LTDIC.H:   pDICOMELEMENT FindDirectoryRecord(pDICOMELEMENT pReferencingDR, L_INT nDRType,
H\LTDIC.H:   L_VOID        SetSelectionKey(pDICOMELEMENT pDR, LDicomDS& DataSet, L_UINT32 uTag,
H\LTDIC.H:   L_VOID        DeleteDRElement(pDICOMELEMENT pDR, L_UINT32 uTag);
H\LTDIC.H:   L_UINT16      InsertIconImageSequence(pDICOMELEMENT pImageKey, LDicomDS& SourceDataSet);
H\LTDIC.H:#define PDU_REJECT_SOURCE_USER              1  // DICOM UL service-user
H\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER1         2  // DICOM UL service-provider (ASCE related function)
H\LTDIC.H:#define PDU_REJECT_SOURCE_PROVIDER2         3  // DICOM UL service-provider (Presentation related function)
H\LTDIC.H:class DICOM_EXPORT LDicomAssociate
H\LTDIC.H:   LDicomAssociate(L_BOOL bRequest);
H\LTDIC.H:   ~LDicomAssociate();
H\LTDIC.H:   friend class LDicomNet;
H\LTDIC.H:   LDicomTree m_Presentation;
H\LTDIC.H:   LDicomTree m_RoleSelect;
H\LTDIC.H:   LDicomTree m_UserInfo;
H\LTDIC.H:typedef L_VOID *HDICOMPDU;
H\LTDIC.H:HDICOMPDU EXT_FUNCTION L_DicomCreateAssociate        (L_BOOL bRequest);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomFreeAssociate          (HDICOMPDU hPDU);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomResetAssociate         (HDICOMPDU hPDU, L_BOOL bRequest);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDefaultAssociate       (HDICOMPDU hPDU);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRequest              (HDICOMPDU hPDU);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomSetRequest             (HDICOMPDU hPDU, L_BOOL bRequest);
H\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetVersion             (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetVersion             (HDICOMPDU hPDU, L_UINT16 nVersion);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalled              (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalled              (HDICOMPDU hPDU, L_CHAR *pszName);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetCalling             (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetCalling             (HDICOMPDU hPDU, L_CHAR *pszName);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetApplication         (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetApplication         (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetPresentationCount   (HDICOMPDU hPDU);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetPresentation        (HDICOMPDU hPDU, L_INT nIndex);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetPresentation        (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddPresentation        (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult, L_CHAR *pszAbstract);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelPresentation        (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetResult              (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetResult              (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR nResult);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetAbstract            (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAbstract            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomFindAbstract           (HDICOMPDU hPDU, L_CHAR *pszUID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetTransferCount       (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex, L_CHAR *pszUID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_CHAR *pszUID);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelTransfer            (HDICOMPDU hPDU, L_UCHAR nID, L_INT nIndex);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsRoleSelect           (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetUserRole            (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetProviderRole        (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetRoleSelect          (HDICOMPDU hPDU, L_UCHAR nID, L_BOOL bEnabled, L_UCHAR nUser, L_UCHAR nProvider);
H\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetLengthExtended      (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_UCHAR  *EXT_FUNCTION L_DicomGetExtended            (HDICOMPDU hPDU, L_UCHAR nID);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetExtended            (HDICOMPDU hPDU, L_UCHAR nID, L_UCHAR *pData, L_UINT32 nLength);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsMaxLength            (HDICOMPDU hPDU);
H\LTDIC.H:L_UINT32  EXT_FUNCTION L_DicomGetMaxLength           (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetMaxLength           (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT32 nLength);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementClass       (HDICOMPDU hPDU);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementClass      (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementClass      (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszUID);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsAsyncOperations      (HDICOMPDU hPDU);
H\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetInvokedOperations   (HDICOMPDU hPDU);
H\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetPerformedOperations (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetAsyncOperations     (HDICOMPDU hPDU, L_BOOL bEnabled, L_UINT16 nInvoked, L_UINT16 nPerformed);
H\LTDIC.H:L_BOOL    EXT_FUNCTION L_DicomIsImplementVersion     (HDICOMPDU hPDU);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetImplementVersion    (HDICOMPDU hPDU);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetImplementVersion    (HDICOMPDU hPDU, L_BOOL bEnabled, L_CHAR *pszVersion);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomGetUserInfoCount       (HDICOMPDU hPDU);
H\LTDIC.H:L_UCHAR   EXT_FUNCTION L_DicomGetTypeUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LTDIC.H:L_UINT16  EXT_FUNCTION L_DicomGetLengthUserInfo      (HDICOMPDU hPDU, L_INT nIndex);
H\LTDIC.H:L_CHAR   *EXT_FUNCTION L_DicomGetDataUserInfo        (HDICOMPDU hPDU, L_INT nIndex);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomSetUserInfo            (HDICOMPDU hPDU, L_INT nIndex, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LTDIC.H:L_INT     EXT_FUNCTION L_DicomAddUserInfo            (HDICOMPDU hPDU, L_UCHAR nType, L_CHAR *pData, L_UINT16 nLength);
H\LTDIC.H:L_VOID    EXT_FUNCTION L_DicomDelUserInfo            (HDICOMPDU hPDU, L_INT nIndex);
H\LTDIC.H:typedef L_VOID *HDICOMNET;
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CONNECTCALLBACK)                 (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK ACCEPTCALLBACK)                  (HDICOMNET hNet, L_INT nError, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK CLOSECALLBACK)                   (HDICOMNET hNet, L_INT nError, HDICOMNET hPeer, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECALLBACK)                 (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDCALLBACK)                    (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nBytes, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK SENDEXTCALLBACK)                 (HDICOMNET hNet, pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREQUESTCALLBACK) (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEACCEPTCALLBACK)  (HDICOMNET hNet, HDICOMPDU hPDU, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEASSOCIATEREJECTCALLBACK)  (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEDATACALLBACK)             (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASEREQUESTCALLBACK)   (HDICOMNET hNet, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVERELEASERESPONSECALLBACK)  (HDICOMNET hNet, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEABORTCALLBACK)            (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTOREREQUESTCALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECSTORERESPONSECALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECFINDRESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVEREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECMOVERESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECCANCELREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHOREQUESTCALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVECECHORESPONSECALLBACK)    (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENREPORTRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT32 nCount, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENGETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETREQUESTCALLBACK)      (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENSETRESPONSECALLBACK)     (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENACTIONRESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENCREATERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETEREQUESTCALLBACK)   (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVENDELETERESPONSECALLBACK)  (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID (pEXT_CALLBACK RECEIVEUNKNOWNCALLBACK)          (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS, L_VOID *pUserData);
H\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK GETCHALLENGECALLBACK)          (HDICOMNET hNet, L_UINT64 *nChallenge, L_UINT64 nParameter, L_VOID *pUserData);
H\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK INTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 *nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LTDIC.H:typedef L_UINT32 (pEXT_CALLBACK EXTERNALAUTHENTICATECALLBACK)  (HDICOMNET hNet, L_UINT64 nChallenge, L_UINT64 nResponse, L_UINT64 nParameter, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONSECURELINKREADY)             (HDICOMNET hNet, L_UINT32 nError, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURESENDISCL)           (HDICOMNET hNet, L_INT nError, L_UCHAR nType, L_UINT32 nLength, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK ONNONSECURERECEIVEDISCL)       (HDICOMNET hNet, L_INT nError, L_CHAR *nType, L_UINT32 nLength, L_VOID *pUserData);
H\LTDIC.H:typedef L_VOID   (pEXT_CALLBACK RECEIVEDISCLPACKET)            (HDICOMNET hNet, L_INT nError, L_CHAR *pBuffer, L_UINT32 nBytes, L_VOID *pUserData);
H\LTDIC.H:typedef struct _DICOMNETCALLBACK
H\LTDIC.H:} DICOMNETCALLBACK, *pDICOMNETCALLBACK;
H\LTDIC.H:typedef struct _LDICOMNETPRIVATEDATA
H\LTDIC.H:   DICOMNETDEBUGINFOONSEND m_DebugInfoOnSend;
H\LTDIC.H:}LDICOMNETPRIVATEDATA , * pLDICOMNETPRIVATEDATA;
H\LTDIC.H:class DICOM_EXPORT LDicomNet
H\LTDIC.H:   LDicomNet(L_CHAR *pszPath, L_INT32 nMode);
H\LTDIC.H:      // Values for nMode: DICOM_SECURE_ISCL, DICOM_SECURE_TLS, DICOM_SECURE_NONE
H\LTDIC.H:      // if a bad value is supplied, security will be DICOM_SECURE_NONE
H\LTDIC.H:   virtual ~LDicomNet();
H\LTDIC.H:   L_INT            Accept                     (LDicomNet *pNet);
H\LTDIC.H:   L_INT            SendAssociateRequest       (LDicomAssociate *pPDU);
H\LTDIC.H:   L_INT            SendAssociateAccept        (LDicomAssociate *pPDU);
H\LTDIC.H:   L_INT            SendData                   (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCStoreRequest          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCFindRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCFindResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCGetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCMoveRequest           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendCMoveResponse          (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNReportRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNReportResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNGetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNSetRequest            (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNSetResponse           (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNActionRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNActionResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNCreateRequest         (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LTDIC.H:   L_INT            SendNCreateResponse        (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   LDicomNet       *GetServer                  ();
H\LTDIC.H:   LDicomNet       *GetClient                  (L_UINT nIndex);
H\LTDIC.H:   LDicomAssociate *GetAssociate               ();
H\LTDIC.H:   virtual L_VOID   OnClose                    (L_INT nError, LDicomNet *pNet);
H\LTDIC.H:   virtual L_VOID   OnReceiveAssociateRequest  (LDicomAssociate *pPDU);
H\LTDIC.H:   virtual L_VOID   OnReceiveAssociateAccept   (LDicomAssociate *pPDU);
H\LTDIC.H:   virtual L_VOID   OnReceiveData              (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCStoreRequest     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCFindRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCFindResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCGetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCMoveRequest      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveCMoveResponse     (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNReportRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNReportResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNGetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNSetRequest       (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNSetResponse      (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNActionRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNActionResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNCreateRequest    (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveNCreateResponse   (L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, LDicomDS *pDS);
H\LTDIC.H:   virtual L_VOID   OnReceiveUnknown           (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LTDIC.H:   L_VOID           SetCallback                (pDICOMNETCALLBACK pCallback);
H\LTDIC.H:   virtual L_VOID   OnSendExt(pDICOMNETDEBUGINFOONSEND pDicomNetDebugInfoOnsend);
H\LTDIC.H:   pLDICOMNETPRIVATEDATA   m_pPrivateData;
H\LTDIC.H:   LDicomAssociate         m_AssociateRQ;
H\LTDIC.H:   LDicomAssociate         m_AssociateAC;
H\LTDIC.H:   LDicomFile              m_SendFile;
H\LTDIC.H:   LDicomDS                m_SendCS;
H\LTDIC.H:   LDicomFile              m_ReceiveFileCS;
H\LTDIC.H:   LDicomFile              m_ReceiveFileDS;
H\LTDIC.H:   LDicomDS                m_ReceiveCS;
H\LTDIC.H:   LDicomDS                m_ReceiveDS;
H\LTDIC.H:   DICOMNETCALLBACK        m_Callback;
H\LTDIC.H:   L_VOID   ReceiveData (L_UCHAR nPresentationID, LDicomDS *pCS, LDicomDS *pDS);
H\LTDIC.H:   L_INT    SendData    (L_BOOL bCommand, L_UCHAR nPresentationID, LDicomDS *pDS);
H\LTDIC.H:   L_UINT32 m_SecurityStandard;     // choose between DICOM_ISCL, DICOM_TLS and DICOM_NO_SECURITY
H\LTDIC.H:         // returns DICOM_SUCCES if OK, not 0 if nLengthLut too small
H\LTDIC.H:         // returns DICOM_SUCCESS if data decrypted and padding removed. Update nLengthOut to correct length of decrypted message
H\LTDIC.H:                                        L_UINT32 indicator,
H\LTDIC.H:   static LDicomNet *m_pNetTLS[512];
H\LTDIC.H:   L_VOID SetHandshakeDebug(L_BOOL isDebug, L_VOID (*myfn)(LDicomNet *pDic, const char *TLS_STATUS, int ret));
H\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomCreateNet                  (L_CHAR *pszPath, L_INT32 nMode);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxCommBlockLengthISCL(HDICOMNET hNet, L_UINT32 nCommBlockLength);   // maximum communication block size, there are performance
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetCommBlockLengthISCL(HDICOMNET hNet);     // return the comm block size negociated
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMaxMessageLengthISCL(HDICOMNET hNet, L_UINT32 nMsgLength);     // the maximum message length that can be processed - 1MB, 2MB and so on
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthAlgISCL(HDICOMNET hNet, L_UINT32 mutualAuthMode);       // only 4way 3pass
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultEncryptionISCL(HDICOMNET hNet, L_UINT32 EncryptionMode);   // bulk data encryption algorithm
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetDefaultSigningISCL(HDICOMNET hNet, L_UINT32 SignMode);            // message authentication algorithm
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerEncryptionISCL(HDICOMNET hNet);   // can be checked to see what algorithm of communication the sender tries to use
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerMACISCL(HDICOMNET hNet);      // ATTN: if the crypt/MAC algorithm differs, the message is dropped and the GetPeerEncryption()/GetPeerMAC() will tell me
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetErrorSecure(HDICOMNET hNet);       // returns the m_nISCLError in ISCL case, or m_nTLSError in case of TLS
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 nLength);    // nLength = 1...128
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerAuthDataISCL(HDICOMNET hNet, L_VOID *pBuffer, L_UINT32 *nLength);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetPeerRequestedMessageLengthISCL(HDICOMNET hNet);      // used if local end refuse to receive
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetMutualAuthKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 nKey);      // key used during mutual authentication
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForMutualAuthISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetEncryptKeyISCL(HDICOMNET hNet, L_UINT32 nIndex, L_UINT64 key);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomSetIndexForEncryptISCL(HDICOMNET hNet, L_UINT32 nIndex);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForEncryptISCL(HDICOMNET hNet);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetIndexForMutualAuthISCL(HDICOMNET hNet);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetStatusISCL(HDICOMNET hNet);                          // return the internal status of the object.
H\LTDIC.H:   L_BOOL   EXT_FUNCTION L_DicomIsISCLQueueEmpty(HDICOMNET hNet);
H\LTDIC.H:   L_INT    EXT_FUNCTION L_DicomCloseForced(HDICOMNET hNet, L_BOOL bForced);
H\LTDIC.H:   L_INT32  EXT_FUNCTION L_DicomSendNonSecureISCL(HDICOMNET hNet, L_CHAR *pBuffer, L_UINT32 nBytes);
H\LTDIC.H:   L_UINT32 EXT_FUNCTION L_DicomGetSecureMode(HDICOMNET hNet);
H\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCipherFromIndexTLS(HDICOMNET hNet, L_UINT32 nIndex);
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetCipherToIndexTLS(HDICOMNET hNet, L_UINT32 nIndex, L_CIPHERSUITE cipher);
H\LTDIC.H:   L_CIPHERSUITE EXT_FUNCTION L_DicomGetCiphersuiteTLS(HDICOMNET hNet);
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptionAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetAuthenticationAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetIntegrityAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetKeyExchangeAlgorithmTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);   
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetEncryptKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomGetMutualAuthKeyLengthTLS(HDICOMNET hNet, L_CIPHERSUITE cipher);
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetClientCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LTDIC.H:   L_UINT32      EXT_FUNCTION L_DicomSetServerCertificateTLS(HDICOMNET hNet, L_CHAR *pszPathToCertificateFile, L_UINT32 nCertType, L_CHAR *pszPathToKeyFile);
H\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomFreeNet                    (HDICOMNET hNet);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomStartUp                    ();
H\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomShutDown                   ();
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomConnect                    (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_CHAR *pszPeerAddress, L_UINT nPeerPort);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomListen                     (HDICOMNET hNet, L_CHAR *pszHostAddress, L_UINT nHostPort, L_INT nNbPeers);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomAccept                     (HDICOMNET hNet, HDICOMNET hPeer);
H\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomClose                      (HDICOMNET hNet);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateRequest       (HDICOMNET hNet, HDICOMPDU hPDU);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateAccept        (HDICOMNET hNet, HDICOMPDU hPDU);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAssociateReject        (HDICOMNET hNet, L_UCHAR nResult, L_UCHAR nSource, L_UCHAR nReason);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendData                   (HDICOMNET hNet, L_UCHAR nPresentationID, HDICOMDS hCS, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseRequest         (HDICOMNET hNet);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendReleaseResponse        (HDICOMNET hNet);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendAbort                  (HDICOMNET hNet, L_UCHAR nSource, L_UCHAR nReason);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreRequest          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nPriority, L_CHAR *pszMoveAE, L_UINT16 nMoveMessageID, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCStoreResponse         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCFindResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nPriority, L_CHAR *pszMoveAE, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCMoveResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus, L_UINT16 nRemaining, L_UINT16 nCompleted, L_UINT16 nFailed, L_UINT16 nWarning, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCCancelRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoRequest           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendCEchoResponse          (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_UINT16 nStatus);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nEvent, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNReportResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nEvent, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT32 *pnAttribute, L_UINT16 nCount);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNGetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetRequest            (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNSetResponse           (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nAction, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNActionResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, L_UINT16 nAction, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNCreateResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus, HDICOMDS hDS);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteRequest         (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomSendNDeleteResponse        (HDICOMNET hNet, L_UCHAR nPresentationID, L_UINT16 nMessageID, L_CHAR *pszClass, L_CHAR *pszInstance, L_UINT16 nStatus);
H\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsActivated                (HDICOMNET hNet);
H\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsConnected                (HDICOMNET hNet);
H\LTDIC.H:   L_BOOL    EXT_FUNCTION L_DicomIsAssociated               (HDICOMNET hNet);
H\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetQueueSend               (HDICOMNET hNet);
H\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetServer                  (HDICOMNET hNet);
H\LTDIC.H:   L_UINT32  EXT_FUNCTION L_DicomGetClientCount             (HDICOMNET hNet);
H\LTDIC.H:   HDICOMNET EXT_FUNCTION L_DicomGetClient                  (HDICOMNET hNet, L_UINT nIndex);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetHostInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LTDIC.H:   L_INT     EXT_FUNCTION L_DicomGetPeerInfo                (HDICOMNET hNet, L_CHAR *pszAddress, L_UINT *pnPort);
H\LTDIC.H:   HDICOMPDU EXT_FUNCTION L_DicomGetAssociate               (HDICOMNET hNet);
H\LTDIC.H:   L_VOID    EXT_FUNCTION L_DicomSetCallback                (HDICOMNET hNet, pDICOMNETCALLBACK pCallback);
H\LTDIC.H:#endif  // LTDIC_H_INCLUDED
H\ltdicocx.h:#ifndef _LTDICOCX_H_
H\ltdicocx.h:#define _LTDICOCX_H_
H\ltdicocx.h:   } DicomVRCodeConstants;
H\ltdicocx.h:      DICOM_VR_FIXED = 0,       // DICOMVR.nLength bytes fixed
H\ltdicocx.h:      DICOM_VR_MAXIMUM,         // DICOMVR.nLength bytes maximum
H\ltdicocx.h:      DICOM_VR_MAXIMUM_GROUP,   // DICOMVR.nLength maximum per component group
H\ltdicocx.h:      DICOM_VR_ANY,             // Any length valid for any of the other DICOM Value Representations
H\ltdicocx.h:      DICOM_VR_NOT_APPLICABLE,  // DICOMVR.nLength not applicable
H\ltdicocx.h:      DICOM_VR_MAX,
H\ltdicocx.h:      DICOM_VR_BINARY = 0x0100, // Binary value
H\ltdicocx.h:      DICOM_VR_STRING = 0x0200, // String value (The character '\' is used as the delimiter between values for multiple data elements)
H\ltdicocx.h:      DICOM_VR_TEXT   = 0x0400, // Text value (Data Elements with this VR shall not be multi-valued)
H\ltdicocx.h:   } DicomVRRestrictionConstants;
H\ltdicocx.h:   } DicomAgeValueConstants;
H\ltdicocx.h:   } DicomConformanceStatusFlags;
H\ltdicocx.h:   } DicomDataSetFlags;
H\ltdicocx.h:      DICOM_SUCCESS                           = 0,
H\ltdicocx.h:         DICOM_ERROR_LOCKED                      = 20001,
H\ltdicocx.h:         DICOM_ERROR_MEMORY                      = 20002,
H\ltdicocx.h:         DICOM_ERROR_OPEN                        = 20003,
H\ltdicocx.h:         DICOM_ERROR_READ                        = 20004,
H\ltdicocx.h:         DICOM_ERROR_WRITE                       = 20005,
H\ltdicocx.h:         DICOM_ERROR_SEEK                        = 20006,
H\ltdicocx.h:         DICOM_ERROR_END                         = 20007,
H\ltdicocx.h:         DICOM_ERROR_FORMAT                      = 20008,
H\ltdicocx.h:         DICOM_ERROR_PARAMETER                   = 20009,
H\ltdicocx.h:         DICOM_ERROR_IMAGE                       = 20010,
H\ltdicocx.h:         DICOM_ERROR_COMPRESSION                 = 20011,
H\ltdicocx.h:         DICOM_ERROR_PHOTOMETRIC                 = 20012,
H\ltdicocx.h:         DICOM_ERROR_CONVERSION                  = 20013,
H\ltdicocx.h:         DICOM_ERROR_RANGE                       = 20014,
H\ltdicocx.h:         DICOM_ERROR_BITSPERPIXEL                = 20015,
H\ltdicocx.h:         DICOM_ERROR_QFACTOR                     = 20016,
H\ltdicocx.h:         DICOM_ERROR_PDU_TYPE                    = 20017,
H\ltdicocx.h:         DICOM_ERROR_PDU_LENGTH                  = 20018,
H\ltdicocx.h:         DICOM_ERROR_PDU_ID                      = 20019,
H\ltdicocx.h:         DICOM_ERROR_NET_FAILURE                 = 20029,
H\ltdicocx.h:         DICOM_ERROR_NET_ACCESS                  = 20030,  // The address is a broadcast address
H\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_IN_USE          = 20031,  // The address is already in use
H\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_NOT_AVAILABLE   = 20032,  // The address is not available from the local computer
H\ltdicocx.h:         DICOM_ERROR_NET_ADDRESS_NOT_SUPPORTED   = 20033,  // The address family is not supported
H\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_ABORTED      = 20034,  // The virtual circuit was aborted
H\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_REFUSED      = 20035,  // The attempt to connect was forcefully rejected
H\ltdicocx.h:         DICOM_ERROR_NET_CONNECTION_RESET        = 20036,  // The virtual circuit was reset by the remote side
H\ltdicocx.h:         DICOM_ERROR_NET_DESTINATION_REQUIRED    = 20037,  // A destination address is required
H\ltdicocx.h:         DICOM_ERROR_NET_ARGUMENT_INCORRECT      = 20038,  // The namelen argument is incorrect
H\ltdicocx.h:         DICOM_ERROR_NET_IN_PROGRESS             = 20039,  // A blocking operation is in progress
H\ltdicocx.h:         DICOM_ERROR_NET_BLOCKING_CANCELED       = 20040,  // The blocking call was canceled
H\ltdicocx.h:         DICOM_ERROR_NET_INVALID                 = 20041,  // The socket has not been bound with bind
H\ltdicocx.h:         DICOM_ERROR_NET_IS_CONNECTED            = 20042,  // The socket is already connected
H\ltdicocx.h:         DICOM_ERROR_NET_NO_MORE_FILE            = 20043,  // No more file descriptors are available
H\ltdicocx.h:         DICOM_ERROR_NET_MESSAGE_SIZE            = 20044,  // The datagram is larger than the maximum supported
H\ltdicocx.h:         DICOM_ERROR_NET_DOWN                    = 20045,  // The network subsystem has failed
H\ltdicocx.h:         DICOM_ERROR_NET_RESET                   = 20046,  // The connection must be reset
H\ltdicocx.h:         DICOM_ERROR_NET_UN_REACH                = 20047,  // The network can't be reached from this host at this time
H\ltdicocx.h:         DICOM_ERROR_NET_NO_BUFFERS              = 20048,  // No buffer space is available
H\ltdicocx.h:         DICOM_ERROR_NET_NOT_CONNECTED           = 20049,  // The socket is not connected
H\ltdicocx.h:         DICOM_ERROR_NET_NOT_SOCKET              = 20050,  // The descriptor is not a socket
H\ltdicocx.h:         DICOM_ERROR_NET_OPERATION_NOT_SUPPORTED = 20051,  // The type does not support connection-oriented service
H\ltdicocx.h:         DICOM_ERROR_NET_PROTOCOL_NOT_SUPPORTED  = 20052,  // The specified protocol is not supported
H\ltdicocx.h:         DICOM_ERROR_NET_PROTOCOL_TYPE           = 20053,  // The specified protocol is the wrong type
H\ltdicocx.h:         DICOM_ERROR_NET_SHUTDOWN                = 20054,  // The socket has been shut down
H\ltdicocx.h:         DICOM_ERROR_NET_SOCKET_NOT_SUPPORTED    = 20055,  // The type is not supported in this address family
H\ltdicocx.h:         DICOM_ERROR_NET_TIME_OUT                = 20056,  // Attempt to connect timed out without establishing a connection
H\ltdicocx.h:         DICOM_ERROR_NET_WOULD_BLOCK             = 20057,  // The socket is marked as nonblocking and the requested operation would block
H\ltdicocx.h:         DICOM_ERROR_NET_HOST_NOT_FOUND          = 20058,  // Authoritative Answer Host not found
H\ltdicocx.h:         DICOM_ERROR_NET_NO_DATA                 = 20059,  // Valid name, no data record of requested type
H\ltdicocx.h:         DICOM_ERROR_NET_NO_RECOVERY             = 20060,  // Nonrecoverable errors
H\ltdicocx.h:         DICOM_ERROR_NET_NOT_INITIALISED         = 20061,  // The system was not initialized
H\ltdicocx.h:         DICOM_ERROR_NET_SYSTEM_NOT_READY        = 20062,  // Not ready for network communication
H\ltdicocx.h:         DICOM_ERROR_NET_TRY_AGAIN               = 20063,  // Non-Authoritative Host not found, or server faild
H\ltdicocx.h:         DICOM_ERROR_NET_VERSION_NOT_SUPPORTED   = 20064,  // The version requested is not provided by this implementation
H\ltdicocx.h:         DICOM_ERROR_NET_SECURITY_BREACH         = 20065,  // There is an cryptographic error. 
H\ltdicocx.h:         DICOM_ERROR_TLS                         = 20066,  // TLS internal error
H\ltdicocx.h:         DICOM_ERROR_SECURITY_LOCKED             = 20067,  // DICOM Security Features are locked
H\ltdicocx.h:         DICOM_ERROR_TLS_DLL_NOT_LOADED          = 20068,  // TLS and/or CRY DLL not loaded
H\ltdicocx.h:         DICOM_ERROR_BAD_SECURE_MODE             = 20069,  // if I do ISCL operations on TLS objects
H\ltdicocx.h:         DICOM_ERROR_ANN                         = 20070,
H\ltdicocx.h:         DICOM_ERROR_ANN_LOCKED                  = 20071,  // Annotation support is locked
H\ltdicocx.h:         DICOM_ERROR_ANN_MISSING                 = 20072,  // Annotation dll is missing
H\ltdicocx.h:         DICOM_ERROR_TAG_ALREADY_EXISTS          = 20073,  // LEAD private creator element already exists
H\ltdicocx.h:         DICOM_ERROR_ANN_NO_EXIST                = 20074,  // Requested annotation file or page does not exist
H\ltdicocx.h:         DICOM_ERROR_ELEMENT_LENGTH_ODD          = 20100,
H\ltdicocx.h:         DICOM_ERROR_DICOMDIR_FOLDER             = 20200,
H\ltdicocx.h:         DICOM_ERROR_FILE                        = 20201,
H\ltdicocx.h:         DICOM_ERROR_FILEID                      = 20202,
H\ltdicocx.h:         DICOM_ERROR_J2K_LOCKED                  = 20203,
H\ltdicocx.h:   } DicomSpecificErrorCodes;
H\ltdicocx.h:      DICOM_CLASS_CR_IMAGE_STORAGE=0,
H\ltdicocx.h:      DICOM_CLASS_CT_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_MR_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_NM_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_NM_IMAGE_STORAGE_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_US_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_US_IMAGE_STORAGE_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_US_MULTI_FRAME_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_US_MULTI_FRAME_IMAGE_STORAGE_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_SC_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_STANDALONE_OVERLAY_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_STANDALONE_CURVE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_BASIC_STUDY_DESCRIPTOR,
H\ltdicocx.h:      DICOM_CLASS_STANDALONE_MODALITY_LUT_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_STANDALONE_VOI_LUT_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_XA_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_XA_BIPLANE_IMAGE_STORAGE_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_XRF_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_DOSE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_STRUCTURE_SET_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_PLAN_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_PET_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_STANDALONE_PET_CURVE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_STORED_PRINT_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_HC_GRAYSCALE_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_HC_COLOR_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_DX_IMAGE_STORAGE_PRESENTATION,
H\ltdicocx.h:      DICOM_CLASS_DX_IMAGE_STORAGE_PROCESSING,
H\ltdicocx.h:      DICOM_CLASS_DX_MAMMOGRAPHY_IMAGE_STORAGE_PRESENTATION,
H\ltdicocx.h:      DICOM_CLASS_DX_MAMMOGRAPHY_IMAGE_STORAGE_PROCESSING,
H\ltdicocx.h:      DICOM_CLASS_DX_INTRAORAL_IMAGE_STORAGE_PRESENTATION,
H\ltdicocx.h:      DICOM_CLASS_DX_INTRAORAL_IMAGE_STORAGE_PROCESSING,
H\ltdicocx.h:      DICOM_CLASS_RT_BEAMS_TREATMENT_RECORD_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_BRACHY_TREATMENT_RECORD_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_RT_TREATMENT_SUMMARY_RECORD_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_VL_ENDOSCOPIC_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_VL_MICROSCOPIC_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_VL_SLIDE_COORDINATES_MICROSCOPIC_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_VL_PHOTOGRAPHIC_IMAGE_STORAGE,
H\ltdicocx.h:      DICOM_CLASS_PATIENT,
H\ltdicocx.h:      DICOM_CLASS_VISIT,
H\ltdicocx.h:      DICOM_CLASS_STUDY,
H\ltdicocx.h:      DICOM_CLASS_STUDY_COMPONENT,
H\ltdicocx.h:      DICOM_CLASS_RESULTS,
H\ltdicocx.h:      DICOM_CLASS_INTERPRETATION,
H\ltdicocx.h:      DICOM_CLASS_BASIC_FILM_SESSION,
H\ltdicocx.h:      DICOM_CLASS_BASIC_FILM_BOX,
H\ltdicocx.h:      DICOM_CLASS_BASIC_GRAYSCALE_IMAGE_BOX,
H\ltdicocx.h:      DICOM_CLASS_BASIC_COLOR_IMAGE_BOX,
H\ltdicocx.h:      DICOM_CLASS_BASIC_ANNOTATION_BOX,
H\ltdicocx.h:      DICOM_CLASS_PRINT_JOB,
H\ltdicocx.h:      DICOM_CLASS_PRINTER,
H\ltdicocx.h:      DICOM_CLASS_VOI_LUT_BOX_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_IMAGE_OVERLAY_BOX_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_STORAGE_COMMITMENT_PUSH_MODEL,
H\ltdicocx.h:      DICOM_CLASS_STORAGE_COMMITMENT_PULL_MODEL,
H\ltdicocx.h:      DICOM_CLASS_PRINT_QUEUE,
H\ltdicocx.h:      DICOM_CLASS_MODALITY_PERFORMED_PROCEDURE_STEP,
H\ltdicocx.h:      DICOM_CLASS_PRESENTATION_LUT,
H\ltdicocx.h:      DICOM_CLASS_PULL_PRINT_REQUEST,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_META,
H\ltdicocx.h:      DICOM_CLASS_STUDY_META,
H\ltdicocx.h:      DICOM_CLASS_RESULTS_META,
H\ltdicocx.h:      DICOM_CLASS_BASIC_GRAYSCALE_PRINT_META,
H\ltdicocx.h:      DICOM_CLASS_BASIC_COLOR_PRINT_META,
H\ltdicocx.h:      DICOM_CLASS_REFERENCED_GRAYSCALE_PRINT_META_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_REFERENCED_COLOR_PRINT_META_RETIRED,
H\ltdicocx.h:      DICOM_CLASS_PULL_STORED_PRINT_META,
H\ltdicocx.h:      DICOM_CLASS_PRINTER_CONFIGURATION,
H\ltdicocx.h:      DICOM_CLASS_BASIC_PRINT_IMAGE_OVERLAY_BOX,
H\ltdicocx.h:      DICOM_CLASS_BASIC_DIRECTORY,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_PATIENT,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_STUDY,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_SERIES,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_ROOT_QUERY_IMAGE,
H\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_STUDY,
H\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_SERIES,
H\ltdicocx.h:      DICOM_CLASS_STUDY_ROOT_QUERY_IMAGE,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_STUDY_QUERY_PATIENT,
H\ltdicocx.h:      DICOM_CLASS_PATIENT_STUDY_QUERY_STUDY,
H\ltdicocx.h:      DICOM_CLASS_BASIC_TEXT_SR,
H\ltdicocx.h:      DICOM_CLASS_ENHANCED_SR,
H\ltdicocx.h:      DICOM_CLASS_COMPREHENSIVE_SR,
H\ltdicocx.h:      DICOM_CLASS_MODALITY_WORKLIST,
H\ltdicocx.h:      DICOM_CLASS_GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,
H\ltdicocx.h:      DICOM_CLASS_BASIC_VOICE_AUDIO,                    
H\ltdicocx.h:      DICOM_CLASS_12_LEAD_ECG,                          
H\ltdicocx.h:      DICOM_CLASS_GENERAL_ECG,                          
H\ltdicocx.h:      DICOM_CLASS_AMBULATORY_ECG,                       
H\ltdicocx.h:      DICOM_CLASS_HEMODYNAMIC,                          
H\ltdicocx.h:      DICOM_CLASS_BASIC_CARDIAC_EP,                     
H\ltdicocx.h:      DICOM_CLASS_MAX,
H\ltdicocx.h:      DICOM_CLASS_UNKNOWN = 65535,
H\ltdicocx.h:   } DicomClassConstants;
H\ltdicocx.h:      DICOM_MODULE_PATIENT=0,
H\ltdicocx.h:      DICOM_MODULE_GENERAL_STUDY,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_STUDY,
H\ltdicocx.h:      DICOM_MODULE_GENERAL_SERIES,
H\ltdicocx.h:      DICOM_MODULE_CR_SERIES,
H\ltdicocx.h:      DICOM_MODULE_GENERAL_EQUIPMENT,
H\ltdicocx.h:      DICOM_MODULE_GENERAL_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_PIXEL,
H\ltdicocx.h:      DICOM_MODULE_CONTRAST_BOLUS,
H\ltdicocx.h:      DICOM_MODULE_CR_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_OVERLAY_PLANE,
H\ltdicocx.h:      DICOM_MODULE_CURVE,
H\ltdicocx.h:      DICOM_MODULE_MODALITY_LUT,
H\ltdicocx.h:      DICOM_MODULE_VOI_LUT,
H\ltdicocx.h:      DICOM_MODULE_SOP_COMMON,
H\ltdicocx.h:      DICOM_MODULE_FRAME_OF_REFERENCE,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_PLANE,
H\ltdicocx.h:      DICOM_MODULE_CT_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_MR_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_NM_PET_PATIENT_ORIENTATION,
H\ltdicocx.h:      DICOM_MODULE_NM_IMAGE_PIXEL,
H\ltdicocx.h:      DICOM_MODULE_MULTI_FRAME,
H\ltdicocx.h:      DICOM_MODULE_NM_MULTI_FRAME,
H\ltdicocx.h:      DICOM_MODULE_NM_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_NM_ISOTOPE,
H\ltdicocx.h:      DICOM_MODULE_NM_DETECTOR,
H\ltdicocx.h:      DICOM_MODULE_NM_TOMO_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_NM_MULTI_GATED_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_NM_PHASE,
H\ltdicocx.h:      DICOM_MODULE_NM_RECONSTRUCTION,
H\ltdicocx.h:      DICOM_MODULE_MULTI_FRAME_OVERLAY,
H\ltdicocx.h:      DICOM_MODULE_US_FRAME_OF_REFERENCE,
H\ltdicocx.h:      DICOM_MODULE_PALETTE_COLOR_LOOCKUP_TABLE,
H\ltdicocx.h:      DICOM_MODULE_US_REGION_CALIBRATION,
H\ltdicocx.h:      DICOM_MODULE_US_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_CURVE_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_AUDIO,
H\ltdicocx.h:      DICOM_MODULE_CINE,
H\ltdicocx.h:      DICOM_MODULE_SC_EQUIPMENT,
H\ltdicocx.h:      DICOM_MODULE_SC_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_OVERLAY_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_SUMMARY,
H\ltdicocx.h:      DICOM_MODULE_STUDY_CONTENT,
H\ltdicocx.h:      DICOM_MODULE_LUT_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_FRAME_POINTERS,
H\ltdicocx.h:      DICOM_MODULE_MASK,
H\ltdicocx.h:      DICOM_MODULE_DISPLAY_SHUTTER,
H\ltdicocx.h:      DICOM_MODULE_DEVICE,
H\ltdicocx.h:      DICOM_MODULE_THERAPY,
H\ltdicocx.h:      DICOM_MODULE_XA_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_XA_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_XA_COLLIMATOR,
H\ltdicocx.h:      DICOM_MODULE_XA_TABLE,
H\ltdicocx.h:      DICOM_MODULE_XA_POSITIONER,
H\ltdicocx.h:      DICOM_MODULE_BIPLANE_SEQUENCE,
H\ltdicocx.h:      DICOM_MODULE_BIPLANE_OVERLAY,
H\ltdicocx.h:      DICOM_MODULE_BIPLANE_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_XRF_POSITIONER,
H\ltdicocx.h:      DICOM_MODULE_XRF_TOMO_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_RT_SERIES,
H\ltdicocx.h:      DICOM_MODULE_RT_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_APPROVAL,
H\ltdicocx.h:      DICOM_MODULE_RT_DOSE,
H\ltdicocx.h:      DICOM_MODULE_RT_DVH,
H\ltdicocx.h:      DICOM_MODULE_STRUCTURE_SET,
H\ltdicocx.h:      DICOM_MODULE_ROI_CONTOUR,
H\ltdicocx.h:      DICOM_MODULE_RT_DOSE_ROI,
H\ltdicocx.h:      DICOM_MODULE_RT_OBSERVATIONS,
H\ltdicocx.h:      DICOM_MODULE_RT_GENERAL_PLAN,
H\ltdicocx.h:      DICOM_MODULE_RT_PRESCRIPTION,
H\ltdicocx.h:      DICOM_MODULE_RT_TOLERANCE_TABLES,
H\ltdicocx.h:      DICOM_MODULE_RT_PATIENT_SETUP,
H\ltdicocx.h:      DICOM_MODULE_RT_FRACTION_SCHEME,
H\ltdicocx.h:      DICOM_MODULE_RT_BEAMS,
H\ltdicocx.h:      DICOM_MODULE_RT_BRACHY_APPLICATION_SETUPS,
H\ltdicocx.h:      DICOM_MODULE_PET_SERIES,
H\ltdicocx.h:      DICOM_MODULE_PET_ISOTOPE,
H\ltdicocx.h:      DICOM_MODULE_PET_MULTIGATED_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_PET_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_PET_CURVE,
H\ltdicocx.h:      DICOM_MODULE_PRINTER_CHARACTERISTICS,
H\ltdicocx.h:      DICOM_MODULE_FILM_BOX,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_LIST,
H\ltdicocx.h:      DICOM_MODULE_ANNOTATION_LIST,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_LIST,
H\ltdicocx.h:      DICOM_MODULE_PRESENTATION_LUT_LIST,
H\ltdicocx.h:      DICOM_MODULE_HC_EQUIPMENT,
H\ltdicocx.h:      DICOM_MODULE_HC_GRAYSCALE_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_HC_COLOR_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_DEMOGRAPHIC,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_MEDICAL,
H\ltdicocx.h:      DICOM_MODULE_VISIT_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_VISIT_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_VISIT_ADMISSION,
H\ltdicocx.h:      DICOM_MODULE_VISIT_STAY,
H\ltdicocx.h:      DICOM_MODULE_VISIT_DISCHARGE,
H\ltdicocx.h:      DICOM_MODULE_VISIT_SCHEDULING,
H\ltdicocx.h:      DICOM_MODULE_STUDY_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_STUDY_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_STUDY_CLASSIFICATION,
H\ltdicocx.h:      DICOM_MODULE_STUDY_SCHEDULING,
H\ltdicocx.h:      DICOM_MODULE_STUDY_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_STUDY_READ,
H\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_ACQUISITION,
H\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT,
H\ltdicocx.h:      DICOM_MODULE_RESULTS_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_RESULTS_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_RESULTS_IMPRESSIONS,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_STATE,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_RECORDING,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_TRANSCRIPTION,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_APPROVAL,
H\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_SESSION_PRESENTATION,
H\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_SESSION_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_BOX_PRESENTATION,
H\ltdicocx.h:      DICOM_MODULE_BASIC_FILM_BOX_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_PRESENTATION_GRAYSCALE,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_PRESENTATION_COLOR,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_BOX_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_BASIC_ANNOTATION_PRESENTATION,
H\ltdicocx.h:      DICOM_MODULE_PRINT_JOB,
H\ltdicocx.h:      DICOM_MODULE_PRINTER,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_PRESENTATION,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_OVERLAY_BOX_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_STORAGE_COMMITMENT,
H\ltdicocx.h:      DICOM_MODULE_GENERAL_QUEUE,
H\ltdicocx.h:      DICOM_MODULE_PRINT_QUEUE,
H\ltdicocx.h:      DICOM_MODULE_PERFORMED_PROCEDURE_STEP_RELATIONSHIP,
H\ltdicocx.h:      DICOM_MODULE_PERFORMED_PROCEDURE_STEP_INFORMATION,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_ACQUISITION_RESULTS,
H\ltdicocx.h:      DICOM_MODULE_RADIATION_DOSE,
H\ltdicocx.h:      DICOM_MODULE_BILLING_AND_MATERIAL_MANAGEMENT_CODES,
H\ltdicocx.h:      DICOM_MODULE_PRESENTATION_LUT,
H\ltdicocx.h:      DICOM_MODULE_PRINT_REQUEST,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_RELATIONSHIP_META,
H\ltdicocx.h:      DICOM_MODULE_NM_SERIES_RETIRED,                      
H\ltdicocx.h:      DICOM_MODULE_NM_EQUIPMENT_RETIRED,                   
H\ltdicocx.h:      DICOM_MODULE_NM_IMAGE_RETIRED,                               
H\ltdicocx.h:      DICOM_MODULE_NM_SPECT_ACQUISITION_IMAGE_RETIRED,     
H\ltdicocx.h:      DICOM_MODULE_NM_MULTI_GATED_ACQUISITION_IMAGE_RETIRED,
H\ltdicocx.h:      DICOM_MODULE_US_FRAME_OF_REFERENCE_RETIRED,
H\ltdicocx.h:      DICOM_MODULE_US_REGION_CALIBRATION_RETIRED,
H\ltdicocx.h:      DICOM_MODULE_US_IMAGE_RETIRED,             
H\ltdicocx.h:      DICOM_MODULE_FILESET_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_DIRECTORY_INFORMATION,
H\ltdicocx.h:      DICOM_MODULE_PATIENT_KEY,
H\ltdicocx.h:      DICOM_MODULE_STUDY_KEY,
H\ltdicocx.h:      DICOM_MODULE_SERIES_KEY,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_KEY,
H\ltdicocx.h:      DICOM_MODULE_OVERLAY_KEY,
H\ltdicocx.h:      DICOM_MODULE_MODALITY_LUT_KEY,
H\ltdicocx.h:      DICOM_MODULE_VOI_LUT_KEY,
H\ltdicocx.h:      DICOM_MODULE_CURVE_KEY,
H\ltdicocx.h:      DICOM_MODULE_STORED_PRINT_KEY,
H\ltdicocx.h:      DICOM_MODULE_RT_DOSE_KEY,
H\ltdicocx.h:      DICOM_MODULE_RT_STRUCTURE_SET_KEY,
H\ltdicocx.h:      DICOM_MODULE_RT_PLAN_KEY,
H\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_RECORD_KEY,
H\ltdicocx.h:      DICOM_MODULE_TOPIC_KEY,
H\ltdicocx.h:      DICOM_MODULE_VISIT_KEY,
H\ltdicocx.h:      DICOM_MODULE_RESULTS_KEY,
H\ltdicocx.h:      DICOM_MODULE_INTERPRETATION_KEY,
H\ltdicocx.h:      DICOM_MODULE_STUDY_COMPONENT_KEY,
H\ltdicocx.h:      DICOM_MODULE_PRIVATE_KEY,
H\ltdicocx.h:      DICOM_MODULE_SPECIMEN_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_DX_SERIES,
H\ltdicocx.h:      DICOM_MODULE_DX_ANATOMY_IMAGED,
H\ltdicocx.h:      DICOM_MODULE_DX_IMAGE,         
H\ltdicocx.h:      DICOM_MODULE_DX_DETECTOR,      
H\ltdicocx.h:      DICOM_MODULE_DX_POSITIONING,
H\ltdicocx.h:      DICOM_MODULE_ACQUISITION_CONTEXT,
H\ltdicocx.h:      DICOM_MODULE_XA_ACQUISITION_DOSE,
H\ltdicocx.h:      DICOM_MODULE_XA_GENERATION,
H\ltdicocx.h:      DICOM_MODULE_XA_FILTRATION,
H\ltdicocx.h:      DICOM_MODULE_XA_GRID,
H\ltdicocx.h:      DICOM_MODULE_IMAGE_HISTOGRAM,
H\ltdicocx.h:      DICOM_MODULE_MAMMOGRAPHY_SERIES,
H\ltdicocx.h:      DICOM_MODULE_MAMMOGRAPHY_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_INTRAORAL_SERIES,
H\ltdicocx.h:      DICOM_MODULE_INTRAORAL_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_RT_GENERAL_TREATMENT_RECORD,
H\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_MACHINE_RECORD,
H\ltdicocx.h:      DICOM_MODULE_MEASURED_DOSE_REFERENCE_RECORD,
H\ltdicocx.h:      DICOM_MODULE_CALCULATED_DOSE_REFERENCE_RECORD,
H\ltdicocx.h:      DICOM_MODULE_RT_BEAMS_SESSION_RECORD,
H\ltdicocx.h:      DICOM_MODULE_RT_TREATMENT_SUMMARY_RECORD,
H\ltdicocx.h:      DICOM_MODULE_RT_BRACHY_SESSION_RECORD,
H\ltdicocx.h:      DICOM_MODULE_VL_IMAGE,
H\ltdicocx.h:      DICOM_MODULE_SLIDE_COORDINATES,
H\ltdicocx.h:      DICOM_MODULE_BASIC_PRINT_IMAGE_OVERLAY_BOX,
H\ltdicocx.h:      DICOM_MODULE_PRINTER_CONFIGURATION,
H\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_SERIES,
H\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_GENERAL,
H\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_CONTENT,
H\ltdicocx.h:      DICOM_MODULE_SR_DOCUMENT_KEY,
H\ltdicocx.h:      DICOM_MODULE_SCHEDULED_PROCEDURE_STEP,
H\ltdicocx.h:      DICOM_MODULE_REQUESTED_PROCEDURE,
H\ltdicocx.h:      DICOM_MODULE_IMAGING_SERVICE_REQUEST,
H\ltdicocx.h:      DICOM_MODULE_PRESENTATION_SERIES,
H\ltdicocx.h:      DICOM_MODULE_PRESENTATION_STATE,
H\ltdicocx.h:      DICOM_MODULE_BITMAP_DISPLAY_SHUTTER,
H\ltdicocx.h:      DICOM_MODULE_OVERLAY_CURVE_ACTIVATION,
H\ltdicocx.h:      DICOM_MODULE_DISPLAYED_AREA,
H\ltdicocx.h:      DICOM_MODULE_GRAPHIC_ANNOTATION,
H\ltdicocx.h:      DICOM_MODULE_SPATIAL_TRANSFORMATION,
H\ltdicocx.h:      DICOM_MODULE_GRAPHIC_LAYER,
H\ltdicocx.h:      DICOM_MODULE_SOFTCOPY_VOI_LUT,
H\ltdicocx.h:      DICOM_MODULE_SOFTCOPY_PRESENTATION_LUT,
H\ltdicocx.h:      DICOM_MODULE_SYNCHRONIZATION,
H\ltdicocx.h:      DICOM_MODULE_WAVEFORM_IDENTIFICATION,
H\ltdicocx.h:      DICOM_MODULE_WAVEFORM,
H\ltdicocx.h:      DICOM_MODULE_WAVEFORM_ANNOTATION,
H\ltdicocx.h:      DICOM_MODULE_PRESENTATION_KEY,
H\ltdicocx.h:      DICOM_MODULE_WAVEFORM_KEY,
H\ltdicocx.h:      DICOM_MODULE_MAX,
H\ltdicocx.h:   } DicomModuleConstants;
H\ltdicocx.h:      TAG_NUCLEAR_MEDICINE_SERIES_TYPE_RETIRED                   = 0x00080042UL,
H\ltdicocx.h:      TAG_MEDICAL_RECORD_LOCATOR                                 = 0x00101090UL,
H\ltdicocx.h:      TAG_MEDICAL_ALERTS                                         = 0x00102000UL,
H\ltdicocx.h:      TAG_POSITION_REFERENCE_INDICATOR                           = 0x00201040UL,
H\ltdicocx.h:      TAG_PRE_MEDICATION                                         = 0x00400012UL,
H\ltdicocx.h:   } DicomDataSetTagConstants;
H\ltdicocx.h:   } DicomCommandSetTagConstants;
H\ltdicocx.h:      DICOM_IOD_TYPE_CLASS=0,             // Class type
H\ltdicocx.h:      DICOM_IOD_TYPE_MODULE,              // Module type
H\ltdicocx.h:      DICOM_IOD_TYPE_ELEMENT,             // Element type
H\ltdicocx.h:      DICOM_IOD_TYPE_MAX,
H\ltdicocx.h:   } DicomIODTypeConstants;
H\ltdicocx.h:      DICOM_IOD_USAGE_M,                  // Mandatory IOD   - M - (U - Unique for key)
H\ltdicocx.h:      DICOM_IOD_USAGE_C,                  // Conditional IOD - C - (R - Required for key)
H\ltdicocx.h:      DICOM_IOD_USAGE_U,                  // Optional IOD    - U - (O - Optional for key)
H\ltdicocx.h:      DICOM_IOD_USAGE_1,                  // Mandatory IOD   - 1  (type 1)
H\ltdicocx.h:      DICOM_IOD_USAGE_1C,                 // Conditional IOD - 1C (type 1)
H\ltdicocx.h:      DICOM_IOD_USAGE_2,                  // Mandatory IOD   - 2  (type 2)
H\ltdicocx.h:      DICOM_IOD_USAGE_2C,                 // Conditional IOD - 2C (type 2)
H\ltdicocx.h:      DICOM_IOD_USAGE_3,                  // Optional IOD    - 3  (type 3)
H\ltdicocx.h:      DICOM_IOD_USAGE_MAX,
H\ltdicocx.h:   } DicomIODUsageConstants;
H\ltdicocx.h:   } DicomMiscConstants;
H\ltdicocx.h:   } DicomColorOrderConstants;
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_NONE=0,
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_RLE,
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LOSSLESS,
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LOSSY,
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LS_LOSSLESS,
H\ltdicocx.h:      DICOM_IMAGE_COMPRESSION_JPEG_LS_LOSSY,
H\ltdicocx.h:   } DicomImageCompressionConstants;
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_MONOCHROME1=0,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_MONOCHROME2,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_PALETTE_COLOR,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_RGB,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_ARGB,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_CMYK,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_YBR_FULL_422,
H\ltdicocx.h:      DICOM_IMAGE_PHOTOMETRIC_YBR_FULL,
H\ltdicocx.h:   } DicomImagePhotometricConstants;
H\ltdicocx.h:   } DicomCommandSetConstants;
H\ltdicocx.h:      DICOM_PRIORITY_LOW        = 0x0002,
H\ltdicocx.h:      DICOM_PRIORITY_MEDIUM     = 0x0000,
H\ltdicocx.h:      DICOM_PRIORITY_HIGH       = 0x0001,
H\ltdicocx.h:   } DicomCommandSetMessagePriorities;
H\ltdicocx.h:   } DicomCommandPriorities;
H\ltdicocx.h:   } DicomCommandSetDataSetTypes;
H\ltdicocx.h:   } DicomCommandStatusConstants;
H\ltdicocx.h:      DICOM_UID_TYPE_OTHER          = 0,     // Unknown
H\ltdicocx.h:      DICOM_UID_TYPE_TRANSFER1      = 1,     // Transfer Syntax - Uncompressed Image
H\ltdicocx.h:      DICOM_UID_TYPE_TRANSFER2      = 2,     // Transfer Syntax - Compressed Image
H\ltdicocx.h:      DICOM_UID_TYPE_CLASS          = 3,     // SOP Class
H\ltdicocx.h:      DICOM_UID_TYPE_META_CLASS     = 4,     // Meta SOP Class
H\ltdicocx.h:      DICOM_UID_TYPE_INSTANCE       = 5,     // SOP Instance
H\ltdicocx.h:      DICOM_UID_TYPE_APPLICATION    = 6,     // Application Context Name
H\ltdicocx.h:   } DicomUIDTypes;
H\ltdicocx.h:   #define UID_JPEG_LOSSLESS_NONHIER_14B                 "1.2.840.10008.1.2.4.70"         // JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])
H\ltdicocx.h:   #define UID_NM_IMAGE_STORAGE_RETIRED                  "1.2.840.10008.5.1.4.1.1.5"      // Nuclear Medicine Image Storage (Retired)
H\ltdicocx.h:   #define UID_NM_IMAGE_STORAGE                          "1.2.840.10008.5.1.4.1.1.20"     // Nuclear Medicine Image Storage
H\ltdicocx.h:   #define UID_GE_MAGNETIC_RESONANCE_IMAGE_INFORMATION_OBJECT    "1.2.840.113619.4.2"             // GE Private Dicom Magnetic Resonance Image Information Object
H\ltdicocx.h:   #define UID_GE_COMPUTED_TOMOGRAPHY_IMAGE_INFORMATION_OBJECT   "1.2.840.113619.4.3"             // GE Private Dicom Computed Tomography Image Information Object
H\ltdicocx.h:   #define UID_GE_DISPLAY_IMAGERMATION_INFO_OBJECT               "1.2.840.113619.4.4"             // GE Private Dicom Display Imagermation Info Object
H\ltdicocx.h:#endif                          /* _LTDICOCX_H_ */
H\LTDLG.H:   L_UINT32    uProcess ;	   // flag indicating which function was chosen.  
H\LTDLG.H:   L_UINT32 uType ;	// flag indicating which function was chosen.  
H\LTDLG.H:   FS_DICOM8,
H\LTDLG.H:   FS_DICOM16,
H\LTDLG.H:   FS_DICOM24,
H\LTDLG.H:// DICOM file subtypes (8-bit)       
H\LTDLG.H:#define DLG_FS_SUB_DICOM8_GRAY                  0x0001
H\LTDLG.H:#define DLG_FS_SUB_DICOM8_COLOR                 0x0002
H\LTDLG.H:// DICOM file subtypes (Other-bit)   
H\LTDLG.H:#define DLG_FS_SUB_DICOM_RLE_GRAY               0x0001
H\LTDLG.H:#define DLG_FS_SUB_DICOM_RLE_COLOR              0x0002
H\LTDLG.H:#define DLG_FS_SUB_DICOM_JPEG_GRAY              0x0004
H\LTDLG.H:#define DLG_FS_SUB_DICOM_LOSSLESSJPEG_GRAY      0x0008
H\LTDLG.H:#define DLG_FS_SUB_DICOM_JPEG_COLOR             0x0010
H\LTDLG.H:#define DLG_FS_SUB_DICOM_LOSSLESSJPEG_COLOR     0x0020
H\LTDLG.H:/* Dialog String Indices */
H\LTDLG.H:   /* dicom */
H\LTDLG.H:   DLG_STR_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\LTDLG.H:   DLG_STR_FILE_DICOM_COLOR,   /* DICOM Color            */
H\LTDLG.H:   DLG_STR_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\LTDLG.H:   DLG_STR_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\LTDLG.H:   DLG_STR_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\LTDLG.H:   DLG_STR_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\LTDLG.H:   DLG_STR_DICOM8,
H\LTDLG.H:   DLG_STR_DICOM16,
H\LTDLG.H:   DLG_STR_DICOM24,
H\LTDLG.H:   /* DICOM file subtypes (8-bit)       */
H\LTDLG.H:   DLG_STR_SUB_DICOM_GRAY,
H\LTDLG.H:   DLG_STR_SUB_DICOM_COLOR,
H\LTDLG.H:   /* DICOM file subtypes (Other-bit)   */
H\LTDLG.H:   DLG_STR_SUB_DICOM_RLE_GRAY,
H\LTDLG.H:   DLG_STR_SUB_DICOM_RLE_COLOR,
H\LTDLG.H:   DLG_STR_SUB_DICOM_JPEG_GRAY,
H\LTDLG.H:   DLG_STR_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\LTDLG.H:   DLG_STR_SUB_DICOM_JPEG_COLOR,
H\LTDLG.H:   DLG_STR_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\LTDLG.H:   DLG_STR_EXT_DICOM,
H\LTDLG.H:   DLG_STR_J2KPREDICTABLETERMINATION,
H\LTDLGOCX.H:      DLG_FS_DICOM8,
H\LTDLGOCX.H:      DLG_FS_DICOM16,
H\LTDLGOCX.H:      DLG_FS_DICOM24,
H\LTDLGOCX.H:      /* DICOM file subtypes (8-bit)       */
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM8_GRAY                  = 0x0001,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM8_COLOR                 = 0x0002,
H\LTDLGOCX.H:      /* DICOM file subtypes (Other-bit)   */
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_RLE_GRAY               = 0x0001,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_RLE_COLOR              = 0x0002,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_JPEG_GRAY              = 0x0004,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_LOSSLESSJPEG_GRAY      = 0x0008,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_JPEG_COLOR             = 0x0010,
H\LTDLGOCX.H:       DLG_FS_SUB_DICOM_LOSSLESSJPEG_COLOR     = 0x0020,
H\LTDLGOCX.H:      /* dicom */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_GRAY,    /* DICOM Grayscale        */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_COLOR,   /* DICOM Color            */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_RLE_GRAY,/* RLE Grayscale          */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_RLE_COLOR,/* RLE Color             */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_JPEG_GRAY,/* JPEG Grayscale        */
H\LTDLGOCX.H:      DLG_STRING_FILE_DICOM_JPEG_COLOR,/* JPEG Color           */
H\LTDLGOCX.H:      DLG_STRING_DICOM8,
H\LTDLGOCX.H:      DLG_STRING_DICOM16,
H\LTDLGOCX.H:      DLG_STRING_DICOM24,
H\LTDLGOCX.H:      /* DICOM file subtypes (8-bit)       */
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM8_GRAY,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM8_COLOR,
H\LTDLGOCX.H:      /* DICOM file subtypes (Other-bit)   */
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_RLE_GRAY,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_RLE_COLOR,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_JPEG_GRAY,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_GRAY,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_JPEG_COLOR,
H\LTDLGOCX.H:      DLG_STRING_SUB_DICOM_LOSSLESSJPEG_COLOR,
H\LTDLGOCX.H:      DLG_STRING_EXT_DICOM,
H\LTDLGOCX.H:      DLG_STRING_J2KPREDICTABLETERMINATION,
H\LTDLGRES.H:// DICOM info dialog IDs
H\LTDLGRES.H:#define LT_DLG_DICOMFILEINFO_IDDLG                                   24100
H\LTDLGRES.H:#define LT_DLG_DICOMFILEINFO_IDLST_INFOLIST                          24101
H\LTDLGRES.H:#define LT_DLG_J2KOPTIONS_IDCHK_PREDICTABLETERMINATION               25833
H\ltdncocx.h:      PDU_REJECT_SOURCE_USER             = 1,  // DICOM UL service-user
H\ltdncocx.h:      PDU_REJECT_SOURCE_PROVIDER1        = 2,  // DICOM UL service-provider (ASCE related function)
H\ltdncocx.h:      PDU_REJECT_SOURCE_PROVIDER2        = 3,  // DICOM UL service-provider (Presentation related function)
H\ltdncocx.h:   #define UID_JPEG_LOSSLESS_NONHIER_14B              "1.2.840.10008.1.2.4.70"         // JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])
H\ltdncocx.h:   #define UID_NM_IMAGE_STORAGE_RETIRED               "1.2.840.10008.5.1.4.1.1.5"      // Nuclear Medicine Image Storage (Retired)
H\ltdncocx.h:   #define UID_NM_IMAGE_STORAGE                       "1.2.840.10008.5.1.4.1.1.20"     // Nuclear Medicine Image Storage
H\ltdncocx.h:   #define UID_GE_MAGNETIC_RESONANCE_IMAGE_INFORMATION_OBJECT    "1.2.840.113619.4.2"             // GE Private Dicom Magnetic Resonance Image Information Object
H\ltdncocx.h:   #define UID_GE_COMPUTED_TOMOGRAPHY_IMAGE_INFORMATION_OBJECT   "1.2.840.113619.4.3"             // GE Private Dicom Computed Tomography Image Information Object
H\ltdncocx.h:   #define UID_GE_DISPLAY_IMAGERMATION_INFO_OBJECT               "1.2.840.113619.4.4"             // GE Private Dicom Display Imagermation Info Object
H\ltdncocx.h:      DICOM_SECURE_NONE         =  0xABCD0000,
H\ltdncocx.h:      DICOM_SECURE_ISCL         =  0xABCD0001,
H\ltdncocx.h:      DICOM_SECURE_TLS          =  0xABCD0002,
H\ltdncocx.h:   } DicomSecurityMode;
H\ltdncocx.h:      DICOM_TLS_DHE_RSA_WITH_DES_CBC_SHA        = 0x12,
H\ltdncocx.h:      DICOM_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA   = 0x13,  // mandatory standard
H\ltdncocx.h:   } DicomCiphersuiteConstants;
H\ltdncocx.h:      DICOM_CRYPT_DES   = 0x01,
H\ltdncocx.h:      DICOM_CRYPT_3DES  = 0x02,
H\ltdncocx.h:   } DicomEncryptionMethod;
H\ltdncocx.h:      DICOM_MAC_SHA1  = 0x10,
H\ltdncocx.h:   } DicomMACTypeConstants;
H\ltdncocx.h:      DICOM_MUTUALAUTH_RSA = 0x20,
H\ltdncocx.h:   } DicomMutualAuthMethod;
H\ltdncocx.h:      DICOM_KEYEXCHANGE_RSA_SIGNED_DHE = 0x40,
H\ltdncocx.h:   } DicomKeyExchangeAlgorithm;
H\ltdncocx.h:   } DicomTLSCertType;
H\ltdncocx.h:      DICOM_ISCL_MUTUAL_AUTH_3P4W       =  0x00000000,
H\ltdncocx.h:   } DicomMutualAuthMode;
H\ltdncocx.h:      DICOM_ISCL_ENCRYPT_NONE        =  0x00000000,
H\ltdncocx.h:      DICOM_ISCL_ENCRYPT_DESCBC      =  0x00001212,
H\ltdncocx.h:   } DicomEncryptionMode;
H\ltdncocx.h:      DICOM_ISCL_MAC_NONE               =  0x00000000,
H\ltdncocx.h:      DICOM_ISCL_MAC_MD5                =  0x00001441,
H\ltdncocx.h:      DICOM_ISCL_MAC_DESMAC             =  0x00004001,
H\ltdncocx.h:   } DicomMsgAuthCode;
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR1 = 0x00000001,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR2 = 0x00000002,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR3 = 0x00000003,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR4 = 0x00000004,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR5 = 0x00000005,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR6 = 0x00000006,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR7 = 0x00000007,
H\ltdncocx.h:      DIC_ISCL_CRYPT_KEY_PAIR8 = 0x00000008,
H\ltdncocx.h:      DIC_ISCL_UNIQUE_SESSION_KEYS = 0x00000010
H\ltdncocx.h:   } DicomISCLCryptKeyPair;
H\Lterr.h:#define ERROR_MEDICAL_NOT_ENABLED            -314  /* Medical Express capability is required to use this function */
H\Lterr.h:#define ERROR_MEDICAL_NET_NOT_ENABLED        -318  /* Medical Network Express capability is required to use this function */
H\Lterr.h:#define ERROR_DICOM_NOT_ENABLED                 -803  /* DICOM support is required to use this function */
H\Ltfil.h:#define FILE_DICOM_GRAY          89
H\Ltfil.h:#define FILE_DICOM_COLOR         90
H\Ltfil.h:#define FILE_DICOM_RLE_GRAY      125
H\Ltfil.h:#define FILE_DICOM_RLE_COLOR     126
H\Ltfil.h:#define FILE_DICOM_JPEG_GRAY     127
H\Ltfil.h:#define FILE_DICOM_JPEG_COLOR    128
H\Ltfil.h:#define FILE_DICOM_J2K_GRAY         293
H\Ltfil.h:#define FILE_DICOM_J2K_COLOR        294
H\Ltfil.h:   the following indicate the associated strings are nul terminated
H\Ltfil.h:#define CMNT_SZPATIENTNAME          10 /* Patient name (DICOM) */
H\Ltfil.h:#define CMNT_SZPATIENTID            11 /* Patient ID (DICOM) */
H\Ltfil.h:#define CMNT_SZPATIENTBIRTHDATE     12 /* Patient birthdate (DICOM) */
H\Ltfil.h:#define CMNT_SZPATIENTSEX           13 /* Patient sex (DICOM) */
H\Ltfil.h:#define CMNT_SZSTUDYINSTANCE        14 /* Study instance ID (DICOM) */
H\Ltfil.h:#define CMNT_SZSTUDYDATE            15 /* Study date (DICOM) */
H\Ltfil.h:#define CMNT_SZSTUDYTIME            16 /* Study time (DICOM) */
H\Ltfil.h:#define CMNT_SZSTUDYREFERRINGPHYSICIAN 17 /* Referring physician (DICOM) */
H\Ltfil.h:#define CMNT_SZSERIESMODALITY       18 /* Series modality (DICOM) */
H\Ltfil.h:#define CMNT_SZSERIESID             19 /* Series ID (DICOM) */
H\Ltfil.h:#define CMNT_SZSERIESNUMBER         20 /* Series number (DICOM) */
H\Ltfil.h:#define FILEINFO_LOSSLESSJPEG          0x00000400  /* Internal flag, indicating that the JPEG file uses the lossless compression.
H\Ltfil.h:#define ELO_USEBADJPEGPREDICTOR     0x00001000 /* (JPEG only) Load lossless JPEG file using an incorrect predictor */
H\Ltfil.h:   L_UINT   bPredictableTermination:1;
H\Ltfil.h:   L_UINT   uDecompLevel;   // Number of decomposition levels, dyadic decomposition (Zero Implies no transform )
H\Ltfil.h://Flags to indicate if beginning, end of a strip
H\Ltfil.h:   L_UINT           uStripsOrTiles;   // DECOMPRESS_STRIPS -- indicates that we are decompressing strips of data
H\Ltfil.h:                                      // DECOMPRESS_TILES  -- indicates that we are decompressing tiles of data
H\ltkey.h:#define L_KEY_MEDICAL            MYTEXT("")
H\ltkey.h:#define L_KEY_MEDICAL_NET        MYTEXT("")
H\ltkey.h:#define L_KEY_DICOM              MYTEXT("")
H\ltkey.h:#define L_KEY_MEDICAL_SECURITY   MYTEXT("")
H\Ltkrn.h:#define TOOLKIT_LEVEL_MEDICAL        0x02 /* Medical Toolkit. */
H\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL, L_KEY_MEDICAL); \
H\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL_NET, L_KEY_MEDICAL_NET); \
H\LTLCK.H:   L_UnlockSupport(L_SUPPORT_DICOM, L_KEY_DICOM);\
H\LTLCK.H:   L_UnlockSupport(L_SUPPORT_MEDICAL_SECURITY, L_KEY_MEDICAL_SECURITY);\
H\ltlck_.h:#define L_SUPPORT_MEDICAL              6
H\ltlck_.h:#define L_SUPPORT_MEDICAL_NET          8
H\ltlck_.h:#define L_SUPPORT_DICOM                26
H\ltlck_.h:#define L_SUPPORT_MEDICAL_SECURITY     29
H\LTOCR.h:   LANG_PACK_ID_GREENLANDIC  =62,
H\LTOCR.h:   LANG_PACK_ID_ICELANDIC    =64,
H\LTSCR.H:   L_BOOL bCaptureByIndex,                 //TRUE indicates that pResID is the index position of the
H\LTSCR.H:                                          //FALSE indicates that pResID is the resource ID of the 
H\lttmb.h:#define BROWSE_LOADING 2 /* used to indicate image is being loaded */
H\lttmb.h:#define BROWSE_SKIPPED 3 /* used to indicate image was skipped b/c
H\lttmb.h:#define BROWSE_PRELOAD 4 /* used to indicate image is about to be
H\lttmbocx.h:      BROWSE_LOADING = 2, // used to indicate image is being loaded
H\lttmbocx.h:      BROWSE_SKIPPED = 3, // used to indicate image was skipped b/c it was larger than the specified range
H\lttmbocx.h:      BROWSE_PRELOAD = 4, // used to indicate image is about to be loaded
H\Lttwn.h:#define TWAIN_SHOWSTATUS           0x0002 /* Show the Status Indicator, if it
H\ltvecocx.h:#define FILE_DICOM_GRAY          89
H\ltvecocx.h:#define FILE_DICOM_COLOR         90
H\ltvecocx.h:#define FILE_DICOM_RLE_GRAY      125
H\ltvecocx.h:#define FILE_DICOM_RLE_COLOR     126
H\ltvecocx.h:#define FILE_DICOM_JPEG_GRAY     127
H\ltvecocx.h:#define FILE_DICOM_JPEG_COLOR    128
H\Ltwnd.h:#define L_BS_MDICHILD     0x00000100   /* The Window is an MDI Child */
H\lvdlg.h:/* Dialog String Indices */
H\l_bitmap.h:#include "ltdic.h"
H\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL, L_KEY_MEDICAL); \
H\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL_NET, L_KEY_MEDICAL_NET); \
H\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_DICOM,   L_KEY_DICOM); \
H\l_com.h:   (leadraster).UnlockSupport((RasterSupportLockConstants)L_SUPPORT_MEDICAL_SECURITY, L_KEY_MEDICAL_SECURITY); \
H\L_FOX.H:#DEFINE VERSIONLEVEL_MEDICAL 2
H\L_FOX.H:#DEFINE FILE_DICOM_GRAY 89
H\L_FOX.H:#DEFINE FILE_DICOM_COLOR 90
H\L_FOX.H:#DEFINE FILE_DICOM_RLE_GRAY      125
H\L_FOX.H:#DEFINE FILE_DICOM_RLE_COLOR     126
H\L_FOX.H:#DEFINE FILE_DICOM_JPEG_GRAY     127
H\L_FOX.H:#DEFINE FILE_DICOM_JPEG_COLOR    128
H\L_FOX.H:#DEFINE ERROR_MEDICAL_NOT_ENABLED 20314
H\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL 6
H\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL_NET 8
H\L_FOX.H:#DEFINE L_SUPPORT_DICOM               26
H\L_FOX.H:#DEFINE L_SUPPORT_MEDICAL_SECURITY    29
H\L_FOX.H:#DEFINE L_KEY_MEDICAL            ""
H\L_FOX.H:#DEFINE L_KEY_MEDICAL_NET        ""
H\L_FOX.H:#DEFINE L_KEY_DICOM              ""
H\L_FOX.H:#DEFINE L_KEY_MEDICAL_SECURITY   ""
H\L_FOX.H:#DEFINE DLG_FS_DICOM (4 * 16)
H\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_MEDICAL            , L_KEY_MEDICAL           ); \
H\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_MEDICAL_NET        , L_KEY_MEDICAL_NET       ); \
H\L_OCX40.H:   (leadocx).UnlockSupport(L_SUPPORT_DICOM              , L_KEY_DICOM             ); \
H\L_OCX40.H:      VERSIONLEVEL_MEDICAL = 2,
H\L_OCX40.H:      FILE_DICOM_GRAY = 89,
H\L_OCX40.H:      FILE_DICOM_COLOR = 90,
H\L_OCX40.H:      FILE_DICOM_RLE_GRAY = 125,
H\L_OCX40.H:      FILE_DICOM_RLE_COLOR = 126,
H\L_OCX40.H:      FILE_DICOM_JPEG_GRAY = 127,
H\L_OCX40.H:      FILE_DICOM_JPEG_COLOR = 128,
H\L_OCX40.H:      L_SUPPORT_MEDICAL,
H\L_OCX40.H:      L_SUPPORT_MEDICAL_NET,
H\L_OCX40.H:      L_SUPPORT_DICOM,
H\L_OCX40.H:      L_SUPPORT_MEDICAL_SECURITY,
H\L_OcxErr.h:   #define ERROR_MEDICAL_NOT_ENABLED 20314
H\L_OcxErr.h:   #define ERROR_MEDICAL_NET_NOT_ENABLED 20318
H\L_OcxErr.h:   #define ERROR_DICOM_NOT_ENABLED                 20803  /* Dicom support is required to use this function */
H\mainfrm.h:// Move OnUpdateKeyIndicators out of interactive conditional
H\mainfrm.h:	void OnUpdateKeyIndicator(CCmdUI* pCmdUI);
H\mfdata.h://  to indicate width of character fields.  This is intended to be controlled
H\mffield.h:// Add a chunk for dictionary attributes
H\mffield.h:// Added f2INCHART flag to indicate that a field is needed by a chart.
H\mffield.h://  was called from winst.c or datadict.c.
H\mffield.h://  dictionary features.
H\mffield.h://  Added dTmpLnk, dShowType, dSecurity, conditional on DATADICT to MFFIELD
H\mffield.h://  or not to call mfeord().  Also changed mfcalc.c, datadict.c, winst.c.
H\mffield.h:// Added conditionals around data-dictionary-related field structure
H\mffield.h:// Add definitions of dShowType and dSecurity for data dictionary info.
H\mffield.h:#define MFONOUPD	0x0002		// don't update saved internal indices
H\mffield.h:	FLFMT indicates if a #ic fld's dFldP data has been converted to float, 
H\mffield.h:#define f3PREDEFINED	 0x0001	// predefined calculation from data dictionary
H\mffield.h:	long	fetchLen; 	// fetched data length indicator
H\mffield.h:#if defined(DATADICT)
H\mffield.h:						//  indicates when values should be captured, where
H\mffield.h:#if defined(DATADICT)
H\mffield.h:	} dict ;
H\mffile.h:// Moved some #defines needed for data dictionary code out of !RSW conditionals.
H\mffile.h:// Data-dictionary code (datadict.c) needs these, even in RSW
H\mffile.h:      "status" bits indicate which PKMAST member is in error
H\mfxfld.h:// new function to indicate if an export really occured
H\nls.h:const	UINT NLS_ICELANDIC       = 2958;
H\nls.h:		NLS_LoadIcon
H\ole_ids.h:DEFINE_GUID( CLSID_RepRRDict,                   0x7957dda0, 0x0656, 0x11d0, 0xa0, 0x6d, 0x0,  0x0, 0x03, 0x91, 0xcd, 0xcb);
H\pd.h:	BOOL bTryingToPause;	// flag to indicate that we are trying to pause
H\pd.h:#define htmlINIT	1		// indicates "real" printer init for html
H\pd.h:#define rtfINIT	1		// indicates "real" printer init
H\product.h:// Made definition of DATADICT unconditional.
H\product.h:#define DATADICT 1			// enable data-dictionary support
H\product.h:/* memo field font/attribute indicators for wrapping routine */
H\qelib.h:   Data dictionary routines
H\qelib.h:   the value to 0 indicates that logins are to wait indefinitely.
H\qelib.h:   seconds.  A value of 0 indicates that logins are to wait indefinitely.
H\qelib.h:   dictionary routines.*/
H\qelib.h:#define qeNO_DATA_CHANGE        (-9)    /* Indicates column has not changed*/
H\qelib.h:   to indicate which direction to search in.  If the record is found,
H\qelib.h:   the query file that indicates which data source name the query file is
H\qelib.h:   the query file that indicates which data source name the query file is
H\qryobj.h:class CDataDict ;
H\qryobj.h:	CDataDict*	 	m_pDataDict ;
H\qryobj.h:	void SetDataDict(CDataDict* pDataDict) { m_pDataDict = pDataDict ; } ;
H\qryobj.h:						  CDataDict* pDataDict) ;
H\qryobj.h:	CDataDict*	m_pDataDict ;
H\qryobj.h://						  CDataDict* pDataDict) ;
H\qryobj.h:						  CDataDict* pDataDict) ;
H\qryobj.h:	void InitDataDictControls() ;
H\repio.h:// Changed prototypes of stamps() and db_info() to indicate far pointers
H\repio.h://  "unfixed" sindex values.  Also modified grmain.c, grmisc.c, datadict.c.
H\repio.h:#define yxfRESET	0x8000	/* flag indicating "reset" evaluate chain record */
H\repio.h:#define yxfNEW_STRING 0x4000	// flag indicating string stored with null terminator
H\repio.h:#define yxDOSID		0x6A		// indicates DOS report in Win library (still needs DOS->Win conversions)
H\repio.h:#define yxDTCONVERT	0x76		// Indicates whether DATETIME fields should become DATE fields
H\repio.h:#define yxDBCNAME	0x8F		// DBC file name (and DBC report indicator)
H\resource.h:// Define DATADICT since all R&R products now include report dictionaries.
H\resource.h:// Conditional on DATADICT, defines some string ids from Abra branch.
H\resource.h:// Added conditional around data-dictionary error messages.
H\resource.h:// Defined data-dictionary-related strings.
H\resource.h:#define DATADICT 1	// all of our products have report-dictionary support these days.
H\resource.h:#if defined(DATADICT)
H\resource.h:// for data-dictionary support
H\resource.h: // data-dictionary field names
H\rr.h:   #include "datadict.h"   // needed by DATADICT stuff
H\rr.h:   #include "mffield.h"    // needed by DATADICT stuff
H\rr.h:   // ***** begin datadict.h
H\rr.h:   // ***** end datadict.h
H\rr.h:   // ***** begin former statics from DATADICT directory modules
H\rr.h:   CFile dbfile;        // dictionary file handle
H\rr.h:   DBHEADER dictHead;   // database file header structure
H\rr.h:   // ***** end former statics from DATADICT directory modules
H\rr.h:   void convertDict(void) ;
H\rr.h:   PROCESS_INFORMATION m_convert;      // Convert dictionary process
H\rrchart.h:	ANCHOR			m_Anchor;			// enum value indicating anchor-top or anchor-bottom
H\rrcompos.h:// Prototypes for update dictionary calls
H\rrcompos.h:   void  UpdateDictionaryFile(int fno, char *indexExp) ;
H\rrcompos.h:   void  UpdateDictionaryCalcField(LPMFFIELD f) ;
H\rrcompos.h:   bool UpdateDictionaryInit() ;
H\rrcompos.h:   void  UpdateDictionaryWriteLine(char *line) ;
H\rrcompos.h:   void  UpdateDictionaryLaunch(char *program) ;
H\rrcompos.h:   LPSTR sql_prep_tablename_for_dict (LPSTR lpszNameIn, LPSTR lpszNameOut);
H\rrcompos.h:   int DbaseExclude;       // used by RRDICT-related code to exclude Dbase sources
H\rrcompos.h:#if defined(DATADICT)
H\rrdll.h:	BOOL StatusDone;			// flag indicating runtime EXE has finished
H\rrdll.h:	BOOL StatusNVDone;			// flag indicating runtime EXE has finished getting job-control info
H\rrdoc.h:// Added boolean to indicate whether we have a "current" library.
H\rrdoc.h:	int		Snaking;		// indicates whether or not we are doing snaked cols
H\rrdoc.h:	BOOL	SelBasedRep;	// indicates File->New->Select Based Report
H\rrdoc.h:	int		HOArg;		// flag indicating asynchronous call to runtime EXE
H\rrdoc.h:#if defined(DATADICT)
H\rrdoc.h:	BOOL bMainPalSet;  // Indicates that a palette was installed for the MainDC.
H\rrruntim.h:	BOOL	bReadingRuninDBF;		// indicates that we'd like bigger buffers to
H\rrview.h:	afx_msg void OnUpdatePropDictionary(CCmdUI* pCmdUI);
H\rrview.h:	afx_msg void OnPopupFieldDictionary();
H\rrxtab.h:// added a dirty flag to indicate if we really need to save the export
H\rrxtab.h:// added BOOL to indicate if printing should happen
H\rrxtab.h:	short bRuntime;	// indicates if this data is running in the runtime or not.
H\rrxtab.h:	short xPrint;	// indicates for the runtime if printing is an option
H\rrxtab.h:	// These next two strings are used for the runtime to indicate
H\rumbasys.h:#define RumbaIconNameForLoadIcon  	"RumbaIcon"
H\script.h:// Add a (ridiculous) app pointer
H\script.h:	CRrApp *m_pApp;			// this is ridiculous
H\sglobal.h:// Remove the following text globals: WxNotFirstTime, WxLastDictionary,
H\sglobal.h:GLOBAL char near WxDictPath[] 
H\sglobal.h: = "Dictionary Path"
H\sort.h:// Values for SREmptyOrder indicating how to sort empty (null) values
H\twain.h:/* DAT_PENDINGXFERS. Used with MSG_ENDXFER to indicate additional data. */
H\twain.h:#define TWON_ARRAY           3 /* indicates TW_ARRAY container       */
H\twain.h:#define TWON_ENUMERATION     4 /* indicates TW_ENUMERATION container */
H\twain.h:#define TWON_ONEVALUE        5 /* indicates TW_ONEVALUE container    */
H\twain.h:#define TWON_RANGE           6 /* indicates TW_RANGE container       */
H\twain.h:#define TWLG_ICE              7 /* Icelandic              */
H\twain.h:#define TWLG_ICELANDIC            TWLG_ICE
H\twain.h:#define CAP_INDICATORS              0x100b   /* Added 1.1 */
H\util.h://  the benefit of data dictionary support.
H\util.h:// needed for index routines - zmemory(), zcompBin() needed for data dictionary in RSW, too
H\vbapi.h:				// empty sz indicated the end of list.
H\w16extra.h:// Note: the following are for interpreting MDIclient to MDI child messages.
H\wdialog.h:#define IDD_FIELD_NAME	310		// common field name indication
H\wdialog.h:#define DICLOSEDLG		201
H\wdialog.h:#define DDDATADICT		207
H\wdialog.h:#define DDDICTINDEX		208
H\wdialog.h:#define DBCONDICTPATH				225
H\wdialog.h:#define DBCONDICTPATHTEXT			228
H\wdialog.h:#define ID_STATIC_DICTIONARY        206
H\wdialog.h:#define ID_RADIO_DICTIONARY         213
H\wdialog.h:#define DCOPYDICTPATHTEXT	205
H\wdialog.h:#define DCOPYDICTPATH		206
H\wdisplay.h:#if defined(DATADICT)
H\wdwin95.h:#define LVM_ADDICON    (LVM_FIRST + 101 )
H\wdwin95.h:#define     ImageList_AddIcon(himl, hicon) ImageList_ReplaceIcon(himl, -1, hicon)
H\wdwin95.h:// progress indicator
H\wdwin95.h:// The icons and small-icons presented may be assigned as indices into
H\wdwin95.h:// special values which indicate that they should be computed only as the
H\wdwin95.h://      The item's text has a standard link-indicator appended (Foo >>).
H\wdwin95.h:#define LVIF_TEXT           0x0001  // LV_ITEM.mask flags (indicate valid fields in LV_ITEM)
H\wdwin95.h:    // Combination of LVHT_ values *pflags, indicating where the cursor
H\wdwin95.h:    UINT    uChanged;       // Combination of LVIF_* indicating what changed
H\wdwin95.h:// NM_TREEVIEW.action is a TVE_ value indicating how the selcection changed
H\wdwin95.h:#define WS_EX_MDICHILD          0x00000040L
H\wfield.h:// Colors for gray box indicating a selected field.
H\wmain.h:// Moved GLOBAL for WxCharFldWidthSize here from datadict.h.
H\wmain.h:// 	Note: 1102 & 1103 in use by RRDICT & RRICON
H\wmain.h://	  IDH_ screens are just like WH_ screens, the prefix indicates pop-up (for a control) help
H\wmain.h:#define IDM_POPUP_FIELD_DICTIONARY	25020
H\wmain.h:#define IDM_FIELD_DICTIONARY	25521
H\wmain.h:	int		Dictionary ;				// Dictionary functions, please
H\wreport.h:// Declared templLibRead global to indicate template lib read
H\_dbexp.h:#define COLSZINFO		7		// size of bytes indicating column size
H\_dbexp.h:// __stdcall necessary to indicate callee will clean up the stack
H\_dbexp.h:		' ',		// _  150 Ordinal indicator
H\_dbexp.h:		208,		// D- 208 Uppercase eth (Icelandic)
H\_dbexp.h:		222,		// P- 222 Uppercase thorn (Icelandic)
H\_dbexp.h:		240,		// d- 240 Lowercase eth (Icelandic)
H\_dbexp.h:		254		// p- 254 Lowercase thorn (Icelandic)
H\_filter.h:/* indices into SXIndex for early part of term */
H\_libio.h:// Changed prototypes to indicate far pointers to YZNAME structures.
H\_rrctl.h://Color indices for MSM_COLORSET/GET and MSCrColorSet/Get
H\_runtime.h:#define JF_DICT		0x18
H\_sort.h:// Values used in SRTypes[] to indicate data types of SRFields[] fields.
RR\ace.h:#define ICELANDIC_ADS_CS_AS_1252       78
RR\ace.h:#define ADS_FREE_TABLE                    0x00001000  // Mutually exclusive with ADS_DICTIONARY_BOUND_TABLE
RR\ace.h:#define ADS_TEMP_TABLE                    0x00002000  // Mutually exclusive with ADS_DICTIONARY_BOUND_TABLE
RR\ace.h:#define ADS_DICTIONARY_BOUND_TABLE        0x00004000  // Mutually exclusive with ADS_FREE_TABLE or ADS_TEMP_TABLE
RR\ace.h:#define ADS_NOT_AUTO_OPEN        0x00000400     // Don't make this an auto open index in data dictionary
RR\ace.h:/* Data dictionary new contraint property validation options */
RR\ace.h:#define AE_INVALID_DICTIONARY_HANDLE    5125
RR\ace.h:#define AE_DICTIONARY_ALREADY_EXISTS    5128
RR\ace.h:#define AE_INVALID_DICTIONARY_FILE      5155
RR\ace.h:#define ADS_DATADICTIONARY_NAME  4
RR\ace.h:   UNSIGNED32  ulGhostTimeout;            /* Diconnection time for partial connections */
RR\ace.h:   UNSIGNED8  aucAuthUserName[ADS_MAX_USER_NAME]; /* Dictionary user name  */
RR\ace.h: * Data dictionary properties related constants and structure
RR\ace.h:#define ADS_DD_SUBSCRIPTION_OBJECT       17  /* indicates where a publication goes */
RR\ace.h:/* Supported permissions in the data dictionary */
RR\ace.h: * in RemoveTriggerFromDictionary
RR\ace.h:   UNSIGNED8   *pucTriggerName, // (I) Name of trigger in the dictionary
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreate( UNSIGNED8  *pucDictionaryPath,
RR\ace.h:                                   ADSHANDLE  *phDictionary );
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATE_PTR)( UNSIGNED8  *pucDictionaryPath,
RR\ace.h:                                   ADSHANDLE  *phDictionary );
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateRefIntegrity( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEREFINTEGRITY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateRefIntegrity62( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEREFINTEGRITY62_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveRefIntegrity( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEREFINTEGRITY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetDatabaseProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETDATABASEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetFieldProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETFIELDPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetProcedureProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETPROCEDUREPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetTableProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETTABLEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetUserGroupProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETUSERGROUPPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetUserProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETUSERPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetViewProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETVIEWPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetObjectAccessRights( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETOBJECTACCESSRIGHTS_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddProcedure( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDPROCEDURE_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddTable( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDTABLE_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddTable90( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDTABLE90_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddView( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDVIEW_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateTrigger( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATETRIGGER_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveTrigger( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVETRIGGER_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddIndexFile( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDINDEXFILE_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateUser( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEUSER_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddUserToGroup( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDUSERTOGROUP_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveUserFromGroup( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEUSERFROMGROUP_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteUser( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEUSER_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateUserGroup( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEUSERGROUP_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteUserGroup( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEUSERGROUP_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteIndex( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEINDEX_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveIndexFile( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEINDEXFILE_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveProcedure( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEPROCEDURE_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveView( ADSHANDLE   hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEVIEW_PTR)( ADSHANDLE   hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRenameObject( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDRENAMEOBJECT_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDMoveObjectFile( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDMOVEOBJECTFILE_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreatePublication( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEPUBLICATION_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetPublicationProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETPUBLICATIONPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeletePublication( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEPUBLICATION_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateArticle( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEARTICLE_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetArticleProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETARTICLEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteArticle( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEARTICLE_PTR)( ADSHANDLE    hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateSubscription( ADSHANDLE      hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATESUBSCRIPTION_PTR)( ADSHANDLE      hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetSubscriptionProperty( ADSHANDLE  hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETSUBSCRIPTIONPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteSubscription( ADSHANDLE    hDictionary,
RR\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETESUBSCRIPTION_PTR)( ADSHANDLE    hDictionary,
RR\aceunpub.h:#define ADS_DICTIONARY_SERVER         0x4000
RR\aceunpub.h: * To read the properties internally without the dictionary checking the user's
RR\aceunpub.h:/* Misc unpublished data dictionary object property ID */
RR\aceunpub.h:/* The delimitor used to denoted a table from a linked data dictionary. */
RR\aceunpub.h:// The following are AQE parser extension that dictates how much query optimization
RR\aceunpub.h:#define ADS_USE_PTHREAD_FOR_KA      30  /* Object: NULL.  TRUE/FALSE to indicate pthread usage for keepalive thread */
RR\aceunpub.h: * dictionary may need to change in the future, but the users interface to
RR\aceunpub.h://#define ADS_DICTIONARY_BOUND_TABLE        0x00004000     // in ace.h
RR\aceunpub.h: * and we don't want AdsCreateTable to add the new table to the dictionary.
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDOpen( UNSIGNED8  *pucDictionaryPath,
RR\aceunpub.h:                                 ADSHANDLE  *phDictionary );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDOPEN_PTR)( UNSIGNED8  *pucDictionaryPath,
RR\aceunpub.h:                                 ADSHANDLE  *phDictionary );
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDClose( ADSHANDLE hDictionary );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCLOSE_PTR)( ADSHANDLE hDictionary );
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDExecuteProcedure( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDEXECUTEPROCEDURE_PTR)( ADSHANDLE hDictionary,
RR\aceunpub.h:                                      UNSIGNED8  *pucDictionaryPath,
RR\aceunpub.h:                                                 UNSIGNED8  *pucDictionaryPath,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetActiveDictionary( ADSHANDLE  hConnect,
RR\aceunpub.h:                                                ADSHANDLE  *phDictionary );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETACTIVEDICTIONARY_PTR)(
RR\aceunpub.h:                                                ADSHANDLE  *phDictionary );
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDisableTriggers( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDISABLETRIGGERS_PTR)( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDEnableTriggers( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDENABLETRIGGERS_PTR)( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetTriggerProperty( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETTRIGGERPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDCreateFunction( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEFUNCTION_PTR)( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDropFunction( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDROPFUNCTION_PTR )( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDGetObjectProperty( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDGETOBJECTPROPERTY_PTR )( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetObjectProperty( ADSHANDLE  hDictionary,
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETOBJECTPROPERTY_PTR )( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDCreatePackage( ADSHANDLE  hDictionary, UNSIGNED8 *pucName, UNSIGNED8 *pucComments );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEPACKAGE_PTR )( ADSHANDLE  hDictionary,
RR\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDropPackage( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDROPPACKAGE_PTR )( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\aceunpub.h: * New properties to rid of client side open of data dictionary.
RR\aceunpub.h: * Added unpublished property to allow reading field name from data dictionary given the field ordinal.
RR\aceunpub.h: * Fixed problems caused by not openning data dictionary on the client side on ADSSYS connection.
RR\aceunpub.h: * New create table protocol and API to support not open dictionary on the client side.
RR\aceunpub.h: * Fixed bug #1733. Encrypted database table lost the encryption flag in the data dictionary after being restructured.
RR\aceunpub.h: * API to grant and revoke permission in data dictionary.
RR\aceunpub.h: * Published some data dictionary index file property.
RR\aceunpub.h: * New database property allows the server to detect whether cached data dictionary information is still valid.
RR\aceunpub.h: * Added code to get the index file type from data dictionary
RR\aceunpub.h: * Added API to remove key and index file from data dictionary.
RR\aceunpub.h: * Changed for the new data dictionary connect protocol
RR\rrw32\ace.h:#define ICELANDIC_ADS_CS_AS_1252       78
RR\rrw32\ace.h:#define ADS_FREE_TABLE                    0x00001000  // Mutually exclusive with ADS_DICTIONARY_BOUND_TABLE
RR\rrw32\ace.h:#define ADS_TEMP_TABLE                    0x00002000  // Mutually exclusive with ADS_DICTIONARY_BOUND_TABLE
RR\rrw32\ace.h:#define ADS_DICTIONARY_BOUND_TABLE        0x00004000  // Mutually exclusive with ADS_FREE_TABLE or ADS_TEMP_TABLE
RR\rrw32\ace.h:#define ADS_NOT_AUTO_OPEN        0x00000400     // Don't make this an auto open index in data dictionary
RR\rrw32\ace.h:/* Data dictionary new contraint property validation options */
RR\rrw32\ace.h:#define AE_INVALID_DICTIONARY_HANDLE    5125
RR\rrw32\ace.h:#define AE_DICTIONARY_ALREADY_EXISTS    5128
RR\rrw32\ace.h:#define AE_INVALID_DICTIONARY_FILE      5155
RR\rrw32\ace.h:#define ADS_DATADICTIONARY_NAME  4
RR\rrw32\ace.h:   UNSIGNED32  ulGhostTimeout;            /* Diconnection time for partial connections */
RR\rrw32\ace.h:   UNSIGNED8  aucAuthUserName[ADS_MAX_USER_NAME]; /* Dictionary user name  */
RR\rrw32\ace.h: * Data dictionary properties related constants and structure
RR\rrw32\ace.h:#define ADS_DD_SUBSCRIPTION_OBJECT       17  /* indicates where a publication goes */
RR\rrw32\ace.h:/* Supported permissions in the data dictionary */
RR\rrw32\ace.h: * in RemoveTriggerFromDictionary
RR\rrw32\ace.h:   UNSIGNED8   *pucTriggerName, // (I) Name of trigger in the dictionary
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreate( UNSIGNED8  *pucDictionaryPath,
RR\rrw32\ace.h:                                   ADSHANDLE  *phDictionary );
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATE_PTR)( UNSIGNED8  *pucDictionaryPath,
RR\rrw32\ace.h:                                   ADSHANDLE  *phDictionary );
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateRefIntegrity( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEREFINTEGRITY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateRefIntegrity62( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEREFINTEGRITY62_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveRefIntegrity( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEREFINTEGRITY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetDatabaseProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETDATABASEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetFieldProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETFIELDPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetProcedureProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETPROCEDUREPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetTableProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETTABLEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetUserGroupProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETUSERGROUPPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetUserProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETUSERPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetViewProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETVIEWPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetObjectAccessRights( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETOBJECTACCESSRIGHTS_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddProcedure( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDPROCEDURE_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddTable( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDTABLE_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddTable90( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDTABLE90_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddView( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDVIEW_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateTrigger( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATETRIGGER_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveTrigger( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVETRIGGER_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddIndexFile( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDINDEXFILE_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateUser( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEUSER_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDAddUserToGroup( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDADDUSERTOGROUP_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveUserFromGroup( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEUSERFROMGROUP_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteUser( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEUSER_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateUserGroup( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEUSERGROUP_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteUserGroup( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEUSERGROUP_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteIndex( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEINDEX_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveIndexFile( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEINDEXFILE_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveProcedure( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEPROCEDURE_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRemoveView( ADSHANDLE   hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDREMOVEVIEW_PTR)( ADSHANDLE   hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDRenameObject( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDRENAMEOBJECT_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDMoveObjectFile( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDMOVEOBJECTFILE_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreatePublication( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEPUBLICATION_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetPublicationProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETPUBLICATIONPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeletePublication( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEPUBLICATION_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateArticle( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEARTICLE_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetArticleProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETARTICLEPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteArticle( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETEARTICLE_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDCreateSubscription( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATESUBSCRIPTION_PTR)( ADSHANDLE      hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDSetSubscriptionProperty( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDSETSUBSCRIPTIONPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\ace.h:UNSIGNED32 ENTRYPOINT AdsDDDeleteSubscription( ADSHANDLE    hDictionary,
RR\rrw32\ace.h:typedef UNSIGNED32 (WINAPI *ADSDDDELETESUBSCRIPTION_PTR)( ADSHANDLE    hDictionary,
RR\rrw32\aceunpub.h:#define ADS_DICTIONARY_SERVER         0x4000
RR\rrw32\aceunpub.h: * To read the properties internally without the dictionary checking the user's
RR\rrw32\aceunpub.h:/* Misc unpublished data dictionary object property ID */
RR\rrw32\aceunpub.h:/* The delimitor used to denoted a table from a linked data dictionary. */
RR\rrw32\aceunpub.h:// The following are AQE parser extension that dictates how much query optimization
RR\rrw32\aceunpub.h:#define ADS_USE_PTHREAD_FOR_KA      30  /* Object: NULL.  TRUE/FALSE to indicate pthread usage for keepalive thread */
RR\rrw32\aceunpub.h: * dictionary may need to change in the future, but the users interface to
RR\rrw32\aceunpub.h://#define ADS_DICTIONARY_BOUND_TABLE        0x00004000     // in ace.h
RR\rrw32\aceunpub.h: * and we don't want AdsCreateTable to add the new table to the dictionary.
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDOpen( UNSIGNED8  *pucDictionaryPath,
RR\rrw32\aceunpub.h:                                 ADSHANDLE  *phDictionary );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDOPEN_PTR)( UNSIGNED8  *pucDictionaryPath,
RR\rrw32\aceunpub.h:                                 ADSHANDLE  *phDictionary );
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDClose( ADSHANDLE hDictionary );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCLOSE_PTR)( ADSHANDLE hDictionary );
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDExecuteProcedure( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDEXECUTEPROCEDURE_PTR)( ADSHANDLE hDictionary,
RR\rrw32\aceunpub.h:                                      UNSIGNED8  *pucDictionaryPath,
RR\rrw32\aceunpub.h:                                                 UNSIGNED8  *pucDictionaryPath,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetActiveDictionary( ADSHANDLE  hConnect,
RR\rrw32\aceunpub.h:                                                ADSHANDLE  *phDictionary );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETACTIVEDICTIONARY_PTR)(
RR\rrw32\aceunpub.h:                                                ADSHANDLE  *phDictionary );
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDisableTriggers( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDISABLETRIGGERS_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDEnableTriggers( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDENABLETRIGGERS_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetTriggerProperty( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETTRIGGERPROPERTY_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDCreateFunction( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEFUNCTION_PTR)( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDropFunction( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDROPFUNCTION_PTR )( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDGetObjectProperty( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDGETOBJECTPROPERTY_PTR )( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDSetObjectProperty( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDSETOBJECTPROPERTY_PTR )( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDCreatePackage( ADSHANDLE  hDictionary, UNSIGNED8 *pucName, UNSIGNED8 *pucComments );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDCREATEPACKAGE_PTR )( ADSHANDLE  hDictionary,
RR\rrw32\aceunpub.h:UNSIGNED32 ENTRYPOINT AdsDDDropPackage( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\rrw32\aceunpub.h:typedef UNSIGNED32 (WINAPI *ADSDDDROPPACKAGE_PTR )( ADSHANDLE  hDictionary, UNSIGNED8 *pucName );
RR\rrw32\aceunpub.h: * New properties to rid of client side open of data dictionary.
RR\rrw32\aceunpub.h: * Added unpublished property to allow reading field name from data dictionary given the field ordinal.
RR\rrw32\aceunpub.h: * Fixed problems caused by not openning data dictionary on the client side on ADSSYS connection.
RR\rrw32\aceunpub.h: * New create table protocol and API to support not open dictionary on the client side.
RR\rrw32\aceunpub.h: * Fixed bug #1733. Encrypted database table lost the encryption flag in the data dictionary after being restructured.
RR\rrw32\aceunpub.h: * API to grant and revoke permission in data dictionary.
RR\rrw32\aceunpub.h: * Published some data dictionary index file property.
RR\rrw32\aceunpub.h: * New database property allows the server to detect whether cached data dictionary information is still valid.
RR\rrw32\aceunpub.h: * Added code to get the index file type from data dictionary
RR\rrw32\aceunpub.h: * Added API to remove key and index file from data dictionary.
RR\rrw32\aceunpub.h: * Changed for the new data dictionary connect protocol
rrrpt32\_rdtable.h:extern int DbaseExclude;	// used by RRDICT-related code to exclude Dbase sources
rrsqlwiz\convert.h:// status indicators
SETUP\Abra\translat.h:#define szDD				"Dictionary Editor"
SETUP\Abra\translat.h:#define szDDDESC			"This utility helps you create and edit data dictionaries. It relies on Report Designer files assumed previously installed."
SETUP\Abra\translat.h:#define szRRDICT_NAME		"Data Dictionary Editor"
SETUP\gosubdir\resource.h:#define DATADICT                        1
SETUP\sdinclud\sddialog.h:        number  nSdDialog;      // indicates which dialog is in process
SETUP\sdinclud\sdint.h: BOOL   bSdInit;           // indicates if the sd dialogs are initialized
SETUP\translat.h:#define szDD				"Dictionary Editor"
SETUP\translat.h:#define szDDDESC			"This utility helps you create and edit data dictionaries. It relies on Report Designer files assumed previously installed."
SETUP\translat.h:#define szRRDICT_NAME		"Data Dictionary Editor"
TOOLS\IS\Include\sddialog.h:        number  nSdDialog;      // indicates which dialog is in process
TOOLS\IS\Include\sdint.h: BOOL   bSdInit;           // indicates if the sd dialogs are initialized
XBASE\DBF.H:   xbShort   RebuildAllIndices( void );
XBASE\NDX.H:    for handling NDX type indices.
XBASE\NTX.H:    for handling xbNdx type indices.
XBASE\xindex.h:    for handling NTX type indices. NTX are the Clipper equivalant of xbNdx
