ENG\RSW\iengine.cpp:// Fixes bug,induced by previous change, when platform is SQLy and it
ENG\RSW\dbi.cpp:// Quit previous qeAusHstmt before starting another
ENG\RSW\dbi.cpp:		*NewDSName = 0;		// forget any previous DS name
ENG\RSW\dbi.cpp:		*NewDBName = 0;		// forget any previous database name
ENG\RSW\iengmenu.cpp:								// recover previous
ENG\RSW\iengmenu.cpp:										// recover previous
ENG\RSW\iengmenu.cpp:											// recover previous
ENG\RSW\iengparm.cpp:	if (bComma) // comma was found at end of previous loop
DFORMAT\dledit.cpp:				pDoc->spinOne(hDlg,IDC_EB_HEIGHT,0,nMaxHeight,SB_LINEUP  );  // Pass to previously created function. 
DFORMAT\dledit.cpp:				pDoc->spinOne(hDlg,IDC_EB_HEIGHT,0,nMaxHeight,SB_LINEDOWN);  // Pass to previously created function. 
DFORMAT\dledit.cpp:				pDoc->spinTen(hDlg, IDC_EB_HEIGHT, 0, nMaxHeight, SB_LINEUP  );  // Pass to previously created function. 
DFORMAT\dledit.cpp:				pDoc->spinTen(hDlg, IDC_EB_HEIGHT, 0, nMaxHeight, SB_LINEDOWN);  // Pass to previously created function. 
DFORMAT\dfmod.cpp:	// gridInch was previous set to getPixFromCol(1)*RulerPitch.  It returns 100, or an even 
DFORMAT\dfmod.cpp:	// gridInch was previous set to getPixFromCol(1)*RulerPitch.  It returns 100, or an even 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGWIDTH, MINIMG, MAXIMG, SB_LINEUP  ) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGWIDTH, MINIMG, MAXIMG, SB_LINEDOWN) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGHEIGHT, MINIMG, MAXIMG, SB_LINEUP   ) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGHEIGHT, MINIMG, MAXIMG, SB_LINEDOWN ) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGWIDTH, MINIMG, MAXIMG, SB_LINEUP  ) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGWIDTH, MINIMG, MAXIMG, SB_LINEDOWN) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGHEIGHT, MINIMG, MAXIMG, SB_LINEUP   ) ;  // Pass to previously created function. 
DFORMAT\dfmod.cpp:						pDoc->spinTen ( hDlg, DIMGHEIGHT, MINIMG, MAXIMG, SB_LINEDOWN ) ;  // Pass to previously created function. 
FILTER\pksx.cpp:				 && ((prevtok != t_comma)	// previous token better be comma, or
rrocx\ocxfile.cpp:	first, the other, previous subdirs are no longer in the list box
RR\cntritem.cpp:// The previous technique for determining if the actual size changed did not 
RR\cntritem.cpp:							  // I do not plan to fix this bug because RC2 is very near and changing it would cause any previous 
RR\cntritem.cpp:	// gridInch was previous set to getPixFromCol(1)*RulerPitch.  It returns 100, or an even 
RR\mainfrm.cpp:// disable previous OnQueryOpen change
RR\mainfrm.cpp:// If previous state was minimzied, don't restore to that state. Bug fix #2652. 
RR\mainfrm.cpp:		// If previous state was minimzied, don't restore to that state. Bug fix #2652. 
RR\mainfrm.cpp:  			wp.showCmd = nShow ; 	// Use previous state, be it maximized or minimized. 
RR\mainfrm.cpp:		// use the previous nCmdShow value.  The end result is that the view will 
RR\rrcompos.cpp:	MFPrevRej = 0;			// previous record rejected flag
RR\rrdoc.cpp:// Added some RSW conditionals around previous edit.
RR\rrdoc.cpp:// Previous Send fix was not complete.  The menu item is now being disabled
RR\rrdrag.cpp:				// erase previous focus rect
RR\rrdrag.cpp:		// erase previous focus rect
RR\rrdrag.cpp:		dc.DrawFocusRect ( CRect(m_dragPoint,m_dragSize) ) ; // erase previous focus rect
UTIL\zdateout.cpp:			y--;		/* of previous year */
UTIL\zdatein.cpp:	if (m < 3) y--; 				/* before March counts as previous year */
UTIL\zfcmp.cpp:			if (!status)			/* no previous magic? */
UTIL\znv.cpp:// Fixed compile error resulting from previous change.
WLAYOUT\wpix.cpp://				prevField		-> the previous field entered					//
WLAYOUT\wcaret.cpp:				{ // to bottom of previous line
WLAYOUT\wcaret.cpp:					m_pDoc->YPix = m_pDoc->When[--m_pDoc->YLine].baseline;	// baseline of previous line
WLAYOUT\wfont.cpp:					// has been cleared in the previous call.
ODBC\libodbc++-0.2.5\tests\scroll.cpp:  ASSERT(rs->previous());
ODBC\libodbc++-0.2.5\tests\scroll.cpp:  } while(rs->previous());
ODBC\libodbc++-0.2.5\src\resultset.cpp:bool ResultSet::previous()
ODBC\libodbc++-0.2.5\src\resultset.cpp:    //we request the previous, we get rows 1-20. Then
ODBC\libodbc++-0.2.5\src\resultset.cpp:        rowset_->setCurrentRow(oldloc-2); //1 for 1-based location, 1 for previous
PD\genreport.cpp:	CTableEntry *previousTableEntry = NULL;
PD\genreport.cpp:			{	// Found it!  First, write the end pos for the previous cell as well as any
PD\genreport.cpp:					if ( previousTableEntry==NULL )
PD\genreport.cpp:						// this is a field that is added to the same line as the previous field
PD\genreport.cpp:						if (previousTableEntry->GetUnderline())
PD\genreport.cpp:						if (previousTableEntry->GetBold())
PD\genreport.cpp:						if (previousTableEntry->GetItalic())
PD\genreport.cpp:						if ( !previousTableEntry->GetIsImage() )
PD\genreport.cpp:				previousTableEntry = currentTableEntry;
PD\genreport.cpp:	if(previousTableEntry!=NULL)
PD\genreport.cpp:		if (previousTableEntry->GetStrike())
PD\genreport.cpp:		if (previousTableEntry->GetUnderline())
PD\genreport.cpp:		if (previousTableEntry->GetBold())
PD\genreport.cpp:		if (previousTableEntry->GetItalic())
PD\genreport.cpp:		if ( !previousTableEntry->GetIsImage() )
PD\genreport.cpp:		long    lPreviousUniqueStartingPosition;
PD\genreport.cpp:			//  If it has, then bump the previous cols counter.
PD\genreport.cpp:			if (lUniqueStartingPosition != lPreviousUniqueStartingPosition)
PD\genreport.cpp:		lPreviousUniqueStartingPosition = lUniqueStartingPosition;
PD\genreport.cpp:			{	// Found it!  First, write the end pos for the previous cell as well as any
PD\memdlg.cpp:		// If we have not even processed 5 pages, then diable to free previous
PD\dbfxint.cpp:			y--;		/* of previous year */
PD\dll.cpp:// Previous versions of 32-bit MFC did not require this file.  This version
PD\htmlexp.cpp:	{	// if the previous band was a body line, then write out a table end.
PD\htmlexp.cpp:	{	// if the previous band was a body line, then write out a table end.
PD\pdi.cpp:							previous PDI field.  Except for the first time, of course, hence bSeenAField.
PD\mem.cpp:// box will be dispalyed which will allows the user to begin freeing up previous
PD\dllmem.cpp:	it returns to the application, memory can be wasted. Refer to the previous 
PD\tblentry.cpp:	m_lPreviousCols = 0 ;
PD\tblentry.cpp:	m_lPreviousCols = 0 ;
PD\tblentry.cpp: 	m_lPreviousCols = lCols;
PD\tblentry.cpp:	return (m_lPreviousCols);
PD\tblentry.cpp:	*lCols = m_lPreviousCols;
WREPORT\wrepfix.cpp:// Make same change as previous for vertical scaling
WREPORT\rpinit.cpp:// Undo previous sizeof ( int ) with PrOpt.  It was not carefully researched.
WREPORT\wreport.cpp:	m_strPathName.Empty();		// clear MFC file name so we don't File-Save to previous docfile
WREPORT\wreport.cpp:			// Title bar is left with previous report name. 
WREPORT\wreport.cpp:// This routine combines code that was previously duplicated in checkArgs()
WREPORT\wreport.cpp:	// done after the previous call.  Otherwise the text fields get lost when a report 
WREPORT\wreport.cpp:	// is opened after not first closing the previous.  Let me repeat:
WREPORT\wreport.cpp:	// Opening a report after first closing the previous would work fine. 
WREPORT\wreport.cpp:	// If the previous report was not closed, then the text fields of the opened 
WREPORT\wreport.cpp://	if (!*pLibrary							// no previous library
WREPORT\RSW\sconnect.cpp:	// Clean up any previous report stuff
rrsqlwiz\wizard.cpp:// Return previous page ID to wayward property page
CFMISC\functab.cpp:	TPREV,		HPREV,	WH_FUNC_PREVIOUS,sv_prev,	t_prev,	CRrComposite::fprev,	CRrComposite::pnoop,	false,						/* 0x44 */
DDATA\dselect.cpp://  displayed.  Previously, it defaulted to the field list and if you wanted to start
DDATA\dgroup.cpp:					// Don't assert.  The previous list might be empty. 
DDATA\RRW\xdrelate.cpp:// Uncommented code previously used to grab the value of the partial link length
DDATA\RRW\xdrelate.cpp:// if there was an error or the value was < 0.  Previously it was flagged if
DDATA\RRW\xdrelate.cpp:// previous index fix.
MFDATA\memo.cpp:			// The memo_pos is before the previous block, start
MFDATA\memo.cpp:			// memo_pos is in the previous block
MFDATA\memo.cpp:			// Note that this is one way we end up with no previous.  If we
MFDATA\memo.cpp:				if (j!=1)    // if this is not the first, link the previous
MFDATA\memo.cpp:					if (i!=1) // if this is not the first buffer, link the previous
MFDATA\mfgetrec.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
MFDATA\RRW\mfrdnext.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
MFDATA\mfrdrec.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
MFDATA\mfrdflds.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
Fax\Fax.cpp:/*		Unloads the Tapi32.lib if it has been previously loaded							      */
Fax\Fax.cpp:		//Library was previously loaded so we can unloaded it
Fax\Fax.cpp:			// Open the line if we haven't got a previous error.
LIBIO\libchunk.cpp://	member variable.  Typically used to rewrite a chunk previously
WCLIP\wclip.cpp:	{ // zap previous cut/copy
WCLIP\wclip.cpp:	{ // zap previous delete
REPIO\grmain.cpp:// Fixed problem with previous fix for saving/setting "modified" flag.
REPIO\grmain.cpp:// Added some RSW conditionals around previous edit.
REPIO\grmain.cpp:// record, don't keep label from previous report.
REPIO\grfield.cpp:// If we've already asked the user, just return his previous answer.
REPIO\grmisc.cpp:// Fix problem reading previous beta of HTML export data.
REPIO\gropts.cpp:// Corrected previous fix, putting yxRPPAGE1 with yxPAGES1 not yxPAGES.
WTOOLS\formbar.cpp:// to improve on single-letter scrolling through font list previously available
INDEX\klpkey.cpp:// read previous key
INDEX\klpkey.cpp:/* read previous key */
INDEX\klpkey.cpp: LPSTR key,		/* out: key value of previous record */
INDEX\klpkey.cpp: LPLONG recno	/* out: record number of previous record */
INDEX\kltkey.cpp:			ret = lprevkey(pkey,recno); 	/* read previous key */
INDEX\kldecomp.cpp:// The compression algorithm requires that the previous key be known. Since
INDEX\kldecomp.cpp:// we do not maintain the previous key value, we must go thru the entire
DOPTIONS\dglobdef.cpp:					  // Pass to previously created function. 
XBASE\DBF.CPP:   if( DbfStatus == XB_UPDATED /*&& AutoUpdate*/ )   /* update previous rec if necessary */
XBASE\DBF.CPP:   if( DbfStatus == XB_UPDATED /*&& AutoUpdate*/ )  /* update previous rec if necessary */
XBASE\DBF.CPP:   if( DbfStatus == XB_UPDATED /*&& AutoUpdate*/ )  /* update previous rec if necessary */
XBASE\DBF.CPP:   if( DbfStatus == XB_UPDATED /*&& AutoUpdate*/ )  /* update previous rec if necessary */
XBASE\DBF.CPP:   if( DbfStatus == XB_UPDATED /*&& AutoUpdate*/ )  /* update previous rec if necessary */
XBASE\EXP.CPP:   const char *sp, *np, *pp;   /* save, next and previous pointer */
XBASE\EXP.CPP:                  PreviousType = 'E';
XBASE\EXP.CPP:      PreviousType = 'C';
XBASE\EXP.CPP:         PreviousType = 'C';
XBASE\EXP.CPP:         PreviousType = 'C';
XBASE\EXP.CPP:         PreviousType = 'C';
XBASE\EXP.CPP:   if(( *s == '-' && ( PreviousType == 'O' || PreviousType == 0 )) ||
XBASE\EXP.CPP:      ( *s == '+' && ( PreviousType == 'O' || PreviousType == 0 )) ||
XBASE\EXP.CPP:                  PreviousType = 'N';
XBASE\EXP.CPP:                  PreviousType = 'N';
XBASE\EXP.CPP:         PreviousType = 'N'; 
XBASE\EXP.CPP:      PreviousType = 'O';
XBASE\EXP.CPP:      PreviousType = 'O';
XBASE\EXP.CPP:      PreviousType = 'O';
XBASE\EXP.CPP:         PreviousType = 'O';
XBASE\EXP.CPP:         PreviousType = 'O';
XBASE\EXP.CPP:         PreviousType = 'O';
XBASE\EXP.CPP:         PreviousType = 'D';
XBASE\EXP.CPP:                  PreviousType = 'F';
XBASE\EXP.CPP:               PreviousType = 'D';
XBASE\EXP.CPP:   /* previous node is the node to insert under */
XBASE\EXP.CPP:   xbExpNode * PreviousNode;
XBASE\EXP.CPP:   PreviousNode = NULL;
XBASE\EXP.CPP:   PreviousType = TokenLenCtr = 0;
XBASE\EXP.CPP:         else          /* put as child 2 of previous node  */
XBASE\EXP.CPP:            PreviousNode->Sibling2 = CurNode;
XBASE\EXP.CPP:            CurNode->Node = PreviousNode;
XBASE\EXP.CPP:               PreviousNode = CurNode->Node;
XBASE\EXP.CPP:               while( PreviousNode &&
XBASE\EXP.CPP:               (( OperatorWeight( PreviousNode->NodeText, TokenLen ) == 0 ) ||
XBASE\EXP.CPP:                  OperatorWeight( PreviousNode->NodeText, TokenLen ))))
XBASE\EXP.CPP:                    PreviousNode = PreviousNode->Node;
XBASE\EXP.CPP:               if( PreviousNode )
XBASE\EXP.CPP:                  CurNode->Node = PreviousNode;
XBASE\EXP.CPP:                  CurNode->Sibling1 = PreviousNode->Sibling2;
XBASE\EXP.CPP:                  PreviousNode->Sibling2 = CurNode;
XBASE\EXP.CPP:      PreviousNode = CurNode;
XBASE\MEMO.CPP:   const xbLong LastDataBlock, xbLong &Location, xbLong &PreviousNode )
XBASE\MEMO.CPP:   PreviousNode - is the block number of the node imediately previous
XBASE\MEMO.CPP:      PreviousNode = PrevNode;
XBASE\MEMO.CPP:      PreviousNode = CurNode;
XBASE\MEMO.CPP:    PreviousNode = 0;
XBASE\MEMO.CPP:   /* determine if this block set should be added to the previous set */
XBASE\MEMO.CPP:   /* 3 - go to the previous node                         */
XBASE\MEMO.CPP:   /* 4 - insert this nodes id into the previous node set */
XBASE\MEMO.CPP:   /* 5 - write previous node                             */
XBASE\STACK.CPP:      Free->Previous = Last;
XBASE\STACK.CPP:   e->Previous = NULL;
XBASE\STACK.CPP:   if( Free ) Free->Previous = e;
XBASE\STACK.CPP:      Temp->Previous = Last;
XBASE\STACK.CPP:         Last->Previous->Next = NULL;
XBASE\STACK.CPP:         Last = Last->Previous;
XBASE\STACK.CPP:      cout << "\nPrevious  = " << e->Previous;
XBASE\STACK.CPP:      cout << "\nPrevious  = " << e->Previous;
XBASE\NDX.CPP:/* corresponding to the previous index pointer                         */
XBASE\NTX.CPP:/* corresponding to the previous index pointer                         */
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 's' )     /* previous result */
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 'd' )     /* previous numeric result */   
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 'N' )     /* previous numeric result */   
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 's' )     /* previous result */
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 'd' )     /* previous numeric result */
XBASE\EXPPROC.CPP:   else if( WorkNode->Type == 'N' )     /* previous numeric result */   
RUNTIME\wnextjob.cpp:	// clean up any old RI_ALIASn field info from previous job
RUNTIME\wnextjob.cpp:	// clean up any old RI_ALIASn field info from previous job
RUNTIME\wnextjob.cpp:	// clean up any old RI_ALIASn field info from previous job
RUNTIME\runtime.cpp://  previous checkin!!
RUNTIME\wrtmain.cpp:// fix problems induced by previous checkin.  need to allow certain unswitched
RUNTIME\wrtmain.cpp:					// set the RIType if the /N command line flag has not been previously processed
rrrpt32\rdexec.cpp://  error from previous invocation of execRuntime doesn't hang around forever!
rrrpt32\rdexec.cpp://  error from previous invocation of execRuntime doesn't hang around forever!
rrrpt32\rdexec.cpp://  error from previous invocation of execRuntime doesn't hang around forever!
rrrpt32\rdexec.cpp://  error from previous invocation of execRuntime doesn't hang around forever!
rrrpt32\rdreport.cpp: 	m_pDoc->m_pComposite->DBIrememberDataSource (NULL);			// forget any previous data source
rrrpt32\rdreport.cpp:		m_pDoc->m_pComposite->DBIrememberDatabase (NULL);			// forget any previous database
DFILE\dpropt.cpp:					  // Pass to previously created function. 
DFILE\dpropt.cpp:					  // Pass to previously created function. 
DFILE\dreport.cpp:// Oops.  Fixed RRW-mode compile error from previous checkin.
DFILE\dreport.cpp:// was left over from the previous report.
DFILE\dreport.cpp:			// (This call was previously ComboBox_SelectString, but that only checks first N chars
DFILE\dexport.cpp:// wrong for 6.5.02 reports, possibly wrong for previous reports, but
DFILE\RSW\dbtrieve.cpp:	  // If the previous access method was file, then check the file radio button
DFILE\RSW\dbtrieve.cpp://		 might be compared with previous table or file names without trailing
DCALC\dpurge.cpp:// change previous include to wtools.h
DCALC\dcalctot.cpp:		// special "push previous value of field" operator, for PREV()
DCALC\dtotal.cpp:			if (pDoc->DCcurTotAccum != tfUNKNOWN)	// if we've previously initialized listbox, just return
alive\rrlite\framewrk\ctlview.cpp:// Releases a previously frozen drawing. The most common use of this method
alive\rrlite\framewrk\ctlembed.cpp:// Deletes a previously established advisory connection.
alive\rrlite\framewrk\ctlembed.cpp:// Reactivates a previously deactivated object, undoing the last state of the object.
WMAIN\wserial.cpp:		TRACE( "GetSerialNumber: Mutex was abandoned by previous owner\n");
WMAIN\wserial.cpp:		TRACE( "ClearSerialNumber: Mutex was abandoned by previous owner\n");
WMAIN\explmgr.cpp:	as those previously loaded by LoadLibrary but not unloaded by 
WUTIL\wfile.cpp:   first, the other, previous subdirs are no longer in the list box
WUTIL\wglobal.cpp://  previous one was a void and filled in a CSize structure cx, cy based on the virtual
WUTIL\wstring.cpp:// strToInt needed some debugging code.  On error it previously just returned 
WPRINTUI\preview.cpp://  next/previous/first/last pages in preview since we position back
WPRINTUI\preview.cpp:	m_pDoc->PrtStruct->pDest.wpd.pvZoom--;	// previous level
chart\rrchlist.cpp:	// related failure where we thought the filter was breaking a chart.  (Previously, 
PD-ORIG\genreport.cpp:	CTableEntry *previousTableEntry = NULL;
PD-ORIG\genreport.cpp:			{	// Found it!  First, write the end pos for the previous cell as well as any
PD-ORIG\genreport.cpp:					if ( previousTableEntry==NULL )
PD-ORIG\genreport.cpp:						// this is a field that is added to the same line as the previous field
PD-ORIG\genreport.cpp:						if (previousTableEntry->GetUnderline())
PD-ORIG\genreport.cpp:						if (previousTableEntry->GetBold())
PD-ORIG\genreport.cpp:						if (previousTableEntry->GetItalic())
PD-ORIG\genreport.cpp:						if ( !previousTableEntry->GetIsImage() )
PD-ORIG\genreport.cpp:				previousTableEntry = currentTableEntry;
PD-ORIG\genreport.cpp:	if(previousTableEntry!=NULL)
PD-ORIG\genreport.cpp:		if (previousTableEntry->GetStrike())
PD-ORIG\genreport.cpp:		if (previousTableEntry->GetUnderline())
PD-ORIG\genreport.cpp:		if (previousTableEntry->GetBold())
PD-ORIG\genreport.cpp:		if (previousTableEntry->GetItalic())
PD-ORIG\genreport.cpp:		if ( !previousTableEntry->GetIsImage() )
PD-ORIG\genreport.cpp:		long    lPreviousUniqueStartingPosition;
PD-ORIG\genreport.cpp:			//  If it has, then bump the previous cols counter.
PD-ORIG\genreport.cpp:			if (lUniqueStartingPosition != lPreviousUniqueStartingPosition)
PD-ORIG\genreport.cpp:		lPreviousUniqueStartingPosition = lUniqueStartingPosition;
PD-ORIG\genreport.cpp:			{	// Found it!  First, write the end pos for the previous cell as well as any
PD-ORIG\memdlg.cpp:		// If we have not even processed 5 pages, then diable to free previous
PD-ORIG\dbfxint.cpp:			y--;		/* of previous year */
PD-ORIG\dll.cpp:// Previous versions of 32-bit MFC did not require this file.  This version
PD-ORIG\htmlexp.cpp:	{	// if the previous band was a body line, then write out a table end.
PD-ORIG\htmlexp.cpp:	{	// if the previous band was a body line, then write out a table end.
PD-ORIG\pdi.cpp:							previous PDI field.  Except for the first time, of course, hence bSeenAField.
PD-ORIG\mem.cpp:// box will be dispalyed which will allows the user to begin freeing up previous
PD-ORIG\dllmem.cpp:	it returns to the application, memory can be wasted. Refer to the previous 
PD-ORIG\tblentry.cpp:	m_lPreviousCols = 0 ;
PD-ORIG\tblentry.cpp:	m_lPreviousCols = 0 ;
PD-ORIG\tblentry.cpp: 	m_lPreviousCols = lCols;
PD-ORIG\tblentry.cpp:	return (m_lPreviousCols);
PD-ORIG\tblentry.cpp:	*lCols = m_lPreviousCols;
EXPORTMG\DLG\fldx.cpp:	ListBox_SetSel (GetDlgItem (hDlg, idListBox), FALSE, -1); // Removed any previous selections
EXPORTMG\DLG\xtabdlg.cpp:// updated to use the previous report type summary or detail
EXPORTMG\DLG\xtabdlg.cpp:// place any previous field information into the row/col/val list boxes.
EXPORTMG\DLG\rrxtab.cpp:// It will also use the "clean API" to get rid ofany previous data that might
EXPORTMG\FLDLST\usrobj.cpp:	ResetFldListProc ();	// Restore the previous fld list proc
CFEVAL\fnum.cpp:int CRrComposite::fprev() /* a no-op, really, since previous value is already on stack */
WFIELD\wbitmap.cpp:				// It was previously being placed below the caret. 
WFIELD\wbox.cpp:	// which is one pixel below bottom of previous line.
WFIELD\imglib.cpp:// Add comment why previous fix was made.
WFIELD\edittext.cpp:				// all the previous fields, then change to tri-state. 
WDISPLAY\wscroll.cpp:// Fix problems induced in vertInWindow() by the previous changes to FieldRect.
PRINT\totals.cpp:// Fixed problem with non-preprocessed totals induced by previous change.
PRINT\totals.cpp:		{ // first record in group, include previous group footers
PRINT\prec.cpp:		{ // we got to append previous suffix now
PRINT\prec.cpp:							// The previous implementation was based on the clock, which ment a new chart 
PRINT\prec.cpp:							TRACE( "  HTML  chart field 0x%08x previous metafile 0x%08x %s\n", pChart, pChart->mfchain->handle, csChartPicturePathname );
PRINT\prec.cpp:	{ // we got to append previous suffix now
PRINT\rpsort.cpp://  GPF when you add a previously unNEEDED group field or insert such a
PRINT\rpsort.cpp://  field on layout.  Also, fixes bug where previously unNEEDED field used
PRINT\rpprep.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
PRINT\rpprep.cpp:		// The previous implementation was based on the clock, which ment a new chart 
PRINT\rpprep.cpp:		// The previous implementation was based on the clock, which ment a new chart 
PRINT\rpexport.cpp:// Also undid previous attempt to fix this by changing mfcopyflds(). Files:
